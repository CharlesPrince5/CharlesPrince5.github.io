(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
// Â© 2001-2015 INOVx Solutions, Inc.
// 114 Pacifica Suite 300, Irvine, CA 92618 USA
// All rights reserved.
//
// This software is confidential, proprietary and unpublished property of
// INOVx Solutions, Inc.  It may NOT be copied in part or in whole on any
// medium, either electronic or printed, without the express written consent
// of INOVx Solutions, Inc.
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ReactDOM = require("react-dom");
var LicenseApp = require("./components/LicenseApp");
try {
    InovxLoader.updateHelp('license');
}
catch (e) {
}
//Uncomment bottom line and fill out
ReactDOM.render(React.createElement(LicenseApp, null), document.getElementById('licenseapp'));

},{"./components/LicenseApp":3,"react":"react","react-dom":"react-dom"}],2:[function(require,module,exports){
"use strict";
var Inovx = require("shared.web.client");
var SystemActions = Inovx.Shared.System.Actions;
var SystemStore = Inovx.Shared.System.Store;
var LicenseServices = require('./../services/LicenseServices');
var LicenseConstants = require('./../constants/LicenseConstants');
var LicenseStore = require('./../stores/LicenseStore');
function receiveAllLicenses(data) {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: LicenseConstants.LICENSE_GET_ALL,
        data: data
    });
}
function receiveLicenseInfo(data) {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: LicenseConstants.LICENSE_GET_INFO,
        data: data
    });
}
function _licenseFinishAdd() {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: LicenseConstants.LICENSE_FINISH_ADD
    });
}
var LicenseActions = {
    getAllLicenses: function (callback, errorCallback, ignoreDefaultError) {
        LicenseServices.getAllLicenses(function (data) {
            if (callback !== undefined && callback !== null) {
                callback();
            }
            receiveAllLicenses(data);
        }, function (error) { if (errorCallback)
            errorCallback(error); }, ignoreDefaultError);
    },
    getLicenseInfo: function (callback, errorCallback, ignoreDefaultError) {
        LicenseServices.getLicenseInfo(function (data) {
            if (callback) {
                callback();
            }
            receiveLicenseInfo(data);
        }, function (error) {
            if (errorCallback) {
                errorCallback(error);
            }
        }, ignoreDefaultError);
    },
    beginAddLicense: function () {
        Inovx.Shared.Flux.AppDispatcher.dispatch({
            actionType: LicenseConstants.LICENSE_BEGIN_ADD
        });
    },
    addingLicense: function (key, value) {
        Inovx.Shared.Flux.AppDispatcher.dispatch({
            actionType: LicenseConstants.LICENSE_ADD_UPDATE,
            key: key,
            value: value
        });
    },
    create: function (callback) {
        if (!SystemStore.isActionInProgress(LicenseConstants.LICENSE_ADD)) {
            SystemActions.beginAction(LicenseConstants.LICENSE_ADD);
            LicenseServices.createLicense(LicenseStore.getEditLicense(), function () {
                LicenseActions.refreshData();
                if (callback !== undefined && callback !== null) {
                    callback();
                }
                _licenseFinishAdd();
                SystemActions.endAction(LicenseConstants.LICENSE_ADD);
            }, function () {
                SystemActions.endAction(LicenseConstants.LICENSE_ADD);
            });
        }
    },
    finishAdd: function () {
        if (LicenseStore.getHasChanges()) {
            var callbackFunct = LicenseActions.create;
            SystemActions.displaySaveChangesDialog({
                message: InovxLoader.t("common:msgBox.saveChanges"),
                confirmCallback: callbackFunct,
                cancelCallback: _licenseFinishAdd
            });
        }
        else {
            _licenseFinishAdd();
        }
    },
    refreshData: function () {
        LicenseActions.getAllLicenses();
    }
};
module.exports = LicenseActions;

},{"./../constants/LicenseConstants":5,"./../services/LicenseServices":6,"./../stores/LicenseStore":7,"shared.web.client":"shared.web.client"}],3:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var React = require("react");
var Inovx = require("shared.web.client");
var LicenseForm = require("./LicenseForm");
var LicenseActions = require("./../actions/LicenseActions");
var LicenseStore = require("./../stores/LicenseStore");
var SystemActions = Inovx.Shared.System.Actions;
var SystemStore = Inovx.Shared.System.Store;
var InovxControls = Inovx.Shared.Controls;
var UrlUtilities = Inovx.Shared.Common.UrlUtilities;
function getLicenseState() {
    return {
        currentLicense: LicenseStore.getCurrentLicense(),
        allLicenses: LicenseStore.getAllLicenses(),
        modalVisible: LicenseStore.getModalVisible(),
    };
}
var LicenseApp = /** @class */ (function (_super) {
    __extends(LicenseApp, _super);
    function LicenseApp(props, context) {
        var _this = _super.call(this, 'License', props, context) || this;
        _this._showAddLicenseKey = function () {
            LicenseActions.beginAddLicense();
        };
        _this._formatDate = function (date) {
            var parsedDate = new Date(date);
            var month = parsedDate.getUTCMonth() + 1;
            var day = parsedDate.getUTCDate();
            var year = parsedDate.getUTCFullYear();
            return parsedDate.toLocaleDateString();
        };
        _this._hideModal = function () {
            LicenseActions.finishAdd();
        };
        _this._onChange = function () {
            _this.setState(getLicenseState());
        };
        _this.state = getLicenseState();
        return _this;
    }
    LicenseApp.prototype._initialize = function () {
        var _this = this;
        LicenseActions.getAllLicenses(function () {
            _this._appLoaded = true;
        }, function (error) {
            _this._handlePermissionError(error);
        }, true);
    };
    LicenseApp.prototype._applyClass = function (data) {
        if (data.IsExpired) {
            return "expired";
        }
        return "";
    };
    LicenseApp.prototype.componentWillMount = function () {
        this.componentWillMountBase();
    };
    LicenseApp.prototype.componentDidMount = function () {
        LicenseStore.addChangeListener(this._onChange);
    };
    LicenseApp.prototype.componentWillUnmount = function () {
        LicenseStore.removeChangeListener(this._onChange);
    };
    LicenseApp.prototype.render = function () {
        var allLicenses = this.state.allLicenses;
        var iconHeaderProps = {
            iconUrl: "".concat(UrlUtilities.getBaseApplicationUrl(), "/images/License.png"),
            iconAtt: { alt: "License" },
            title: InovxLoader.t("License:header.license"),
            rcClass: "cd-btn add-btn",
            onClick: this._showAddLicenseKey,
            btnUrl: "".concat(UrlUtilities.getBaseApplicationUrl(), "/images/addLicense.png"),
            btnAtt: {
                alt: InovxLoader.t("License:form.addKey"),
                title: InovxLoader.t("License:form.addKey")
            }
        };
        var dataSource = [];
        for (var i = 0; i < allLicenses.length; i++) {
            var _a = allLicenses[i], ID = _a.ID, StartDate = _a.StartDate, ExpirationDate = _a.ExpirationDate, CompanyName = _a.CompanyName, PurchaseOrder = _a.PurchaseOrder, IsExpired = _a.IsExpired;
            var licenseObject = {
                StartDate: StartDate,
                ExpirationDate: ExpirationDate,
                CompanyName: CompanyName,
                PurchaseOrder: PurchaseOrder,
                ID: ID,
                IsExpired: IsExpired
            };
            dataSource.push(licenseObject);
        }
        var columns = [{
                field: "StartDate",
                headerText: InovxLoader.t("License:grid.startDate")
            }, {
                field: "ExpirationDate",
                headerText: InovxLoader.t("License:grid.expiration")
            }, {
                field: "CompanyName",
                headerText: InovxLoader.t("License:grid.company")
            }, {
                field: "PurchaseOrder",
                headerText: InovxLoader.t("License:grid.purchaseOrder")
            }, {
                field: "ID",
                headerText: InovxLoader.t("License:grid.licenseKeyId")
            }];
        return (React.createElement(Inovx.Shared.Core.ReactLoader, { appReady: this.isAppLoaded(), errorStatus: this._errorStatus },
            React.createElement("div", { className: "license-app-content" },
                React.createElement(Inovx.Shared.Layout.IconHeader, __assign({}, iconHeaderProps)),
                React.createElement(Inovx.Shared.Controls.Grid, { dataSource: dataSource, columns: columns, sort: true, applyRowClass: this._applyClass })),
            React.createElement(Inovx.Shared.Controls.ModalSlider, { isOpen: this.state.modalVisible, onClose: this._hideModal },
                React.createElement(LicenseForm, null))));
    };
    return LicenseApp;
}(Inovx.Shared.ReactExt.BaseAppComponent));
module.exports = LicenseApp;

},{"./../actions/LicenseActions":2,"./../stores/LicenseStore":7,"./LicenseForm":4,"react":"react","shared.web.client":"shared.web.client"}],4:[function(require,module,exports){
"use strict";
// A '.tsx' file enables JSX support in the TypeScript compiler, 
// for more information see the following page on the TypeScript wiki:
// https://github.com/Microsoft/TypeScript/wiki/JSX
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var React = require("react");
var Inovx = require("shared.web.client");
var LicenseStore = require("./../stores/LicenseStore");
var LicenseConstants = require("./../constants/LicenseConstants");
var LicenseActions = require("./../actions/LicenseActions");
var SystemActions = Inovx.Shared.System.Actions;
var SystemStore = Inovx.Shared.System.Store;
var InovxControls = Inovx.Shared.Controls;
var _actionInProgressMsg;
function getActionInProgress() {
    return SystemStore.isActionInProgress(LicenseConstants.LICENSE_ADD);
}
function getFormState() {
    return {
        editLicenseKey: LicenseStore.getEditLicense(),
        isActionInProgress: getActionInProgress(),
        isActionInProgressMsg: _actionInProgressMsg
    };
}
var LicenseForm = /** @class */ (function (_super) {
    __extends(LicenseForm, _super);
    function LicenseForm(props) {
        var _this = _super.call(this, props) || this;
        _this._saveLicense = function () {
            LicenseActions.create();
        };
        _this._cancel = function () {
            LicenseActions.finishAdd();
        };
        _this._checkForUnsavedChanges = function (event) {
            if (LicenseStore.getHasChanges()) {
                event.returnValue = InovxLoader.t('common.msgBox.browserSaveChanges');
            }
        };
        _this._onChange = function (event) {
            LicenseActions.addingLicense(event.name, event.target.value);
        };
        _this._loadState = function () {
            _this.setState(getFormState());
        };
        _this._systemChange = function () {
            _this.setState({
                isActionInProgress: getActionInProgress()
            });
        };
        _this.state = getFormState();
        return _this;
    }
    LicenseForm.prototype.componentDidMount = function () {
        LicenseStore.addChangeListener(this._loadState);
        SystemStore.addChangeListener(this._systemChange);
        window.addEventListener('beforeunload', this._checkForUnsavedChanges);
    };
    LicenseForm.prototype.componentWillUnmount = function () {
        LicenseStore.removeChangeListener(this._loadState);
        SystemStore.removeChangeListener(this._systemChange);
        window.removeEventListener('beforeunload', this._checkForUnsavedChanges);
    };
    LicenseForm.prototype.render = function () {
        var header = InovxLoader.t("License:form.newLicense");
        var inputObj = {
            className: 'form-control',
            type: 'text'
        };
        var licenseKeyInput = jQuery.extend({
            name: 'LicenseKey',
            value: this.state.editLicenseKey
        }, inputObj);
        return (React.createElement(InovxControls.StaticHeaderForm, { title: header, saveOnClick: this._saveLicense, cancelOnClick: this._cancel, isActionInProgress: this.state.isActionInProgress, inProgressMessage: this.state.isActionInProgressMsg },
            React.createElement(InovxControls.FormField, { title: "".concat(InovxLoader.t('License:form.licenseKey'), "*"), inputName: 'LicenseKey' },
                React.createElement("input", __assign({}, licenseKeyInput, { onChange: this._onChange })))));
    };
    ;
    return LicenseForm;
}(React.Component));
module.exports = LicenseForm;

},{"./../actions/LicenseActions":2,"./../constants/LicenseConstants":5,"./../stores/LicenseStore":7,"react":"react","shared.web.client":"shared.web.client"}],5:[function(require,module,exports){
"use strict";
var keymirror = require("fbjs/lib/keymirror");
// convention for constants is
// [License]_[Action]
var LicenseConstants = keymirror({
    LICENSE_GET_ALL: null,
    LICENSE_GET_INFO: null,
    LICENSE_BEGIN_ADD: null,
    LICENSE_ADD_UPDATE: null,
    LICENSE_ADD: null,
    LICENSE_FINISH_ADD: null
});
module.exports = LicenseConstants;

},{"fbjs/lib/keymirror":"fbjs/lib/keymirror"}],6:[function(require,module,exports){
"use strict";
var Inovx = require("shared.web.client");
var assign = require("object-assign");
var UrlUtilities = Inovx.Shared.Common.UrlUtilities;
var url = "".concat(UrlUtilities.getApiUrl(), "/LicenseApi/api/license");
var LicenseServices = assign({}, Inovx.Shared.Flux.BaseService, {
    //Replace method accordingly
    getLicenseInfo: function (successCallback, errorCallback, ignoreDefaultError) {
        var _this = this;
        this.get("".concat(url, "/Get"), null, function (retData) {
            successCallback(retData);
        }, function (error) {
            if (!ignoreDefaultError) {
                _this.handleWebApiError(error);
            }
            errorCallback(error);
        });
    },
    getAllLicenses: function (successCallback, errorCallback, ignoreDefaultError) {
        var _this = this;
        this.get("".concat(url, "/GetAll"), null, function (retData) {
            successCallback(retData);
        }, function (error) {
            if (!ignoreDefaultError) {
                _this.handleWebApiError(error);
            }
            errorCallback(error);
        });
    },
    createLicense: function (licenseKey, successCallback, errorCallback) {
        var _this = this;
        this.post("".concat(url, "/Create"), { key: licenseKey }, function (data) {
            successCallback(data);
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    }
});
module.exports = LicenseServices;

},{"object-assign":9,"shared.web.client":"shared.web.client"}],7:[function(require,module,exports){
"use strict";
// This file is only a template for Stores.  Copy and paste this to your application store .ts file and start off from there
// Rename all things with App_Name.
// Naming convention for Stores is "[App Name]Store.ts" i.e. UserStore.ts, EntitlementStore.ts
var NodeEvents = require("events");
var Inovx = require("shared.web.client");
var LicenseConstants = require("./../constants/LicenseConstants");
var assign = require("object-assign");
var EventEmitter = NodeEvents.EventEmitter;
var DateTimeFormatHelper = Inovx.Shared.Common.DateTimeFormatHelper;
var CHANGE_EVENT = 'License.change';
var _beginAdd = false, _modalVisible = false, _licenseChangesMade = false, _license = getBlankLicense(), _editLicense = "", _allLicenses = [];
function getBlankLicense() {
    return { ID: "", StartDate: "", ExpirationDate: "", KnowledgeViewLimit: 0, AssetLimit: 0, CompanyName: "", PurchaseOrder: "", IsExpired: false };
}
function setAddingLicense() {
    _beginAdd = _modalVisible = true;
    _licenseChangesMade = false;
    _editLicense = "";
}
function updateAddingLicense(key, value) {
    _editLicense = value;
    _licenseChangesMade = true;
}
function licenseFinishedAdding() {
    _modalVisible = false;
    _licenseChangesMade = false;
}
function fixLicense(license) {
    if (license) {
        license.StartDate = DateTimeFormatHelper.getFormatDate(license.StartDate);
        license.ExpirationDate = DateTimeFormatHelper.getFormatDate(license.ExpirationDate);
    }
}
function fixLicenses(data) {
    if (data) {
        data.forEach(function (l) {
            fixLicense(l);
        });
    }
}
var LicenseStore = assign({}, EventEmitter.prototype, {
    // Add store getters here
    getCurrentLicense: function () {
        return _license;
    },
    getAllLicenses: function () {
        return _allLicenses;
    },
    getEditLicense: function () {
        return _editLicense;
    },
    getHasChanges: function () {
        return _licenseChangesMade;
    },
    getModalVisible: function () {
        return _modalVisible;
    },
    emitChange: function () {
        this.emit(CHANGE_EVENT);
    },
    addChangeListener: function (callback) {
        this.on(CHANGE_EVENT, callback);
    },
    removeChangeListener: function (callback) {
        this.removeListener(CHANGE_EVENT, callback);
    }
});
Inovx.Shared.Flux.AppDispatcher.register(function (payload) {
    switch (payload.actionType) {
        case LicenseConstants.LICENSE_GET_ALL:
            _allLicenses = payload.data;
            fixLicenses(_allLicenses);
            break;
        case LicenseConstants.LICENSE_GET_INFO:
            _license = payload.data;
            fixLicense(_license);
            break;
        case LicenseConstants.LICENSE_BEGIN_ADD:
            setAddingLicense();
            break;
        case LicenseConstants.LICENSE_ADD_UPDATE:
            updateAddingLicense(payload.key, payload.value);
            break;
        case LicenseConstants.LICENSE_FINISH_ADD:
            licenseFinishedAdding();
            break;
        default: return true;
    }
    LicenseStore.emitChange();
    return true;
});
module.exports = LicenseStore;

},{"./../constants/LicenseConstants":5,"events":8,"object-assign":9,"shared.web.client":"shared.web.client"}],8:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var objectCreate = Object.create || objectCreatePolyfill
var objectKeys = Object.keys || objectKeysPolyfill
var bind = Function.prototype.bind || functionBindPolyfill

function EventEmitter() {
  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
    this._events = objectCreate(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

var hasDefineProperty;
try {
  var o = {};
  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
  hasDefineProperty = o.x === 0;
} catch (err) { hasDefineProperty = false }
if (hasDefineProperty) {
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      // check whether the input is a positive number (whose value is zero or
      // greater and not a NaN).
      if (typeof arg !== 'number' || arg < 0 || arg !== arg)
        throw new TypeError('"defaultMaxListeners" must be a positive number');
      defaultMaxListeners = arg;
    }
  });
} else {
  EventEmitter.defaultMaxListeners = defaultMaxListeners;
}

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    if (arguments.length > 1)
      er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Unhandled "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
      // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
      // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = objectCreate(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
          listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
            existing.length + ' "' + String(type) + '" listeners ' +
            'added. Use emitter.setMaxListeners() to ' +
            'increase limit.');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        if (typeof console === 'object' && console.warn) {
          console.warn('%s: %s', w.name, w.message);
        }
      }
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    switch (arguments.length) {
      case 0:
        return this.listener.call(this.target);
      case 1:
        return this.listener.call(this.target, arguments[0]);
      case 2:
        return this.listener.call(this.target, arguments[0], arguments[1]);
      case 3:
        return this.listener.call(this.target, arguments[0], arguments[1],
            arguments[2]);
      default:
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i)
          args[i] = arguments[i];
        this.listener.apply(this.target, args);
    }
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = bind.call(onceWrapper, state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = objectCreate(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else
          spliceOne(list, position);

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (!events)
    return [];

  var evlistener = events[type];
  if (!evlistener)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function objectCreatePolyfill(proto) {
  var F = function() {};
  F.prototype = proto;
  return new F;
}
function objectKeysPolyfill(obj) {
  var keys = [];
  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
    keys.push(k);
  }
  return k;
}
function functionBindPolyfill(context) {
  var fn = this;
  return function () {
    return fn.apply(context, arguments);
  };
}

},{}],9:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
