(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
// © 2001-2015 INOVx Solutions, Inc.
// 114 Pacifica Suite 300, Irvine, CA 92618 USA
// All rights reserved.
//
// This software is confidential, proprietary and unpublished property of
// INOVx Solutions, Inc.  It may NOT be copied in part or in whole on any
// medium, either electronic or printed, without the express written consent
// of INOVx Solutions, Inc.
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ReactDOM = require("react-dom");
var OrganizationApp = require("./components/OrganizationApp");
try {
    InovxLoader.updateHelp('organization-access-rights');
}
catch (e) {
}
ReactDOM.render(React.createElement(OrganizationApp, null), document.getElementById('organizationApp'));

},{"./components/OrganizationApp":4,"react":"react","react-dom":"react-dom"}],2:[function(require,module,exports){
"use strict";
// © 2001-2015 INOVx Solutions, Inc.
// 114 Pacifica Suite 300, Irvine, CA 92618 USA
// All rights reserved.
//
// This software is confidential, proprietary and unpublished property of
// INOVx Solutions, Inc.  It may NOT be copied in part or in whole on any
// medium, either electronic or printed, without the express written consent
// of INOVx Solutions, Inc.
var Inovx = require("shared.web.client");
var OrganizationService = require("./../services/OrganizationServices");
var OrganizationConstants = require("./../constants/OrganizationConstants");
var OrganizationStore = require("./../stores/OrganizationStore");
var SystemActions = Inovx.Shared.System.Actions;
var SystemStore = Inovx.Shared.System.Store;
function _endEdit() {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: OrganizationConstants.ORGANIZATION_END_EDIT
    });
}
var OrganizationActions = {
    getAllRoot: function (itemType, callback, errorCallback, ignoreDefaultError) {
        OrganizationService.getAllRoot(itemType, function (data) {
            if (callback !== undefined && callback != null) {
                callback();
            }
            Inovx.Shared.Flux.AppDispatcher.dispatch({
                actionType: OrganizationConstants.ORGANIZATION_RECIEVE_ROOTS,
                data: data
            });
        }, function (error) {
            if (errorCallback) {
                errorCallback(error);
            }
        }, ignoreDefaultError);
    },
    getChildren: function (organization, callback) {
        OrganizationService.getChildren(organization, function (data) {
            if (callback !== undefined && callback != null) {
                callback();
            }
            Inovx.Shared.Flux.AppDispatcher.dispatch({
                actionType: OrganizationConstants.ORGANIZATION_RECIEVE_CHILDREN,
                parent: organization,
                data: data
            });
        }, function () { });
    },
    beginEdit: function (organization) {
        OrganizationService.getAllRoles(function (roles) {
            Inovx.Shared.Flux.AppDispatcher.dispatch({
                actionType: OrganizationConstants.ORGANIZATION_RECEIVE_ALL_ROLES,
                roles: roles
            });
            OrganizationService.getOrganizationDetail(organization.ID, function (organization) {
                Inovx.Shared.Flux.AppDispatcher.dispatch({
                    actionType: OrganizationConstants.ORGANIZATION_BEGIN_EDIT,
                    organization: organization
                });
            }, function (error) {
            });
        }, function (error) {
        });
    },
    endEdit: function () {
        if (OrganizationStore.getHasChanges()) {
            SystemActions.displaySaveChangesDialog({
                message: InovxLoader.t("common:msgBox.saveChanges"),
                cancelCallback: _endEdit,
                confirmCallback: function () {
                    OrganizationActions.edit(OrganizationStore.getCurrentParent());
                }
            });
        }
        else {
            _endEdit();
        }
    },
    edit: function (parent, callback) {
        if (!SystemStore.isActionInProgress(OrganizationConstants.ORGANIZATION_EDIT)) {
            SystemActions.beginAction(OrganizationConstants.ORGANIZATION_EDIT);
            OrganizationService.editOrganization(OrganizationStore.getEditOrganization(), function (data) {
                if (parent == null) {
                    //Hard coded for now
                    OrganizationActions.getAllRoot(3);
                }
                else {
                    OrganizationActions.getChildren(parent);
                }
                if (callback !== undefined && callback != null) {
                    callback();
                }
                _endEdit();
                SystemActions.endAction(OrganizationConstants.ORGANIZATION_EDIT);
            }, function (error) {
                SystemActions.endAction(OrganizationConstants.ORGANIZATION_EDIT);
            });
        }
    },
    update: function (key, value) {
        Inovx.Shared.Flux.AppDispatcher.dispatch({
            actionType: OrganizationConstants.ORGANIZATION_UPDATE_ORGANIZATION,
            key: key,
            value: value
        });
    }
};
module.exports = OrganizationActions;

},{"./../constants/OrganizationConstants":5,"./../services/OrganizationServices":6,"./../stores/OrganizationStore":7,"shared.web.client":"shared.web.client"}],3:[function(require,module,exports){
"use strict";
// © 2001-2015 INOVx Solutions, Inc.
// 114 Pacifica Suite 300, Irvine, CA 92618 USA
// All rights reserved.
//
// This software is confidential, proprietary and unpublished property of
// INOVx Solutions, Inc.  It may NOT be copied in part or in whole on any
// medium, either electronic or printed, without the express written consent
// of INOVx Solutions, Inc.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var React = require("react");
var OrganizationStore = require("./../stores/OrganizationStore");
var OrganizationConstants = require("./../constants/OrganizationConstants");
var OrganizationActions = require("./../actions/OrganizationActions");
var Inovx = require("shared.web.client");
var SystemActions = Inovx.Shared.System.Actions;
var SystemStore = Inovx.Shared.System.Store;
var ListHelper = Inovx.Shared.Common.ListHelper;
var InovxControls = Inovx.Shared.Controls;
var ORGANIZATION_HIERARCHY = 'Hierarchy';
function getActionInProgress() {
    return SystemStore.isActionInProgress(OrganizationConstants.ORGANIZATION_EDIT);
}
var _actionInProgressMsg;
function getFormState() {
    return {
        parent: OrganizationStore.getCurrentParent(),
        organization: OrganizationStore.getEditOrganization(),
        isActionInProgress: getActionInProgress(),
        actionInProgressMsg: _actionInProgressMsg,
        allRoles: OrganizationStore.getAllRoles()
    };
}
var OrganizationAccessRightForm = /** @class */ (function (_super) {
    __extends(OrganizationAccessRightForm, _super);
    function OrganizationAccessRightForm(props) {
        var _this = _super.call(this, props) || this;
        _this._onChange = function (event) {
            OrganizationActions.update(event.target.name, event.target.value);
        };
        _this._loadState = function () {
            _this.setState(getFormState());
        };
        _this._systemChange = function () {
            _this.setState({
                isActionInProgress: getActionInProgress()
            });
        };
        _this._saveOrganization = function () {
            OrganizationActions.edit(_this.state.parent);
            _this.setState({ actionInProgressMsg: InovxLoader.t('organization:form.saving') });
        };
        _this._cancel = function () {
            OrganizationActions.endEdit();
        };
        _this._isEmptyOrNull = function (value) {
            return value && value.length > 0;
        };
        _this._validateOrganization = function () {
            var form = _this.refs["name"];
            if (form.isValid(_this._isEmptyOrNull)) {
                return true;
            }
            return false;
        };
        _this._checkForUnsavedChanges = function (event) {
            if (OrganizationStore.getHasChanges()) {
                event.returnValue = InovxLoader.t('common:msgBox.browserSaveChanges');
            }
            ;
        };
        _this._validateRemove = function (selectedRoles) {
            for (var i = 0; i < selectedRoles.length; i++) {
                var role = selectedRoles[i];
                if (role.Inherited !== undefined && role.Inherited) {
                    var messageObject = {
                        message: InovxLoader.t('organization:error.inheritedRole')
                    };
                    SystemActions.displayErrorMessage(messageObject);
                    return false;
                }
            }
            return true;
        };
        _this._rolesChanged = function (roles) {
            OrganizationActions.update("AssignedRoles", roles);
        };
        _this._availableRoles = function () {
            var allRoles = _this.state.allRoles;
            var assignedRoles = _this.state.organization.AssignedRoles;
            var roles = allRoles.filter(function (role) {
                return assignedRoles.filter(function (assignedRole) {
                    return role.ID === assignedRole.ID && role.Name === assignedRole.Name;
                }).length === 0;
            });
            return roles;
        };
        _this.state = getFormState();
        return _this;
    }
    OrganizationAccessRightForm.prototype.componentWillMount = function () {
        ListHelper.sort(this.state.allRoles, "Name");
        ListHelper.sort(this.state.organization.AssignedRoles, "Name");
    };
    OrganizationAccessRightForm.prototype.componentWillUpdate = function (nextProps, nextState) {
        ListHelper.sort(this.state.organization.AssignedRoles, "Name");
    };
    OrganizationAccessRightForm.prototype.componentDidMount = function () {
        OrganizationStore.addChangeListener(this._loadState);
        SystemStore.addChangeListener(this._systemChange);
        window.addEventListener('beforeunload', this._checkForUnsavedChanges);
    };
    OrganizationAccessRightForm.prototype.componentWillUnmount = function () {
        OrganizationStore.removeChangeListener(this._loadState);
        SystemStore.removeChangeListener(this._systemChange);
        window.removeEventListener('beforeunload', this._checkForUnsavedChanges);
    };
    OrganizationAccessRightForm.prototype.render = function () {
        var inputObj = {
            className: 'form-control',
            type: 'text'
        };
        var Organization = this.state.organization;
        // Only a root item may get its names changed.
        // var editable = (Organization.InheritAccessRightFromID) ? false : true;
        // Renaming of the roots is temporarily disabled (bug #11591)
        var editable = false;
        var OrganizationNameInput = jQuery.extend({
            name: 'Name',
            value: Organization.Name
        }, inputObj);
        var header = InovxLoader.t('organization:form.header');
        var nameFieldHeader = InovxLoader.t("organization:common.organizationName");
        if (Organization.InheritAccessRightFromID) {
            nameFieldHeader = InovxLoader.t("organization:common.workspace");
        }
        return (React.createElement(InovxControls.StaticHeaderForm, { title: header, saveOnClick: this._saveOrganization, cancelOnClick: this._cancel, isActionInProgress: this.state.isActionInProgress, inProgressMessage: this.state.actionInProgressMsg },
            React.createElement(InovxControls.FormField, { title: "".concat(nameFieldHeader, "*"), inputName: 'Name' },
                React.createElement(InovxControls.RequiredInput, __assign({}, OrganizationNameInput, { onChangeCallback: this._onChange, ref: "name", readOnly: !editable }))),
            React.createElement(InovxControls.FormField, { title: InovxLoader.t("organization:common.roles"), inputName: 'Role' },
                React.createElement("span", { className: "edit-role-description" }, InovxLoader.t("organization:form.rolesDescription"))),
            React.createElement(InovxControls.ObjectAssignment, { leftHeader: InovxLoader.t('organization:form.availableRoles'), rightHeader: InovxLoader.t('organization:form.assignedRoles'), availableObjects: this._availableRoles(), assignedObjects: this.state.organization.AssignedRoles, inheritedObjectAttribute: "Inherited", onValueChanged: this._rolesChanged, validateRemove: this._validateRemove })));
    };
    return OrganizationAccessRightForm;
}(React.Component));
module.exports = OrganizationAccessRightForm;

},{"./../actions/OrganizationActions":2,"./../constants/OrganizationConstants":5,"./../stores/OrganizationStore":7,"react":"react","shared.web.client":"shared.web.client"}],4:[function(require,module,exports){
"use strict";
// © 2001-2015 INOVx Solutions, Inc.
// 114 Pacifica Suite 300, Irvine, CA 92618 USA
// All rights reserved.
//
// This software is confidential, proprietary and unpublished property of
// INOVx Solutions, Inc.  It may NOT be copied in part or in whole on any
// medium, either electronic or printed, without the express written consent
// of INOVx Solutions, Inc.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var React = require("react");
var Inovx = require("shared.web.client");
var OrganizationActions = require("./../actions/OrganizationActions");
var OrganizationStore = require("./../stores/OrganizationStore");
var OrganizationAccessRightForm = require("./OrganizationAccessRightForm");
var SystemActions = Inovx.Shared.System.Actions;
var SystemStore = Inovx.Shared.System.Store;
var InovxControls = Inovx.Shared.Controls;
var UrlUtilities = Inovx.Shared.Common.UrlUtilities;
var ORGANIZATION_TERMINAL = 'Root';
var _breadcrumbList = [];
var _currentLevel = OrganizationStore.getCurrentOrganization();
function getOrganizationState() {
    return {
        breadcrumbList: _breadcrumbList,
        currentList: OrganizationStore.getCurrentList(),
        isEditing: OrganizationStore.getIsEditing()
    };
}
var OrganizationApp = /** @class */ (function (_super) {
    __extends(OrganizationApp, _super);
    function OrganizationApp(props, context) {
        var _this = _super.call(this, 'organization', props, context) || this;
        _this._onChange = function () {
            _this.setState(getOrganizationState());
        };
        _this._initialize = function () {
            _breadcrumbList.push({ Name: InovxLoader.t('organization:breadcrumb.root'), OrganizationType: "Root", ID: '', Description: '', TypeName: '', VersionToken: '', ItemType: 3 });
            _currentLevel = _breadcrumbList[0];
            //Hard coded for now
            OrganizationActions.getAllRoot(3, function () {
                _this._appLoaded = true;
            }, function (error) {
                _this._handlePermissionError(error);
            }, true);
        };
        _this._breadcrumbClicked = function (organization) {
            var index = _breadcrumbList.indexOf(organization) + 1;
            _breadcrumbList.splice(index, _breadcrumbList.length - index);
            if (organization.OrganizationType == "Root") {
                //Hard coded for now
                OrganizationActions.getAllRoot(3, function () {
                    _currentLevel = organization;
                });
            }
            else {
                _this._getChildren(organization);
            }
        };
        _this._itemClicked = function (organization) {
            _breadcrumbList.push(organization);
            _this._getChildren(organization);
        };
        _this._editItem = function (organization) {
            OrganizationActions.beginEdit(jQuery.extend(true, {}, organization));
        };
        _this._endEdit = function () {
            OrganizationActions.endEdit();
        };
        _this.state = getOrganizationState();
        return _this;
    }
    OrganizationApp.prototype._getChildren = function (organization) {
        OrganizationActions.getChildren(organization, function () {
            _currentLevel = organization;
        });
    };
    OrganizationApp.prototype.componentWillMount = function () {
        this.componentWillMountBase();
    };
    OrganizationApp.prototype.componentDidMount = function () {
        OrganizationStore.addChangeListener(this._onChange);
    };
    OrganizationApp.prototype.componentWillUnmount = function () {
        OrganizationStore.removeChangeListener(this._onChange);
    };
    OrganizationApp.prototype.render = function () {
        var _this = this;
        var canEdit = true, hasChildren = true, headerTitle = InovxLoader.t('organization:table.project');
        if (_currentLevel.OrganizationType !== ORGANIZATION_TERMINAL) {
            //canEdit = false;
            hasChildren = false;
            headerTitle = InovxLoader.t('organization:table.workspace');
        }
        var width = 80;
        var nameWidth = { width: 'calc(100%' + (canEdit ? ' - ' + width + 'px' : '') + ')' };
        var editWidth = { width: width + 'px' };
        var alt = true;
        var children = this.state.currentList.map(function (item) {
            alt = !alt;
            var nameProps = {
                className: 'tg-cell',
                style: nameWidth
            };
            if (hasChildren) {
                nameProps.onClick = function () { _this._itemClicked(item); };
                nameProps.className += ' edit';
            }
            ;
            return (React.createElement("div", { className: "tg-row ".concat(alt ? 'tg-alt' : ''), key: item.ID, style: { width: '100%' } },
                React.createElement("div", __assign({}, nameProps), item.Name),
                canEdit
                    ? React.createElement("div", { style: editWidth, className: 'tg-cell' },
                        React.createElement("a", { className: "grid-button", onClick: function () { return _this._editItem(item); } },
                            React.createElement("span", { className: "glyphicon glyphicon-pencil" })))
                    : null));
        });
        var iconHeaderProps = {
            iconUrl: "".concat(UrlUtilities.getBaseApplicationUrl(), "/images/Organization.png"),
            iconAtt: { alt: "Organization Access Rights" },
            title: InovxLoader.t('organization:header.organization'),
        };
        return (React.createElement(Inovx.Shared.Core.ReactLoader, { appReady: this.isAppLoaded(), errorStatus: this._errorStatus },
            React.createElement("div", { className: "organization-app-content" },
                React.createElement(Inovx.Shared.Layout.IconHeader, __assign({}, iconHeaderProps)),
                React.createElement(InovxControls.BreadcrumbPanel, { breadcrumb: this.state.breadcrumbList, onClick: this._breadcrumbClicked, displayProp: 'Name' },
                    React.createElement("div", { className: "tg-table" },
                        React.createElement("div", { className: "tg-grid" },
                            React.createElement("div", { className: "tg-header-container" },
                                React.createElement("div", { className: "tg-header tg-row" },
                                    React.createElement("div", { className: "tg-cell", style: nameWidth },
                                        React.createElement("div", { className: "tg-hdr-ctnt" },
                                            React.createElement("div", { className: "tg-title" }, headerTitle))),
                                    canEdit
                                        ? React.createElement("div", { className: "tg-cell", style: editWidth },
                                            React.createElement("div", { className: "tg-hdr-ctnt" },
                                                React.createElement("div", { className: "tg-title" }, InovxLoader.t('organization:table.action'))))
                                        : null))),
                        React.createElement("div", { className: "tg-content-container", style: { overflow: 'initial' } },
                            React.createElement("div", { className: 'tg-content' }, children))))),
            React.createElement(Inovx.Shared.Controls.ModalSlider, { isOpen: this.state.isEditing, onClose: this._endEdit },
                React.createElement(OrganizationAccessRightForm, null))));
    };
    return OrganizationApp;
}(Inovx.Shared.ReactExt.BaseAppComponent));
module.exports = OrganizationApp;

},{"./../actions/OrganizationActions":2,"./../stores/OrganizationStore":7,"./OrganizationAccessRightForm":3,"react":"react","shared.web.client":"shared.web.client"}],5:[function(require,module,exports){
"use strict";
// © 2001-2015 INOVx Solutions, Inc.
// 114 Pacifica Suite 300, Irvine, CA 92618 USA
// All rights reserved.
//
// This software is confidential, proprietary and unpublished property of
// INOVx Solutions, Inc.  It may NOT be copied in part or in whole on any
// medium, either electronic or printed, without the express written consent
// of INOVx Solutions, Inc.
var keymirror = require("fbjs/lib/keymirror");
var OrganizationConstants = keymirror({
    ORGANIZATION_RECIEVE_ROOTS: null,
    ORGANIZATION_RECIEVE_CHILDREN: null,
    ORGANIZATION_BEGIN_EDIT: null,
    ORGANIZATION_END_EDIT: null,
    ORGANIZATION_EDIT: null,
    ORGANIZATION_UPDATE_ORGANIZATION: null,
    ORGANIZATION_RECEIVE_ALL_ROLES: null
});
module.exports = OrganizationConstants;

},{"fbjs/lib/keymirror":"fbjs/lib/keymirror"}],6:[function(require,module,exports){
"use strict";
// © 2001-2015 INOVx Solutions, Inc.
// 114 Pacifica Suite 300, Irvine, CA 92618 USA
// All rights reserved.
//
// This software is confidential, proprietary and unpublished property of
// INOVx Solutions, Inc.  It may NOT be copied in part or in whole on any
// medium, either electronic or printed, without the express written consent
// of INOVx Solutions, Inc.
var Inovx = require("shared.web.client");
var assign = require("object-assign");
var UrlUtilities = Inovx.Shared.Common.UrlUtilities;
var roleUrl = "".concat(UrlUtilities.getApiUrl(), "/OrganizationApi/api/role");
var url = "".concat(UrlUtilities.getApiUrl(), "/OrganizationApi/api/organization");
var OrganizationServices = assign({}, Inovx.Shared.Flux.BaseService, {
    getAllRoot: function (itemType, successCallback, errorCallback, ignoreDefaultError) {
        var _this = this;
        this.get("".concat(url, "/RootItems"), { itemType: itemType }, function (retData) {
            successCallback(retData);
        }, function (error) {
            if (!ignoreDefaultError) {
                _this.handleWebApiError(error);
            }
            errorCallback(error);
        });
    },
    getChildren: function (organization, successCallback, errorCallback) {
        var _this = this;
        this.get("".concat(url, "/ChildrenItems"), { id: organization.ID, itemType: 3 }, function (retData) {
            successCallback(retData);
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    },
    getOrganizationDetail: function (id, successCallback, errorCallback) {
        var _this = this;
        this.get("".concat(url, "/ItemDetail"), { id: id, itemType: 3 }, function (retData) {
            successCallback(retData);
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    },
    editOrganization: function (itemDetail, successCallback, errorCallback) {
        var _this = this;
        this.post("".concat(url, "/UpdateItem"), itemDetail, function (retData) {
            successCallback(retData);
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    },
    getAllRoles: function (successCallback, errorCallback) {
        var _this = this;
        this.get(roleUrl, null, function (retData) {
            successCallback(retData);
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    }
});
module.exports = OrganizationServices;

},{"object-assign":9,"shared.web.client":"shared.web.client"}],7:[function(require,module,exports){
"use strict";
// © 2001-2015 INOVx Solutions, Inc.
// 114 Pacifica Suite 300, Irvine, CA 92618 USA
// All rights reserved.
//
// This software is confidential, proprietary and unpublished property of
// INOVx Solutions, Inc.  It may NOT be copied in part or in whole on any
// medium, either electronic or printed, without the express written consent
// of INOVx Solutions, Inc.
var NodeEvents = require("events");
var Inovx = require("shared.web.client");
var assign = require("object-assign");
var OrganizationConstants = require("./../constants/OrganizationConstants");
var EventEmitter = NodeEvents.EventEmitter;
var CHANGE_EVENT = 'Organization.change';
var _parent = null, _currentList = [], _currentOrganization = getBlankOrganization(), _editOrganization = getBlankOrganizationDetail(), _hasChanges = false, _isEditingOrganization = false, _allRoles = [];
function setEditingOrganization(organization) {
    _currentOrganization = organization;
    _isEditingOrganization = true;
    _editOrganization = $.extend({}, organization);
    _hasChanges = false;
}
function _updateEditOrganization(key, value) {
    _editOrganization[key] = value;
    _hasChanges = true;
}
function finishEditing() {
    _isEditingOrganization = false;
    _hasChanges = false;
}
function getBlankOrganization() {
    return { Name: '', OrganizationType: '', ID: '', Description: '', TypeName: '', VersionToken: '', ItemType: 3 };
}
function getBlankOrganizationDetail() {
    return { Name: '', OrganizationType: '', ID: '', Description: '', TypeName: '', VersionToken: '', ItemType: 3, AssignedRoles: [], InheritAccessRightFromID: "", Type: null };
}
var OrganizationStore = assign({}, EventEmitter.prototype, {
    getCurrentList: function () {
        return _currentList;
    },
    getCurrentOrganization: function () {
        return _currentOrganization;
    },
    getEditOrganization: function () {
        return _editOrganization;
    },
    getCurrentParent: function () {
        return _parent;
    },
    getHasChanges: function () {
        return _hasChanges;
    },
    getIsEditing: function () {
        return _isEditingOrganization;
    },
    getAllRoles: function () {
        return _allRoles;
    },
    emitChange: function () {
        this.emit(CHANGE_EVENT);
    },
    addChangeListener: function (callback) {
        this.on(CHANGE_EVENT, callback);
    },
    removeChangeListener: function (callback) {
        this.removeListener(CHANGE_EVENT, callback);
    }
});
Inovx.Shared.Flux.AppDispatcher.register(function (payload) {
    switch (payload.actionType) {
        case OrganizationConstants.ORGANIZATION_BEGIN_EDIT:
            setEditingOrganization(payload.organization);
            break;
        case OrganizationConstants.ORGANIZATION_END_EDIT:
            finishEditing();
            break;
        case OrganizationConstants.ORGANIZATION_RECIEVE_ROOTS:
        case OrganizationConstants.ORGANIZATION_RECIEVE_CHILDREN:
            _parent = payload.parent;
            _currentList = payload.data;
            break;
        case OrganizationConstants.ORGANIZATION_UPDATE_ORGANIZATION:
            _updateEditOrganization(payload.key, payload.value);
            break;
        case OrganizationConstants.ORGANIZATION_RECEIVE_ALL_ROLES:
            _allRoles = payload.roles;
            break;
        default: return true;
    }
    OrganizationStore.emitChange();
    return true;
});
module.exports = OrganizationStore;

},{"./../constants/OrganizationConstants":5,"events":8,"object-assign":9,"shared.web.client":"shared.web.client"}],8:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var objectCreate = Object.create || objectCreatePolyfill
var objectKeys = Object.keys || objectKeysPolyfill
var bind = Function.prototype.bind || functionBindPolyfill

function EventEmitter() {
  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
    this._events = objectCreate(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

var hasDefineProperty;
try {
  var o = {};
  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
  hasDefineProperty = o.x === 0;
} catch (err) { hasDefineProperty = false }
if (hasDefineProperty) {
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      // check whether the input is a positive number (whose value is zero or
      // greater and not a NaN).
      if (typeof arg !== 'number' || arg < 0 || arg !== arg)
        throw new TypeError('"defaultMaxListeners" must be a positive number');
      defaultMaxListeners = arg;
    }
  });
} else {
  EventEmitter.defaultMaxListeners = defaultMaxListeners;
}

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    if (arguments.length > 1)
      er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Unhandled "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
      // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
      // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = objectCreate(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
          listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
            existing.length + ' "' + String(type) + '" listeners ' +
            'added. Use emitter.setMaxListeners() to ' +
            'increase limit.');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        if (typeof console === 'object' && console.warn) {
          console.warn('%s: %s', w.name, w.message);
        }
      }
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    switch (arguments.length) {
      case 0:
        return this.listener.call(this.target);
      case 1:
        return this.listener.call(this.target, arguments[0]);
      case 2:
        return this.listener.call(this.target, arguments[0], arguments[1]);
      case 3:
        return this.listener.call(this.target, arguments[0], arguments[1],
            arguments[2]);
      default:
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i)
          args[i] = arguments[i];
        this.listener.apply(this.target, args);
    }
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = bind.call(onceWrapper, state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = objectCreate(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else
          spliceOne(list, position);

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (!events)
    return [];

  var evlistener = events[type];
  if (!evlistener)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function objectCreatePolyfill(proto) {
  var F = function() {};
  F.prototype = proto;
  return new F;
}
function objectKeysPolyfill(obj) {
  var keys = [];
  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
    keys.push(k);
  }
  return k;
}
function functionBindPolyfill(context) {
  var fn = this;
  return function () {
    return fn.apply(context, arguments);
  };
}

},{}],9:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
