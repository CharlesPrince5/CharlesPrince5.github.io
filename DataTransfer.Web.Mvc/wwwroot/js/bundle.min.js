(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
// Â© 2001-2015 INOVx Solutions, Inc.
// 114 Pacifica Suite 300, Irvine, CA 92618 USA
// All rights reserved.
//
// This software is confidential, proprietary and unpublished property of
// INOVx Solutions, Inc.  It may NOT be copied in part or in whole on any
// medium, either electronic or printed, without the express written consent
// of INOVx Solutions, Inc.
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ReactDOM = require("react-dom");
var DataTransferApp = require("./components/DataTransferApp");
try {
    InovxLoader.updateHelp('data-transfer');
}
catch (e) {
}
ReactDOM.render(React.createElement(DataTransferApp, null), document.getElementById('datatransfer'));

},{"./components/DataTransferApp":5,"react":"react","react-dom":"react-dom"}],2:[function(require,module,exports){
"use strict";
// This file is only a template for actions.  Copy and paste this to your application's actions .ts file and start off from there
// Rename all things with App_Name.
// Naming convention for actions is "[App Name]Actions.ts" i.e. UsersActions.ts, EntitlementActions.ts
var Inovx = require("shared.web.client");
var DataTransferConstants = require("./../constants/DataTransferConstants");
var DataTransferServices = require("./../services/DataTransferServices");
var DataTransferStore = require("./../stores/DataTransferStore");
var SystemActions = Inovx.Shared.System.Actions;
var SystemStore = Inovx.Shared.System.Store;
function _receiveAllJobs(data) {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: DataTransferConstants.DATATRANSFER_GET_ALL_JOBS,
        data: data
    });
}
function _receiveCoreConnections(data) {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: DataTransferConstants.DATATRANSFER_GET_ALL_CORE_CONNECTIONS,
        data: data
    });
}
function _receiveConnectionProjects(data) {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: DataTransferConstants.DATATRANSFER_GET_ALL_CONNECTION_PROJECTS,
        data: data
    });
}
function _testCoreConnection() {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: DataTransferConstants.DATATRANSFER_TEST_CONNECTION
    });
}
function _finishEditConnectionForm() {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: DataTransferConstants.DATATRANSFER_FINISH_ADD_CONNECTION
    });
}
function _finishDeleteType() {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: DataTransferConstants.DATATRANSFER_END_DELETE_TYPE
    });
}
function _finishEdit() {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: DataTransferConstants.DATATRANSFER_FINISH_EDIT
    });
}
var DataTransferActions = {
    getAllJobs: function (callback, errorCallback, ignoreDefaultError) {
        DataTransferServices.getAllJobs(function (data) {
            if (callback && callback != null) {
                callback(data);
            }
            _receiveAllJobs(data);
        }, function (error) {
            if (errorCallback) {
                errorCallback(error);
            }
        }, ignoreDefaultError);
    },
    refreshData: function () {
        DataTransferActions.getAllJobs();
    },
    refreshConnections: function (callback) {
        DataTransferActions.getAllCoreConnections(function (data) {
            if (callback && callback != null) {
                callback(data);
            }
        });
    },
    beginCreateNewJob: function () {
        Inovx.Shared.Flux.AppDispatcher.dispatch({
            actionType: DataTransferConstants.DATATRANSFER_BEGIN_CREATE
        });
    },
    createJob: function (callback) {
        if (!SystemStore.isActionInProgress(DataTransferConstants.DATATRANSFER_CREATE)) {
            SystemActions.beginAction(DataTransferConstants.DATATRANSFER_CREATE);
            if (DataTransferStore.getTransferJobCreation().JobSchedule.DaysToRun.length > 0) {
                DataTransferServices.createJob(DataTransferStore.getTransferJobCreation(), function () {
                    DataTransferActions.refreshData();
                    if (callback && callback != null) {
                        callback();
                    }
                    _finishEdit();
                    SystemActions.endAction(DataTransferConstants.DATATRANSFER_CREATE);
                }, function (error) {
                    SystemActions.endAction(DataTransferConstants.DATATRANSFER_CREATE);
                });
            }
            else {
                var messageObject = {
                    message: InovxLoader.t("DataTransfer:message.jobScheduleDaysError")
                };
                SystemActions.displayErrorMessage(messageObject);
                SystemActions.endAction(DataTransferConstants.DATATRANSFER_CREATE);
            }
        }
    },
    deleteJob: function (jobName, callback) {
        if (!SystemStore.isActionInProgress(DataTransferConstants.DATATRANSFER_DELETE_JOB)) {
            SystemActions.beginAction(DataTransferConstants.DATATRANSFER_DELETE_JOB);
            DataTransferServices.deleteJob(jobName, function () {
                DataTransferActions.refreshData();
                if (callback && callback != null) {
                    callback();
                }
                SystemActions.endAction(DataTransferConstants.DATATRANSFER_DELETE_JOB);
            }, function (error) {
                SystemActions.endAction(DataTransferConstants.DATATRANSFER_DELETE_JOB);
            });
        }
    },
    deleteAllJobContent: function (jobName, callback) {
        if (!SystemStore.isActionInProgress(DataTransferConstants.DATATRANSFER_DELETE_JOB)) {
            SystemActions.beginAction(DataTransferConstants.DATATRANSFER_DELETE_JOB);
            DataTransferServices.deleteAllJob(jobName, function () {
                DataTransferActions.refreshData();
                if (callback && callback != null) {
                    callback();
                }
                SystemActions.endAction(DataTransferConstants.DATATRANSFER_DELETE_JOB);
            }, function (error) {
                SystemActions.endAction(DataTransferConstants.DATATRANSFER_DELETE_JOB);
            });
        }
    },
    beginDeleteJobOnly: function (jobName) {
        var messageObject = {
            message: InovxLoader.t("DataTransfer:message.confirmDelete"),
            confirmCallback: function () {
                DataTransferActions.deleteJob(jobName);
            }
        };
        SystemActions.displayConfirmationMessage(messageObject);
    },
    beginDeleteAllJobContent: function (jobName, callback) {
        DataTransferServices.getJobDetails(jobName, function (jobDetail) {
            if (callback && callback != null) {
                callback(jobDetail);
            }
            Inovx.Shared.Flux.AppDispatcher.dispatch({
                actionType: DataTransferConstants.DATATRANSFER_BEGIN_DELETE_ALL,
                data: jobDetail
            });
        });
    },
    beginDeleteJob: function (jobName) {
        DataTransferServices.getJobDetails(jobName, function (jobDetail) {
            // Only show the dialog with the possibility to 'delete the project with data'
            // when the project has already been created/transferred. If not, only show
            // the job deletion prompt.
            if (jobDetail.IsProjectCreated) {
                Inovx.Shared.Flux.AppDispatcher.dispatch({
                    actionType: DataTransferConstants.DATATRANSFER_BEGIN_DELETE_TYPE,
                    data: jobDetail
                });
            }
            else {
                DataTransferActions.beginDeleteJobOnly(jobName);
            }
        });
    },
    beginEditJob: function (jobName, callback) {
        DataTransferServices.getJobDetails(jobName, function (jobDetail) {
            if (callback && callback != null) {
                callback(jobDetail);
            }
            Inovx.Shared.Flux.AppDispatcher.dispatch({
                actionType: DataTransferConstants.DATATRANSFER_BEGIN_EDIT,
                data: jobDetail
            });
        });
    },
    editJob: function (callback, errorCallback) {
        if (!SystemStore.isActionInProgress(DataTransferConstants.DATATRANSFER_EDIT)) {
            SystemActions.beginAction(DataTransferConstants.DATATRANSFER_EDIT);
            var job = DataTransferStore.getEditTransferJob();
            var changedConnection = DataTransferStore.getSelectedConnection();
            if (changedConnection && changedConnection.Id) {
                var jobEditInfo = {
                    ProjectName: job.ProjectName,
                    CoreProjectName: job.VSuiteCoreProjectName,
                    CoreConnectionId: changedConnection.Id,
                    JobSchedule: job.JobSchedule
                };
                DataTransferServices.editJob(job.Name, jobEditInfo, function (data) {
                    DataTransferActions.refreshData();
                    if (callback && callback != null) {
                        callback(data);
                    }
                    _finishEdit();
                    SystemActions.endAction(DataTransferConstants.DATATRANSFER_EDIT);
                }, function (error) {
                    SystemActions.endAction(DataTransferConstants.DATATRANSFER_EDIT);
                });
            }
            else {
                DataTransferServices.editJobSchedule(job.Name, job.JobSchedule, function (data) {
                    DataTransferActions.refreshData();
                    if (callback && callback != null) {
                        callback(data);
                    }
                    _finishEdit();
                    SystemActions.endAction(DataTransferConstants.DATATRANSFER_EDIT);
                }, function (error) {
                    SystemActions.endAction(DataTransferConstants.DATATRANSFER_EDIT);
                });
            }
        }
    },
    changeSelectedConnection: function (connection, callback) {
        if (callback && callback !== null) {
            callback();
        }
        DataTransferActions.updateJobFields("CoreConnectionId", connection.Id);
        Inovx.Shared.Flux.AppDispatcher.dispatch({
            actionType: DataTransferConstants.DATATRANSFER_CHANGE_SELECTED_CONNECTION,
            data: connection
        });
    },
    updateJobFields: function (key, value, callback) {
        if (callback && callback != null) {
            callback();
        }
        Inovx.Shared.Flux.AppDispatcher.dispatch({
            actionType: DataTransferConstants.DATATRANSFER_UPDATE_JOB_CREATION,
            key: key,
            value: value
        });
    },
    finishEdit: function () {
        if (DataTransferStore.getHasJobChanges()) {
            var callbackFunct = DataTransferActions.createJob;
            if (!DataTransferStore.getIsCreating()) {
                callbackFunct = DataTransferActions.editJob;
            }
            SystemActions.displaySaveChangesDialog({
                message: InovxLoader.t("common:msgBox.saveChanges"),
                confirmCallback: callbackFunct,
                cancelCallback: _finishEdit
            });
        }
        else {
            _finishEdit();
        }
    },
    getAllCoreConnections: function (callback) {
        if (!SystemStore.isActionInProgress(DataTransferConstants.DATATRANSFER_GET_ALL_CORE_CONNECTIONS)) {
            SystemActions.beginAction(DataTransferConstants.DATATRANSFER_GET_ALL_CORE_CONNECTIONS);
            DataTransferServices.getAllConnections(function (data) {
                if (callback && callback != null) {
                    callback(data);
                }
                _receiveCoreConnections(data);
                SystemActions.endAction(DataTransferConstants.DATATRANSFER_GET_ALL_CORE_CONNECTIONS);
            }, function (error) {
                SystemActions.endAction(DataTransferConstants.DATATRANSFER_GET_ALL_CORE_CONNECTIONS);
            });
        }
    },
    getConnectionProjects: function (id, callback) {
        if (!SystemStore.isActionInProgress(DataTransferConstants.DATATRANSFER_GET_ALL_CONNECTION_PROJECTS)) {
            SystemActions.beginAction(DataTransferConstants.DATATRANSFER_GET_ALL_CONNECTION_PROJECTS);
            DataTransferServices.getAllConnectionProjects(id, function (data) {
                if (callback && callback != null) {
                    callback(data);
                }
                _receiveConnectionProjects(data);
                SystemActions.endAction(DataTransferConstants.DATATRANSFER_GET_ALL_CONNECTION_PROJECTS);
            }, function (error) {
                SystemActions.endAction(DataTransferConstants.DATATRANSFER_GET_ALL_CONNECTION_PROJECTS);
            });
        }
    },
    beginAddNewConnection: function () {
        Inovx.Shared.Flux.AppDispatcher.dispatch({
            actionType: DataTransferConstants.DATATRANSFER_BEGIN_ADD_CONNECTION,
        });
    },
    updateConnection: function (key, value) {
        Inovx.Shared.Flux.AppDispatcher.dispatch({
            actionType: DataTransferConstants.DATATRANSFER_UPDATE_CONNECTION,
            key: key,
            value: value
        });
    },
    editConnection: function () {
        DataTransferActions.getAllCoreConnections(function (e) {
            Inovx.Shared.Flux.AppDispatcher.dispatch({
                actionType: DataTransferConstants.DATATRANSFER_EDIT_CONNECTION,
            });
        });
    },
    closeEditConnection: function () {
        Inovx.Shared.Flux.AppDispatcher.dispatch({
            actionType: DataTransferConstants.DATATRANSFER_CLOSE_EDIT_CONNECTION,
        });
    },
    createConnection: function (configuration, callback) {
        if (!SystemStore.isActionInProgress(DataTransferConstants.DATATRANSFER_SAVE_CONNECTION)) {
            SystemActions.beginAction(DataTransferConstants.DATATRANSFER_SAVE_CONNECTION);
            if (DataTransferStore.getConnectionValidity()) {
                DataTransferServices.createCoreConnection(configuration, function (retData) {
                    DataTransferActions.refreshConnections();
                    if (callback && callback != null) {
                        callback(retData);
                    }
                    _finishEditConnectionForm();
                    SystemActions.endAction(DataTransferConstants.DATATRANSFER_SAVE_CONNECTION);
                }, function (error) {
                    SystemActions.endAction(DataTransferConstants.DATATRANSFER_SAVE_CONNECTION);
                });
            }
            else {
                var messageObject = {
                    message: InovxLoader.t("DataTransfer:message.createConnectionError")
                };
                SystemActions.displayErrorMessage(messageObject);
                SystemActions.endAction(DataTransferConstants.DATATRANSFER_SAVE_CONNECTION);
            }
        }
    },
    testConnection: function (config, ignoreDefaultError) {
        if (!SystemStore.isActionInProgress(DataTransferConstants.DATATRANSFER_TEST_CONNECTION)) {
            SystemActions.beginAction(DataTransferConstants.DATATRANSFER_TEST_CONNECTION);
            var messageObject_1 = {};
            DataTransferServices.testCoreConnection(config, function (data) {
                _testCoreConnection();
                messageObject_1.message = InovxLoader.t("DataTransfer:message.connectionVerified");
                SystemActions.displayInfoMessage(messageObject_1);
                SystemActions.endAction(DataTransferConstants.DATATRANSFER_TEST_CONNECTION);
            }, function (error) {
                messageObject_1.message = InovxLoader.t("DataTransfer:message.connectionFailed");
                messageObject_1.helpLink = Inovx.Shared.Common.UrlUtilities.getHelpUrl() + "/VSuiteCOREConnection.html";
                SystemActions.displayErrorMessage(messageObject_1);
                SystemActions.endAction(DataTransferConstants.DATATRANSFER_TEST_CONNECTION);
            }, ignoreDefaultError);
        }
    },
    closeDeleteAllContentModal: function () {
        Inovx.Shared.Flux.AppDispatcher.dispatch({
            actionType: DataTransferConstants.DATATRANSFER_FINISH_DELETE_ALL
        });
    },
    finishDeleteTypePopup: function () {
        _finishDeleteType();
    },
    finishEditConnectionForm: function () {
        if (DataTransferStore.getConnectionFormHasChanges()) {
            SystemActions.displaySaveChangesDialog({
                message: InovxLoader.t("common:msgBox.saveChanges"),
                confirmCallback: DataTransferActions.createConnection,
                cancelCallback: _finishEditConnectionForm
            });
        }
        else {
            _finishEditConnectionForm();
        }
    },
    runJob: function (job, callback) {
        if (!SystemStore.isActionInProgress(DataTransferConstants.DATATRANSFER_RUN_JOB)) {
            SystemActions.beginAction(DataTransferConstants.DATATRANSFER_RUN_JOB);
            DataTransferServices.runJob(job, function (data) {
                if (callback && callback != null) {
                    callback(data);
                }
                var messageObject = {
                    message: InovxLoader.t("DataTransfer:message.jobSuccess")
                };
                SystemActions.endAction(DataTransferConstants.DATATRANSFER_RUN_JOB);
                SystemActions.displayInfoMessage(messageObject);
            }, function (error) {
                SystemActions.endAction(DataTransferConstants.DATATRANSFER_RUN_JOB);
            });
        }
    }
};
module.exports = DataTransferActions;

},{"./../constants/DataTransferConstants":12,"./../services/DataTransferServices":15,"./../stores/DataTransferStore":16,"shared.web.client":"shared.web.client"}],3:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// A '.tsx' file enables JSX support in the TypeScript compiler, 
// for more information see the following page on the TypeScript wiki:
// https://github.com/Microsoft/TypeScript/wiki/JSX
var React = require("react");
var Inovx = require("shared.web.client");
var DataTransferActions = require("./../actions/DataTransferActions");
var DataTransferConstants = require("./../constants/DataTransferConstants");
var DataTransferStore = require("./../stores/DataTransferStore");
var InovxControls = Inovx.Shared.Controls;
var CoreConnectionEditModal = /** @class */ (function (_super) {
    __extends(CoreConnectionEditModal, _super);
    function CoreConnectionEditModal(props) {
        var _this = _super.call(this, props) || this;
        _this.changeConnection = function (connection) {
            _this._handleConnectionChange(connection);
        };
        _this._handleConnectionChange = function (connection) {
            _this.setState({
                selectedConnection: connection
            });
        };
        _this._onChange = function () {
            _this.setState(function (prevState) {
                // If no valid initialConnection was provided to us via the props,
                // we wait for the available connections list to be populated and
                // then take the first one as the one to selected by default.
                var connections = DataTransferStore.getAllCoreConnections();
                var selectedConnection = prevState.selectedConnection;
                if (!selectedConnection.Name) {
                    selectedConnection = connections[0];
                }
                return {
                    coreConnections: connections,
                    selectedConnection: selectedConnection
                };
            });
        };
        _this.state = {
            coreConnections: DataTransferStore.getAllCoreConnections(),
            selectedConnection: props.initialConnection
        };
        return _this;
    }
    CoreConnectionEditModal.prototype.componentDidMount = function () {
        DataTransferStore.addChangeListener(this._onChange);
    };
    CoreConnectionEditModal.prototype.componentWillUnmount = function () {
        DataTransferStore.removeChangeListener(this._onChange);
    };
    CoreConnectionEditModal.prototype.render = function () {
        var _this = this;
        return (React.createElement("div", { className: "panel panel-primary edit-connection" },
            React.createElement("div", { className: "panel-heading" }, "Edit Connection"),
            React.createElement("div", { className: "panel-body" },
                React.createElement(Inovx.Shared.Controls.ActionInProgressLoader, { actionKey: [DataTransferConstants.DATATRANSFER_TEST_CONNECTION], class: 'temp-modal-loader' },
                    React.createElement("div", { className: "action-in-progress-loader-sm" })),
                React.createElement("section", { className: "data-transfer-form-section border-bottom" },
                    React.createElement("h3", { className: "section-title" }, InovxLoader.t("DataTransfer:form.coreConnection")),
                    React.createElement("div", { className: "section-content" },
                        React.createElement(InovxControls.FormField, { title: "".concat(InovxLoader.t("DataTransfer:form.coreConnection")), inputName: "CoreConnections", className: "data-transfer-field" },
                            React.createElement(InovxControls.DropDownList, { datasource: this.state.coreConnections, onChange: this._handleConnectionChange, displayProp: "Name", autoWidth: true, width: "260px", initialValue: this.state.selectedConnection.Name, valueProp: "Name" }),
                            React.createElement("a", { className: "btn btn-primary add-btn", onClick: function () { DataTransferActions.beginAddNewConnection(); } }, InovxLoader.t("DataTransfer:form.add"))))),
                React.createElement("div", { className: "btn-bar-b-sm" },
                    React.createElement("button", { type: "button", className: "btn btn-primary", onClick: function () { _this.props.onSave(_this.state.selectedConnection); } }, InovxLoader.t("DataTransfer:form.ok")),
                    React.createElement("button", { type: "button", className: "btn btn-default", onClick: function () { _this.props.onCancel(); } }, InovxLoader.t("DataTransfer:form.cancel"))))));
    };
    return CoreConnectionEditModal;
}(React.Component));
module.exports = CoreConnectionEditModal;

},{"./../actions/DataTransferActions":2,"./../constants/DataTransferConstants":12,"./../stores/DataTransferStore":16,"react":"react","shared.web.client":"shared.web.client"}],4:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
// A '.tsx' file enables JSX support in the TypeScript compiler, 
// for more information see the following page on the TypeScript wiki:
// https://github.com/Microsoft/TypeScript/wiki/JSX
var React = require("react");
var Inovx = require("shared.web.client");
var DataTransferActions = require("./../actions/DataTransferActions");
var DataTransferConstants = require("./../constants/DataTransferConstants");
var DataTransferStore = require("./../stores/DataTransferStore");
var SystemStore = Inovx.Shared.System.Store;
var InovxControls = Inovx.Shared.Controls;
var CoreConnectionSettingsModal = /** @class */ (function (_super) {
    __extends(CoreConnectionSettingsModal, _super);
    function CoreConnectionSettingsModal(props) {
        var _this = _super.call(this, props) || this;
        _this._onFieldChange = function (e) {
            DataTransferActions.updateConnection(e.target.name, e.target.value);
        };
        _this._onVersionChange = function (e) {
            DataTransferActions.updateConnection("Version", e);
        };
        _this._handleTestConnection = function () {
            DataTransferActions.testConnection(_this.state.coreConnectionSetting, true);
        };
        _this._handleSaveConnectionSettings = function () {
            _this.props.onSave(_this.state.coreConnectionSetting);
        };
        _this._handleCancel = function () {
            _this.props.onCancel();
        };
        _this._checkForUnsavedChanges = function () {
            if (DataTransferStore.getConnectionFormHasChanges()) {
                event.returnValue = InovxLoader.t('common:msgBox.browserSaveChanges');
            }
        };
        _this.state = {
            coreConnectionSetting: DataTransferStore.getCoreConnectionSetting()
        };
        return _this;
    }
    CoreConnectionSettingsModal.prototype.componentDidMount = function () {
        window.addEventListener('beforeunload', this._checkForUnsavedChanges);
    };
    CoreConnectionSettingsModal.prototype.componentWillUnmount = function () {
        window.removeEventListener('beforeunload', this._checkForUnsavedChanges);
    };
    CoreConnectionSettingsModal.prototype.render = function () {
        var inputObj = {
            className: 'form-control',
            type: 'text',
            readOnly: this.props.readOnly
        };
        var coreConnectionSetting = this.state.coreConnectionSetting;
        var aliasInput = jQuery.extend({
            name: "ConfigurationName",
            value: coreConnectionSetting.ConfigurationName
        }, inputObj);
        var sqlServerInput = jQuery.extend({
            name: "SqlServerName",
            value: coreConnectionSetting.SqlServerName
        }, inputObj);
        var sqlInstanceInput = jQuery.extend({
            name: "SqlServerInstance",
            value: coreConnectionSetting.SqlServerInstance
        }, inputObj);
        var tcpPortInput = jQuery.extend({
            name: "SqlServerTcpPort",
            value: coreConnectionSetting.SqlServerTcpPort
        }, inputObj);
        var coreServerName = jQuery.extend({
            name: "CoreServerName",
            value: coreConnectionSetting.CoreServerName
        }, inputObj);
        var coreAdminPassword = {
            className: 'form-control',
            id: 'dataTransfer-core-admin-password',
            name: "CoreAdminPassword",
            type: 'password',
            value: coreConnectionSetting.CoreAdminPassword,
            readOnly: inputObj.readOnly
        };
        //let coreAdminPassword = jQuery.extend({
        //    name: "CoreAdminPassword",
        //    type: 'password',
        //    value: coreConnectionSetting.CoreAdminPassword
        //}, inputObj);
        var versionInput = jQuery.extend({
            name: "Version",
            value: coreConnectionSetting.Version
        }, inputObj);
        return (React.createElement("div", { className: "panel panel-primary connection-settings" },
            React.createElement("div", { className: "panel-heading" }, this.props.readOnly ? InovxLoader.t("DataTransfer:form.coreConnection") : InovxLoader.t("DataTransfer:form.newConnection")),
            React.createElement("div", { className: "panel-body" },
                React.createElement(Inovx.Shared.Controls.ActionInProgressLoader, { actionKey: [DataTransferConstants.DATATRANSFER_TEST_CONNECTION], class: 'temp-modal-loader' },
                    React.createElement("div", { className: "action-in-progress-loader-sm" })),
                React.createElement("section", { className: "data-transfer-form-section border-bottom" },
                    React.createElement("h3", { className: "section-title" }, InovxLoader.t("DataTransfer:form.coreConnection")),
                    React.createElement("div", { className: "section-content" },
                        React.createElement(InovxControls.If, { condition: !this.props.readOnly },
                            React.createElement(InovxControls.FormField, { title: "".concat(InovxLoader.t("DataTransfer:form.alias"), "*"), className: "connection-form-field", inputName: "ConfigurationName" },
                                React.createElement("input", __assign({}, aliasInput, { onChange: this._onFieldChange })))),
                        React.createElement(InovxControls.FormField, { title: "".concat(InovxLoader.t("DataTransfer:form.coreSqlServer"), "*"), className: "connection-form-field", inputName: "SqlServerName" },
                            React.createElement("input", __assign({}, sqlServerInput, { onChange: this._onFieldChange }))),
                        React.createElement(InovxControls.FormField, { title: "".concat(InovxLoader.t("DataTransfer:form.coreSqlInstance")), className: "connection-form-field", inputName: "SqlServerInstance" },
                            React.createElement("input", __assign({}, sqlInstanceInput, { onChange: this._onFieldChange }))),
                        React.createElement(InovxControls.FormField, { title: "".concat(InovxLoader.t("DataTransfer:form.tcpPort")), className: "connection-form-field", inputName: "SqlServerTcpPort" },
                            React.createElement("input", __assign({}, tcpPortInput, { onChange: this._onFieldChange }))),
                        React.createElement(InovxControls.FormField, { title: "".concat(InovxLoader.t("DataTransfer:form.coreServerName"), "*"), className: "connection-form-field", inputName: "CoreServerName" },
                            React.createElement("input", __assign({}, coreServerName, { onChange: this._onFieldChange }))),
                        React.createElement(InovxControls.FormField, { title: "".concat(InovxLoader.t("DataTransfer:form.coreAdminPassword"), "*"), className: "connection-form-field", inputName: "CoreAdminPassword" },
                            React.createElement("input", __assign({}, coreAdminPassword, { onChange: this._onFieldChange }))),
                        React.createElement(InovxControls.FormField, { title: "".concat(InovxLoader.t("DataTransfer:form.coreVersion"), "*"), className: "connection-form-field", inputName: "Version" },
                            React.createElement(InovxControls.DropDownList, { datasource: ["6.2", "7.0", "7.1", "8.0", "9.0", "9.1"], initialValue: coreConnectionSetting.Version, onChange: this._onVersionChange, enabled: !this.props.readOnly, width: "207px" })),
                        React.createElement(InovxControls.If, { condition: !this.props.readOnly },
                            React.createElement("div", { className: "connection-form-field" },
                                React.createElement("button", { type: "button", className: "btn btn-primary ".concat(this.props.readOnly ? "disabled" : ""), onClick: this.props.readOnly ? null : this._handleTestConnection }, InovxLoader.t("DataTransfer:form.testConnection")))))),
                React.createElement("div", { className: "btn-bar-b-sm" },
                    React.createElement(InovxControls.If, { condition: !this.props.readOnly },
                        React.createElement("button", { type: "button", className: "btn btn-primary ".concat(this.props.readOnly ? "disabled" : ""), onClick: this.props.readOnly ? null : this._handleSaveConnectionSettings }, InovxLoader.t("DataTransfer:form.save"))),
                    React.createElement("button", { type: "button", className: "btn btn-default", onClick: this._handleCancel }, this.props.readOnly ? InovxLoader.t("DataTransfer:form.ok") : InovxLoader.t("DataTransfer:form.cancel"))))));
    };
    return CoreConnectionSettingsModal;
}(React.Component));
module.exports = CoreConnectionSettingsModal;

},{"./../actions/DataTransferActions":2,"./../constants/DataTransferConstants":12,"./../stores/DataTransferStore":16,"react":"react","shared.web.client":"shared.web.client"}],5:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var React = require("react");
var Inovx = require("shared.web.client");
var SystemActions = Inovx.Shared.System.Actions;
var SystemStore = Inovx.Shared.System.Store;
var UrlUtilities = Inovx.Shared.Common.UrlUtilities;
var PermissionService = Inovx.Shared.Permission.PermissionService;
var DataTransferPermissions = require("./../constants/DataTransferPermissions");
var DataTransferActions = require("./../actions/DataTransferActions");
var DataTransferStore = require("./../stores/DataTransferStore");
var DataTransferForm = require("./DataTransferForm");
var DeletionTypeModal = require("./DeletionTypeModal");
var DeleteAllContentModal = require("./DeleteAllContentModal");
var DataSourceTypeEnum = require("./../constants/DataSourceTypeEnum");
var SynchronizationStatusTypeEnum = require("./../constants/SynchronizationStatusTypeEnum");
var DataTransferApp = /** @class */ (function (_super) {
    __extends(DataTransferApp, _super);
    function DataTransferApp(props, context) {
        var _this = _super.call(this, 'DataTransfer', props, context) || this;
        _this._initialize = function () {
            DataTransferActions.getAllJobs(function () { return _this._appLoaded = true; }, function (error) { return _this._handlePermissionError(error); }, true);
        };
        _this._showCreateNewJob = function () {
            DataTransferActions.beginCreateNewJob();
        };
        _this._hideCreateNewJob = function () {
            DataTransferActions.finishEdit();
        };
        _this._beginEditJob = function (e, job) {
            DataTransferActions.beginEditJob(job.Name);
        };
        _this._deleteJob = function (e, job) {
            DataTransferActions.beginDeleteJob(job.Name);
        };
        _this._runJob = function (e, job) {
            DataTransferActions.runJob(job.Name);
        };
        _this._rowCommandsHandle = function (args) {
            if (args.rowData.SynchronizationStatus == SynchronizationStatusTypeEnum.Invalid || args.rowData.SynchronizationStatus == SynchronizationStatusTypeEnum.Disconnected) {
                var editButton = args.row.find(".grid-button-edit");
                if (editButton) {
                    editButton.addClass("e-disabled grid-button-disabled");
                    editButton.removeClass("grid-button-edit");
                }
                var runButton = args.row.find(".grid-button-run");
                if (runButton) {
                    runButton.addClass("e-disabled grid-button-disabled");
                    runButton.removeClass("grid-button-run");
                }
            }
        };
        _this._onChange = function () {
            _this.setState({
                modalVisible: DataTransferStore.getModalVisible(),
                isDeleteTypeModalVisible: DataTransferStore.getDeletionTypeModalVisible(),
                isDeleteAllModalVisible: DataTransferStore.getDeleteAllModalVisible(),
                allTransferJobs: DataTransferStore.getAllJobs()
            });
        };
        var datasourceType = window.DataSourceType;
        var addJob = true;
        if (datasourceType != DataSourceTypeEnum.SqlServer)
            addJob = false;
        _this.state = {
            modalVisible: false,
            canAddJob: addJob,
            isDeleteTypeModalVisible: false,
            isDeleteAllModalVisible: false,
            allTransferJobs: DataTransferStore.getAllJobs()
        };
        return _this;
    }
    DataTransferApp.prototype.componentWillMount = function () {
        this.componentWillMountBase();
    };
    DataTransferApp.prototype.componentDidMount = function () {
        DataTransferStore.addChangeListener(this._onChange);
    };
    DataTransferApp.prototype.componentWillUnmount = function () {
        DataTransferStore.removeChangeListener(this._onChange);
    };
    DataTransferApp.prototype.render = function () {
        var hasManageJobsPermission = PermissionService.checkPermission(DataTransferPermissions.DATATRANSFER_MANAGE);
        var iconHeaderProps = {
            iconUrl: "".concat(UrlUtilities.getBaseApplicationUrl(), "/images/DataTransfer.png"),
            iconAtt: { alt: InovxLoader.t("DataTransfer:common.title") },
            title: InovxLoader.t("DataTransfer:common.title"),
            rcClass: "cd-btn add-btn",
            onClick: this._showCreateNewJob,
        };
        if (hasManageJobsPermission && this.state.canAddJob) {
            iconHeaderProps.btnUrl = "".concat(UrlUtilities.getBaseApplicationUrl(), "/images/addDataTransfer.png");
            iconHeaderProps.btnAtt = {
                alt: InovxLoader.t("DataTransfer:form.newJob"),
                title: InovxLoader.t("DataTransfer:form.newJob")
            };
        }
        var commands = {
            command: [{
                    iconClassName: "glyphicon glyphicon-play",
                    className: "grid-button-run",
                    id: "command-play",
                    click: this._runJob,
                }],
            width: "115px",
            headerText: InovxLoader.t("DataTransfer:grid.commands")
        };
        if (hasManageJobsPermission) {
            var editCommands = [{
                    iconClassName: "glyphicon glyphicon-pencil",
                    className: "grid-button-edit",
                    id: "command-edit",
                    click: this._beginEditJob
                }
            ];
            var deleteCommands = [{
                    iconClassName: "glyphicon glyphicon-trash",
                    className: "grid-button",
                    id: "command-delete",
                    click: this._deleteJob
                }
            ];
            if (this.state.canAddJob) {
                commands.command = __spreadArray(__spreadArray(__spreadArray([], editCommands, true), deleteCommands, true), commands.command, true);
            }
            else {
                commands.command = __spreadArray(__spreadArray([], editCommands, true), commands.command, true);
            }
        }
        var columns = [{
                field: "ProjectName",
                headerText: InovxLoader.t("DataTransfer:grid.projectName"),
                type: "string"
            }, {
                field: "SqlServerName",
                headerText: InovxLoader.t("DataTransfer:grid.sqlServerName"),
                type: "string"
            }, {
                field: "SqlServerInstance",
                headerText: InovxLoader.t("DataTransfer:grid.sqlInstanceName"),
                type: "string"
            }, {
                field: "ScheduleEnabled",
                headerText: InovxLoader.t("DataTransfer:grid.schedule"),
                width: "120px",
                type: "boolean",
                values: [
                    { value: true, text: InovxLoader.t('DataTransfer:grid.enabled') },
                    { value: false, text: InovxLoader.t('DataTransfer:grid.disabled') }
                ]
            }, {
                field: "Synchronization",
                headerText: InovxLoader.t("DataTransfer:grid.synchronization"),
                type: "string"
            }
        ];
        var defaultSort = [{
                field: "Name",
                dir: "ascending"
            }];
        return (React.createElement(Inovx.Shared.Core.ReactLoader, { appReady: this.isAppLoaded(), errorStatus: this._errorStatus },
            React.createElement("div", { className: "data-transfer-app-content" },
                React.createElement(Inovx.Shared.Layout.IconHeader, __assign({}, iconHeaderProps)),
                React.createElement(Inovx.Shared.Controls.ModalPopUp, { isOpen: this.state.isDeleteTypeModalVisible, ref: 'modal' },
                    React.createElement(DeletionTypeModal, { readOnly: false })),
                React.createElement(Inovx.Shared.Controls.ModalPopUp, { isOpen: this.state.isDeleteAllModalVisible, ref: 'modal' },
                    React.createElement(DeleteAllContentModal, { readOnly: false })),
                React.createElement(Inovx.Shared.Controls.Grid, { dataSource: this.state.allTransferJobs, commands: commands, columns: columns, rowCommandsHandler: this._rowCommandsHandle, defaultSort: defaultSort, filter: true, sort: true, pageable: { pageCount: 5, pageSize: 10, pageSizes: [10, 20, 50] } })),
            React.createElement(Inovx.Shared.Controls.ModalSlider, { isOpen: this.state.modalVisible, onClose: this._hideCreateNewJob },
                React.createElement(DataTransferForm, { canModifyConnection: this.state.canAddJob }))));
    };
    return DataTransferApp;
}(Inovx.Shared.ReactExt.BaseAppComponent));
module.exports = DataTransferApp;

},{"./../actions/DataTransferActions":2,"./../constants/DataSourceTypeEnum":11,"./../constants/DataTransferPermissions":13,"./../constants/SynchronizationStatusTypeEnum":14,"./../stores/DataTransferStore":16,"./DataTransferForm":6,"./DeleteAllContentModal":8,"./DeletionTypeModal":9,"react":"react","shared.web.client":"shared.web.client"}],6:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
// A '.tsx' file enables JSX support in the TypeScript compiler, 
// for more information see the following page on the TypeScript wiki:
// https://github.com/Microsoft/TypeScript/wiki/JSX
var React = require("react");
var Inovx = require("shared.web.client");
var DataTransferActions = require("./../actions/DataTransferActions");
var DataTransferConstants = require("./../constants/DataTransferConstants");
var DataTransferStore = require("./../stores/DataTransferStore");
var CoreConnectionSettingsModal = require("./CoreConnectionSettingsModal");
var CoreConnectionEditModal = require("./CoreConnectionEditModal");
var JobScheduler = require("./JobScheduler");
var ListHelper = Inovx.Shared.Common.ListHelper;
var InovxControls = Inovx.Shared.Controls;
var SystemStore = Inovx.Shared.System.Store;
function getDataTransferActionInProgress() {
    return SystemStore.isActionInProgress(DataTransferConstants.DATATRANSFER_GET_ALL_CORE_CONNECTIONS) || SystemStore.isActionInProgress(DataTransferConstants.DATATRANSFER_GET_ALL_CONNECTION_PROJECTS);
}
function getTransferJob() {
    if (DataTransferStore.getIsCreating()) {
        return DataTransferStore.getTransferJobCreation();
    }
    else {
        return DataTransferStore.getEditTransferJob();
    }
}
function getJobFormState() {
    return {
        transferJob: getTransferJob(),
        coreConnections: DataTransferStore.getAllCoreConnections(),
        connectionProjects: DataTransferStore.getConnectionProjects(),
        selectedConnection: DataTransferStore.getSelectedConnection(),
        isCreating: DataTransferStore.getIsCreating(),
        isAddViewConnectionModalOpen: DataTransferStore.getConnectionModalVisible(),
        isEditConnectionModalOpen: DataTransferStore.getEditConnectionModalVisible(),
        isActionInProgress: getDataTransferActionInProgress(),
        actionInProgressMsg: _dataTransferActionInProgress
    };
}
var _dataTransferActionInProgress;
var DataTransferForm = /** @class */ (function (_super) {
    __extends(DataTransferForm, _super);
    function DataTransferForm(props, context) {
        var _this = _super.call(this, props) || this;
        _this._editConnectionChanged = false;
        _this._saveJob = function () {
            if (_this.state.isCreating) {
                DataTransferActions.createJob();
            }
            else {
                DataTransferActions.editJob();
            }
            _this.setState({ actionInProgressMsg: InovxLoader.t("DataTransfer:form.saving") });
        };
        _this._cancel = function () {
            DataTransferActions.finishEdit();
        };
        _this._addOrViewConnection = function () {
            DataTransferActions.beginAddNewConnection();
        };
        _this._handleConnectionChange = function (e) {
            DataTransferActions.changeSelectedConnection(e, function () {
                DataTransferActions.getConnectionProjects(e.Id, function (projects) {
                    var selectedProject;
                    if (_this.state.isCreating) {
                        selectedProject = ListHelper.sort(projects, "Name")[0];
                    }
                    else {
                        _this._editConnectionChanged = true;
                        selectedProject = projects.filter(function (value) { return value.ProjectID.toLowerCase() == _this.state.transferJob.VSuiteCoreProjectID.toLowerCase(); })[0];
                    }
                    _this._handleCoreProjectChange(selectedProject);
                });
            });
        };
        _this._handleCoreProjectChange = function (project) {
            var projectName = (project) ? project.Name : "";
            DataTransferActions.updateJobFields("CoreProjectName", projectName);
            if (_this.state.isCreating) {
                DataTransferActions.updateJobFields("ProjectName", projectName);
            }
        };
        _this._handleFieldChange = function (e) {
            DataTransferActions.updateJobFields(e.target.name, e.target.value);
        };
        _this._storeChange = function () {
            _this.setState(getJobFormState());
        };
        _this._systemChange = function () {
            _this.setState(getJobFormState());
        };
        _this._checkForUnsavedChanges = function () {
            if (DataTransferStore.getHasJobChanges()) {
                event.returnValue = InovxLoader.t('common:msgBox.browserSaveChanges');
            }
        };
        _this._saveNewConnection = function (configuration) {
            DataTransferActions.createConnection(configuration, function (newConnection) {
                if (_this.state.isCreating) {
                    _this._handleConnectionChange(newConnection);
                }
                else if (_this.state.isEditConnectionModalOpen) {
                    _this.refs["edit-modal"].changeConnection(newConnection);
                }
            });
        };
        _this._cancelNewConnection = function () {
            DataTransferActions.finishEditConnectionForm();
        };
        _this._saveEditConnection = function (configuration) {
            if (configuration) {
                _this._handleConnectionChange(configuration);
            }
            DataTransferActions.closeEditConnection();
        };
        _this._cancelEditConnection = function () {
            DataTransferActions.closeEditConnection();
        };
        _this.state = getJobFormState();
        return _this;
    }
    DataTransferForm.prototype.componentDidMount = function () {
        var _this = this;
        if (this.state.isCreating) {
            DataTransferActions.getAllCoreConnections(function (e) {
                if (e.length > 0) {
                    _this._handleConnectionChange(e[0]);
                }
            });
        }
        DataTransferStore.addChangeListener(this._storeChange);
        SystemStore.addChangeListener(this._systemChange);
        window.addEventListener('beforeunload', this._checkForUnsavedChanges);
    };
    DataTransferForm.prototype.componentWillUnmount = function () {
        DataTransferStore.removeChangeListener(this._storeChange);
        SystemStore.removeChangeListener(this._systemChange);
        window.removeEventListener('beforeunload', this._checkForUnsavedChanges);
    };
    DataTransferForm.prototype.render = function () {
        var header;
        var fieldWidth = "260";
        var transferJob = this.state.transferJob;
        var inputObj = {
            className: "form-control",
            type: "text"
        };
        var projectNameInput = jQuery.extend({
            name: "ProjectName",
            value: transferJob.ProjectName,
            readOnly: !this.state.isCreating
        }, inputObj);
        var connectionProjectsDropDown;
        var actionKeys = [DataTransferConstants.DATATRANSFER_GET_ALL_CORE_CONNECTIONS, DataTransferConstants.DATATRANSFER_GET_ALL_CONNECTION_PROJECTS];
        var connectionDropDownVisible;
        var editConnectionEnabled;
        var saveButtonEnabled;
        if (this.state.isCreating) {
            header = InovxLoader.t("DataTransfer:form.newJob");
            connectionProjectsDropDown = ListHelper.sort(this.state.connectionProjects, "Name");
            connectionDropDownVisible = true;
            editConnectionEnabled = false;
            saveButtonEnabled = true;
        }
        else {
            header = InovxLoader.t("DataTransfer:form.editJob");
            connectionProjectsDropDown = [{ Name: transferJob.VSuiteCoreProjectName }];
            connectionDropDownVisible = this._editConnectionChanged;
            editConnectionEnabled = transferJob.IsProjectCreated;
            saveButtonEnabled = (transferJob.VSuiteCoreProjectName) ? true : false;
        }
        return (React.createElement(InovxControls.StaticHeaderForm, { title: header, saveOnClick: this._saveJob, cancelOnClick: this._cancel, saveDisabled: !saveButtonEnabled, isActionInProgress: this.state.isActionInProgress, inProgressMessage: this.state.actionInProgressMsg },
            React.createElement(Inovx.Shared.Controls.ActionInProgressLoader, { actionKey: actionKeys, class: 'temp-modal-loader' },
                React.createElement("div", { className: "action-in-progress-loader-sm" })),
            React.createElement("section", { className: "data-transfer-form-section" },
                React.createElement("h3", { className: "section-title" }, InovxLoader.t("DataTransfer:form.jobinformation")),
                React.createElement("div", { className: "section-content" },
                    React.createElement(InovxControls.If, { condition: !this.state.isCreating },
                        React.createElement(InovxControls.FormField, { title: InovxLoader.t("DataTransfer:form.name"), inputName: 'Name', className: "data-transfer-field" },
                            React.createElement("h5", null, this.state.transferJob.Name))),
                    React.createElement(InovxControls.FormField, { title: "".concat(InovxLoader.t("DataTransfer:form.coreConnection"), "*"), inputName: "CoreConnections", className: "data-transfer-field" },
                        React.createElement(InovxControls.If, { condition: connectionDropDownVisible },
                            React.createElement(InovxControls.DropDownList, { datasource: this.state.coreConnections, onChange: this._handleConnectionChange, enabled: this.state.isCreating, displayProp: "Name", autoWidth: true, width: "".concat(fieldWidth, "px"), initialValue: this.state.selectedConnection.Name, valueProp: "Name" })),
                        React.createElement(InovxControls.If, { condition: this.state.isCreating },
                            React.createElement("a", { className: "btn btn-primary add-btn", onClick: this._addOrViewConnection }, InovxLoader.t("DataTransfer:form.add"))),
                        React.createElement(InovxControls.If, { condition: !connectionDropDownVisible },
                            React.createElement("a", { className: "btn btn-primary add-btn", onClick: this._addOrViewConnection }, InovxLoader.t("DataTransfer:form.viewConnection"))),
                        React.createElement(InovxControls.If, { condition: !this.state.isCreating && this.props.canModifyConnection },
                            React.createElement("a", { className: "btn btn-primary add-btn ".concat(editConnectionEnabled ? "" : "disabled"), onClick: function () { DataTransferActions.editConnection(); } }, InovxLoader.t("DataTransfer:form.editConnection")))),
                    React.createElement(InovxControls.FormField, { title: "".concat(InovxLoader.t("DataTransfer:form.coreProjectName"), "*"), inputName: "VSuiteCoreProjectName", className: "data-transfer-field" },
                        React.createElement(InovxControls.DropDownList, { datasource: connectionProjectsDropDown, onChange: this._handleCoreProjectChange, enabled: this.state.isCreating, displayProp: "Name", autoWidth: true, width: "".concat(fieldWidth, "px") })),
                    React.createElement(InovxControls.FormField, { title: "".concat(InovxLoader.t("DataTransfer:form.vsuiteProjectName"), "*"), inputName: "VSuiteProjectName", className: "data-transfer-field" },
                        React.createElement("input", __assign({}, projectNameInput, { onChange: this.state.isCreating ? this._handleFieldChange : null }))))),
            React.createElement("section", { className: "data-transfer-form-section" },
                React.createElement("h3", { className: "section-title" }, InovxLoader.t("DataTransfer:form.jobschedule")),
                React.createElement("div", { className: "section-content" },
                    React.createElement(JobScheduler, { editSchedule: this.state.isCreating ? null : this.state.transferJob.JobSchedule, fieldWidth: fieldWidth }))),
            React.createElement(InovxControls.ModalPopUp, { isOpen: this.state.isAddViewConnectionModalOpen },
                React.createElement(CoreConnectionSettingsModal, { readOnly: !this.state.isCreating && !this.state.isEditConnectionModalOpen, onSave: this._saveNewConnection, onCancel: this._cancelNewConnection })),
            React.createElement(InovxControls.ModalPopUp, { isOpen: this.state.isEditConnectionModalOpen },
                React.createElement(CoreConnectionEditModal, { onSave: this._saveEditConnection, onCancel: this._cancelEditConnection, initialConnection: this.state.selectedConnection, ref: "edit-modal" }))));
    };
    return DataTransferForm;
}(React.Component));
module.exports = DataTransferForm;

},{"./../actions/DataTransferActions":2,"./../constants/DataTransferConstants":12,"./../stores/DataTransferStore":16,"./CoreConnectionEditModal":3,"./CoreConnectionSettingsModal":4,"./JobScheduler":10,"react":"react","shared.web.client":"shared.web.client"}],7:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
// A '.tsx' file enables JSX support in the TypeScript compiler, 
// for more information see the following page on the TypeScript wiki:
// https://github.com/Microsoft/TypeScript/wiki/JSX
var React = require("react");
var DataTransferStore = require("./../stores/DataTransferStore");
var DayPicker = /** @class */ (function (_super) {
    __extends(DayPicker, _super);
    function DayPicker(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            selectedDays: _this.props.defaultChecked
        };
        return _this;
    }
    DayPicker.prototype.render = function () {
        return (React.createElement("div", { className: "date-picker-container" },
            React.createElement(Checkbox, { day: InovxLoader.t("DataTransfer:form.sun"), value: 0, defaultChecked: this.state.selectedDays.indexOf(0) > -1, onChange: this.props.onDayChange }),
            React.createElement(Checkbox, { day: InovxLoader.t("DataTransfer:form.mon"), value: 1, defaultChecked: this.state.selectedDays.indexOf(1) > -1, onChange: this.props.onDayChange }),
            React.createElement(Checkbox, { day: InovxLoader.t("DataTransfer:form.tue"), value: 2, defaultChecked: this.state.selectedDays.indexOf(2) > -1, onChange: this.props.onDayChange }),
            React.createElement(Checkbox, { day: InovxLoader.t("DataTransfer:form.wed"), value: 3, defaultChecked: this.state.selectedDays.indexOf(3) > -1, onChange: this.props.onDayChange }),
            React.createElement(Checkbox, { day: InovxLoader.t("DataTransfer:form.thu"), value: 4, defaultChecked: this.state.selectedDays.indexOf(4) > -1, onChange: this.props.onDayChange }),
            React.createElement(Checkbox, { day: InovxLoader.t("DataTransfer:form.fri"), value: 5, defaultChecked: this.state.selectedDays.indexOf(5) > -1, onChange: this.props.onDayChange }),
            React.createElement(Checkbox, { day: InovxLoader.t("DataTransfer:form.sat"), value: 6, defaultChecked: this.state.selectedDays.indexOf(6) > -1, onChange: this.props.onDayChange })));
    };
    return DayPicker;
}(React.Component));
var Checkbox = /** @class */ (function (_super) {
    __extends(Checkbox, _super);
    function Checkbox(props) {
        var _this = _super.call(this, props) || this;
        _this._handleCheckboxChange = function (e) {
            var daysToRun = DataTransferStore.getIsCreating() ? DataTransferStore.getTransferJobCreation().JobSchedule.DaysToRun : DataTransferStore.getEditTransferJob().JobSchedule.DaysToRun;
            var checked;
            if (e.target.checked) {
                daysToRun.push(_this.props.value);
                checked = true;
            }
            else {
                var dayIndex = daysToRun.indexOf(_this.props.value);
                if (dayIndex > -1) {
                    daysToRun.splice(dayIndex, 1);
                    checked = false;
                }
            }
            _this.props.onChange(daysToRun);
            _this.setState({
                checked: checked
            });
        };
        _this.state = {
            checked: _this.props.defaultChecked
        };
        return _this;
    }
    Checkbox.prototype.render = function () {
        var _this = this;
        var checkboxProps = {
            type: "checkbox",
            className: "job-schedule-check-box",
            id: "checkbox-".concat(this.props.day),
            onChange: function (e) { return _this._handleCheckboxChange(e); },
            checked: this.state.checked
        };
        return (React.createElement("label", { className: "date-container" },
            React.createElement("input", __assign({}, checkboxProps)),
            this.props.day));
    };
    return Checkbox;
}(React.Component));
module.exports = DayPicker;

},{"./../stores/DataTransferStore":16,"react":"react"}],8:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// A '.tsx' file enables JSX support in the TypeScript compiler, 
// for more information see the following page on the TypeScript wiki:
// https://github.com/Microsoft/TypeScript/wiki/JSX
var React = require("react");
var Inovx = require("shared.web.client");
var DataTransferActions = require("./../actions/DataTransferActions");
var DataTransferStore = require("./../stores/DataTransferStore");
var SystemStore = Inovx.Shared.System.Store;
var InovxControls = Inovx.Shared.Controls;
var DeleteAllContentModal = /** @class */ (function (_super) {
    __extends(DeleteAllContentModal, _super);
    function DeleteAllContentModal(props) {
        var _this = _super.call(this, props) || this;
        _this._handleOk = function () {
            if (!_this.state.notAcknowledged) {
                DataTransferActions.deleteAllJobContent(_this.state.deleteAllContentSetting.Name);
                DataTransferActions.closeDeleteAllContentModal();
            }
        };
        _this._onCheck = function (e) {
            _this.setState({ notAcknowledged: !e.target.checked });
        };
        _this._handleCancel = function () {
            DataTransferActions.closeDeleteAllContentModal();
        };
        _this.state = {
            deleteAllContentSetting: DataTransferStore.getEditTransferJob(),
            notAcknowledged: true
        };
        return _this;
    }
    DeleteAllContentModal.prototype.render = function () {
        var _this = this;
        var inputObj = {
            className: 'form-control',
            type: 'text',
            readOnly: this.props.readOnly ? "readonly" : null
        };
        var deleteAllContentSetting = this.state.deleteAllContentSetting;
        return (React.createElement("div", { className: "panel panel-primary connection-settings" },
            React.createElement("div", { className: "panel-heading" }, InovxLoader.t("DataTransfer:form.confirmAllContentDelection")),
            React.createElement("div", { className: "panel-body fc-margin" },
                React.createElement("div", null, InovxLoader.t("DataTransfer:form.delAllMsgPart1").replace("{0}", this.state.deleteAllContentSetting.ProjectName)),
                React.createElement("div", null, InovxLoader.t("DataTransfer:form.delAllMsgPart2").replace("{0}", this.state.deleteAllContentSetting.ProjectName)),
                React.createElement("div", null,
                    React.createElement("label", null,
                        " ",
                        React.createElement("input", { type: 'checkbox', name: 'acknowledgedChk', onClick: function (e) { return _this._onCheck(e); } }),
                        " ",
                        InovxLoader.t("DataTransfer:form.readAgreement"))),
                React.createElement("div", { className: "btn-bar-b-sm" },
                    React.createElement("button", { type: "button", className: "btn btn-primary ".concat(this.state.notAcknowledged ? "disabled" : ""), onClick: this._handleOk }, InovxLoader.t("DataTransfer:form.ok")),
                    React.createElement("button", { type: "button", className: "btn btn-default", onClick: this._handleCancel }, InovxLoader.t("DataTransfer:form.cancel"))))));
    };
    return DeleteAllContentModal;
}(React.Component));
module.exports = DeleteAllContentModal;

},{"./../actions/DataTransferActions":2,"./../stores/DataTransferStore":16,"react":"react","shared.web.client":"shared.web.client"}],9:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// A '.tsx' file enables JSX support in the TypeScript compiler, 
// for more information see the following page on the TypeScript wiki:
// https://github.com/Microsoft/TypeScript/wiki/JSX
var React = require("react");
var Inovx = require("shared.web.client");
var DataTransferActions = require("./../actions/DataTransferActions");
var DataTransferStore = require("./../stores/DataTransferStore");
var SystemStore = Inovx.Shared.System.Store;
var InovxControls = Inovx.Shared.Controls;
var DeletionTypeModal = /** @class */ (function (_super) {
    __extends(DeletionTypeModal, _super);
    function DeletionTypeModal(props) {
        var _this = _super.call(this, props) || this;
        _this._handleJobOnly = function () {
            DataTransferActions.finishDeleteTypePopup();
            DataTransferActions.beginDeleteJobOnly(_this.state.deletionJobInfo.Name);
        };
        _this._handleAllData = function () {
            DataTransferActions.finishDeleteTypePopup();
            DataTransferActions.beginDeleteAllJobContent(_this.state.deletionJobInfo.Name);
        };
        _this._handleCancel = function () {
            DataTransferActions.finishDeleteTypePopup();
        };
        _this._checkForUnsavedChanges = function () {
            if (DataTransferStore.getConnectionFormHasChanges()) {
                event.returnValue = InovxLoader.t('common:msgBox.browserSaveChanges');
            }
        };
        _this.state = {
            deletionJobInfo: DataTransferStore.getEditTransferJob()
        };
        return _this;
    }
    DeletionTypeModal.prototype.componentDidMount = function () {
        //window.addEventListener('beforeunload', this._checkForUnsavedChanges);
    };
    DeletionTypeModal.prototype.componentWillUnmount = function () {
        //window.removeEventListener('beforeunload', this._checkForUnsavedChanges);
    };
    DeletionTypeModal.prototype.render = function () {
        var inputObj = {
            className: 'form-control',
            type: 'text',
            readOnly: this.props.readOnly ? "readonly" : null
        };
        var coreConnectionSetting = this.state.deletionJobInfo;
        return (React.createElement("div", { className: "panel panel-primary connection-settings" },
            React.createElement("div", { className: "panel-heading" }, InovxLoader.t("DataTransfer:form.selectDeletionType")),
            React.createElement("div", { className: "panel-body fc-margin" },
                React.createElement("div", null, InovxLoader.t("DataTransfer:form.delMsgPart1")),
                React.createElement("div", null, InovxLoader.t("DataTransfer:form.delMsgPart2")),
                React.createElement("div", null, InovxLoader.t("DataTransfer:form.delMsgPart3")),
                React.createElement("div", { className: "btn-bar-b-sm" },
                    React.createElement("button", { type: "button", className: "btn btn-primary", onClick: this._handleJobOnly }, InovxLoader.t("DataTransfer:form.deleteDataTransferOnly")),
                    React.createElement("button", { type: "button", className: "btn btn-primary", onClick: this._handleAllData }, InovxLoader.t("DataTransfer:form.deleteAllContent")),
                    React.createElement("button", { type: "button", className: "btn btn-default", onClick: this._handleCancel }, InovxLoader.t("DataTransfer:form.cancel"))))));
    };
    return DeletionTypeModal;
}(React.Component));
module.exports = DeletionTypeModal;

},{"./../actions/DataTransferActions":2,"./../stores/DataTransferStore":16,"react":"react","shared.web.client":"shared.web.client"}],10:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
//A '.tsx' file enables JSX support in the TypeScript compiler, 
//for more information see the following page on the TypeScript wiki:
//https://github.com/Microsoft/TypeScript/wiki/JSX
var React = require("react");
var Inovx = require("shared.web.client");
var DayPicker = require("./DayPicker");
var DataTransferActions = require("./../actions/DataTransferActions");
var DataTransferStore = require("./../stores/DataTransferStore");
var InovxControls = Inovx.Shared.Controls;
var JobScheduler = /** @class */ (function (_super) {
    __extends(JobScheduler, _super);
    function JobScheduler(props) {
        var _this = _super.call(this, props) || this;
        _this._jobSchedule = { DaysToRun: [], StartDate: new Date().toISOString(), RunOnceDaily: true, RunEveryHours: 0, RunStartTime: "00:00", RunEndTime: "00:00", ScheduleEnabled: false };
        _this._handleFieldChange = function (value, type) {
            var hour, minute;
            switch (type) {
                case "enabled":
                    _this._jobSchedule.ScheduleEnabled = value.target.checked;
                    break;
                case "day":
                    _this._jobSchedule.DaysToRun = value;
                    break;
                case "date":
                    _this._jobSchedule.StartDate = value;
                    break;
                case "frequency":
                    _this._jobSchedule.RunEveryHours = value.Value;
                    if (_this._jobSchedule.RunEveryHours === 0) {
                        _this._jobSchedule.RunOnceDaily = true;
                    }
                    else {
                        _this._jobSchedule.RunOnceDaily = false;
                    }
                    break;
            }
            DataTransferActions.updateJobFields("JobSchedule", _this._jobSchedule);
        };
        _this._handleStartTimeChange = function (time) {
            _this._jobSchedule.RunStartTime = time;
            DataTransferActions.updateJobFields("JobSchedule", _this._jobSchedule);
        };
        _this._handleEndTimeChange = function (time) {
            _this._jobSchedule.RunEndTime = time;
            DataTransferActions.updateJobFields("JobSchedule", _this._jobSchedule);
        };
        _this._getJobFrequencies = function () {
            return [
                { Frequency: InovxLoader.t("DataTransfer:form.frequencyOnce"), Value: 0 },
                { Frequency: InovxLoader.t("DataTransfer:form.frequencyEveryHour"), Value: 1 },
                { Frequency: InovxLoader.t("DataTransfer:form.frequencyEveryTwo"), Value: 2 },
                { Frequency: InovxLoader.t("DataTransfer:form.frequencyEveryFour"), Value: 4 },
                { Frequency: InovxLoader.t("DataTransfer:form.frequencyEveryEight"), Value: 8 }
            ];
        };
        _this._selectFrequency = function () {
            var frequency;
            _this._getJobFrequencies().filter(function (object) {
                if (object.Value === _this._jobSchedule.RunEveryHours) {
                    frequency = object.Frequency;
                }
                return true;
            });
            return frequency;
        };
        _this._formatTime = function (time) {
            if (time.split(":").length === 3) {
                var array = time.split(":");
                array.pop();
                return array.join(":");
            }
            else {
                return time;
            }
        };
        _this._onChange = function () {
            _this.setState({
                jobSchedule: DataTransferStore.getTransferJobCreation().JobSchedule
            });
        };
        _this.props.editSchedule ? _this._jobSchedule = _this.props.editSchedule : null;
        _this.state = {
            jobSchedule: _this._jobSchedule
        };
        return _this;
    }
    JobScheduler.prototype.componentWillMount = function () {
        this._jobSchedule.RunStartTime = this._formatTime(this._jobSchedule.RunStartTime);
        this._jobSchedule.RunEndTime = this._formatTime(this._jobSchedule.RunEndTime);
    };
    JobScheduler.prototype.componentDidMount = function () {
        DataTransferStore.addChangeListener(this._onChange);
    };
    JobScheduler.prototype.componentWillUnmount = function () {
        DataTransferStore.removeChangeListener(this._onChange);
    };
    JobScheduler.prototype.render = function () {
        var _this = this;
        var timePickerTitle = this.state.jobSchedule.RunEveryHours > 0 ? InovxLoader.t("DataTransfer:form.between") : InovxLoader.t("DataTransfer:form.at");
        timePickerTitle += InovxLoader.t("DataTransfer:form.localDate");
        return (React.createElement("div", { className: "job-schedule-container" },
            React.createElement(InovxControls.FormField, { title: InovxLoader.t("DataTransfer:form.schedule"), inputName: "ScheduleEnabled", className: "data-transfer-field" },
                React.createElement("label", { className: "date-container" },
                    React.createElement("input", { type: "checkbox", className: "job-schedule-check-box", onChange: function (e) { return _this._handleFieldChange(e, "enabled"); }, checked: this.state.jobSchedule.ScheduleEnabled }),
                    InovxLoader.t("DataTransfer:form.enabled"))),
            React.createElement(InovxControls.FormField, { title: InovxLoader.t("DataTransfer:form.daysToRun"), inputName: "DaysToRun", className: "data-transfer-field" },
                React.createElement(DayPicker, { onDayChange: function (e) { return _this._handleFieldChange(e, "day"); }, defaultChecked: this._jobSchedule.DaysToRun })),
            React.createElement(InovxControls.FormField, { title: InovxLoader.t("DataTransfer:form.startDate"), inputName: "StartDate", className: "data-transfer-field" },
                React.createElement(InovxControls.DatePicker, { onChange: function (e) { return _this._handleFieldChange(e, "date"); }, value: this._jobSchedule.StartDate, width: this.props.fieldWidth })),
            React.createElement(InovxControls.FormField, { title: InovxLoader.t("DataTransfer:form.frequency"), inputName: "RunEveryHours", className: "data-transfer-field" },
                React.createElement(InovxControls.DropDownList, { datasource: this._getJobFrequencies(), onChange: function (e) { return _this._handleFieldChange(e, "frequency"); }, valueProp: "Frequency", displayProp: "Frequency", initialValue: this._selectFrequency(), width: "".concat(this.props.fieldWidth, "px") })),
            React.createElement(InovxControls.FormField, { title: timePickerTitle, inputName: "Time", className: "data-transfer-field" },
                React.createElement(InovxControls.TimePicker, { interval: 30, onChange: this._handleStartTimeChange, timeFormat: "HH:mm", value: this._formatTime(this._jobSchedule.RunStartTime), id: "jobStartTime", width: this.props.fieldWidth }),
                React.createElement(InovxControls.If, { condition: this.state.jobSchedule.RunEveryHours > 0 },
                    React.createElement("span", { className: "bold-blue-text" }, InovxLoader.t("DataTransfer:form.and"))),
                React.createElement(InovxControls.If, { condition: this.state.jobSchedule.RunEveryHours > 0 },
                    React.createElement(InovxControls.TimePicker, { interval: 30, onChange: this._handleEndTimeChange, timeFormat: "HH:mm", value: this._formatTime(this._jobSchedule.RunEndTime), id: "jobEndTime", width: this.props.fieldWidth })))));
    };
    return JobScheduler;
}(React.Component));
module.exports = JobScheduler;

},{"./../actions/DataTransferActions":2,"./../stores/DataTransferStore":16,"./DayPicker":7,"react":"react","shared.web.client":"shared.web.client"}],11:[function(require,module,exports){
"use strict";
var DataSourceTypeEnum;
(function (DataSourceTypeEnum) {
    DataSourceTypeEnum["Postgres"] = "Postgres";
    DataSourceTypeEnum["SqlServer"] = "SqlServer";
})(DataSourceTypeEnum || (DataSourceTypeEnum = {}));
;
module.exports = DataSourceTypeEnum;

},{}],12:[function(require,module,exports){
"use strict";
// This file is only a template for constants.  Copy and paste this to your application's constants .ts file and start off from there
// Rename all things with App_Name.
// Naming convention for constants is "[App Name]Constants.ts" i.e. UsersConstants.ts, EntitlementConstants.ts
var keymirror = require("fbjs/lib/keymirror");
// convention for constants is
// [App_Name]_[Action]
var DataTransferConstants = keymirror({
    DATATRANSFER_GET_ALL_JOBS: null,
    DATATRANSFER_BEGIN_DELETE_TYPE: null,
    DATATRANSFER_END_DELETE_TYPE: null,
    DATATRANSFER_BEGIN_DELETE_ALL: null,
    DATATRANSFER_BEGIN_CREATE: null,
    DATATRANSFER_CREATE: null,
    DATATRANSFER_BEGIN_EDIT: null,
    DATATRANSFER_EDIT: null,
    DATATRANSFER_FINISH_EDIT: null,
    DATATRANSFER_FINISH_DELETE_ALL: null,
    DATATRANSFER_FINISH_DELETE: null,
    DATATRANSFER_UPDATE_JOB_CREATION: null,
    DATATRANSFER_UPDATE_JOB_EDIT: null,
    DATATRANSFER_UPDATE_CONNECTION: null,
    DATATRANSFER_CHANGE_SELECTED_CONNECTION: null,
    DATATRANSFER_GET_ALL_CORE_CONNECTIONS: null,
    DATATRANSFER_GET_ALL_CONNECTION_PROJECTS: null,
    DATATRANSFER_BEGIN_ADD_CONNECTION: null,
    DATATRANSFER_TEST_CONNECTION: null,
    DATATRANSFER_FINISH_ADD_CONNECTION: null,
    DATATRANSFER_EDIT_CONNECTION: null,
    DATATRANSFER_CLOSE_EDIT_CONNECTION: null,
    DATATRANSFER_SAVE_CONNECTION: null,
    DATATRANSFER_DELETE_JOB: null,
    DATATRANSFER_RUN_JOB: null
});
module.exports = DataTransferConstants;

},{"fbjs/lib/keymirror":"fbjs/lib/keymirror"}],13:[function(require,module,exports){
"use strict";
var DataTransferPermissions = {
    DATATRANSFER_MANAGE: "DataTransfer.Manage",
    DATATRANSFER_RUN: "DataTransfer.Run",
};
module.exports = DataTransferPermissions;

},{}],14:[function(require,module,exports){
"use strict";
var SynchronizationStatusTypeEnum;
(function (SynchronizationStatusTypeEnum) {
    SynchronizationStatusTypeEnum["NotSynchronized"] = "0";
    SynchronizationStatusTypeEnum["Synchronized"] = "1";
    SynchronizationStatusTypeEnum["Invalid"] = "2";
    SynchronizationStatusTypeEnum["Disconnected"] = "3";
})(SynchronizationStatusTypeEnum || (SynchronizationStatusTypeEnum = {}));
;
module.exports = SynchronizationStatusTypeEnum;

},{}],15:[function(require,module,exports){
"use strict";
// This file is only a template for services.  Copy and paste this to your application's service .ts file and start off from there
// Rename all things with App_Name.
// Naming convention for services is "[App Name]Services.ts" i.e. UsersServices.ts, EntitlementServices.ts
var Inovx = require("shared.web.client");
var assign = require("object-assign");
var UrlUtilities = Inovx.Shared.Common.UrlUtilities;
var url = UrlUtilities.getApiUrl() + '/DataTransferApi/api/DataTransfer';
var DataTransferServices = assign({}, Inovx.Shared.Flux.BaseService, {
    //Replace method accordingly
    getAllJobs: function (successCallback, errorCallback, ignoreDefaultError) {
        var _this = this;
        this.get("".concat(url, "/GetAll"), null, function (retData) {
            successCallback(retData);
        }, function (error) {
            if (!ignoreDefaultError) {
                _this.handleWebApiError(error);
            }
            errorCallback(error);
        });
    },
    getJobDetails: function (jobName, successCallback, errorCallback) {
        var _this = this;
        this.get("".concat(url, "/Details"), { jobName: jobName }, function (retData) {
            successCallback(retData);
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    },
    getAllConnections: function (successCallback, errorCallback) {
        var _this = this;
        this.get("".concat(url, "/GetAllCoreConnections"), null, function (retData) {
            successCallback(retData);
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    },
    getAllConnectionProjects: function (id, successCallback, errorCallback) {
        var _this = this;
        this.get("".concat(url, "/GetAllConfigurationProjects"), { id: id }, function (retData) {
            successCallback(retData);
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    },
    createJob: function (job, successCallback, errorCallback) {
        var _this = this;
        this.post("".concat(url, "/Create"), job, function (retData) {
            successCallback(retData);
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    },
    editJob: function (jobName, job, successCallback, errorCallback) {
        var _this = this;
        this.post("".concat(url, "/Update"), { jobName: jobName, data: job }, function (retData) {
            successCallback(retData);
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    },
    editJobSchedule: function (jobName, jobSchedule, successCallback, errorCallback) {
        var _this = this;
        this.post("".concat(url, "/UpdateSchedule"), { jobName: jobName, jobSchedule: jobSchedule }, function (retData) {
            successCallback(retData);
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    },
    deleteJob: function (jobName, successCallback, errorCallback) {
        var _this = this;
        this.post("".concat(url, "/Delete"), { jobName: jobName }, function (retData) {
            successCallback(retData);
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    },
    deleteAllJob: function (jobName, successCallback, errorCallback) {
        var _this = this;
        this.post("".concat(url, "/DeleteProject"), { jobName: jobName }, function (retData) {
            successCallback(retData);
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    },
    testCoreConnection: function (configuration, successCallback, errorCallback, ignoreDefaultError) {
        var _this = this;
        this.post("".concat(url, "/TestConnection"), configuration, function (retData) {
            successCallback(retData);
        }, function (error) {
            if (!ignoreDefaultError) {
                _this.handleWebApiError(error);
            }
            errorCallback(error);
        });
    },
    createCoreConnection: function (configuration, successCallback, errorCallback) {
        var _this = this;
        this.post("".concat(url, "/CreateConfig"), configuration, function (retData) {
            successCallback(retData);
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    },
    runJob: function (jobName, successCallback, errorCallback) {
        var _this = this;
        this.post("".concat(url, "/RunJob"), { jobName: jobName }, function (retData) {
            successCallback(retData);
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    }
});
module.exports = DataTransferServices;

},{"object-assign":18,"shared.web.client":"shared.web.client"}],16:[function(require,module,exports){
"use strict";
// This file is only a template for Stores.  Copy and paste this to your application store .ts file and start off from there
// Rename all things with App_Name.
// Naming convention for Stores is "[App Name]Store.ts" i.e. UserStore.ts, EntitlementStore.ts
var NodeEvents = require("events");
var Inovx = require("shared.web.client");
var assign = require("object-assign");
var DataTransferConstants = require("./../constants/DataTransferConstants");
var SynchronizationStatusTypeEnum = require("./../constants/SynchronizationStatusTypeEnum");
var EventEmitter = NodeEvents.EventEmitter;
var DateTimeFormatHelper = Inovx.Shared.Common.DateTimeFormatHelper;
var CHANGE_EVENT = 'DataTransfer.change';
var _isCreatingJob = false, _changesMadeToJob = false, _connectionFormChangesMade = false, _transferJobCreation = getBlankTransferJobCreation(), _editTransferJob = getBlankTransferJobInfo(), _transferJobs = [], _coreConnectionSetting = getBlankCoreSettings(), _coreConnections = [], _selectedConnection = getBlankConnectionName(), _connectionValid = false, _connectionProjects = [], _connectionModalVisible = false, _editConnectionModalVisible = false, _deleteConfirmationVisible = false, _modalVisible = false, _deletionTypeVisible = false, _deleteAllVisible = false;
function setCoreConnection(connections) {
    _coreConnections = connections;
}
function setBeginCreatingNewJob() {
    resetJobModalData();
    _isCreatingJob = true;
    _modalVisible = true;
}
function setBeginEdittingJob(jobDetails) {
    resetJobModalData();
    _isCreatingJob = false;
    _modalVisible = true;
    _editTransferJob = jobDetails;
}
function resetJobModalData() {
    _connectionModalVisible = false;
    _editConnectionModalVisible = false;
    _changesMadeToJob = false;
    _connectionValid = false;
    _connectionProjects = [];
    _transferJobCreation = getBlankTransferJobCreation();
    _editTransferJob = getBlankTransferJobInfo();
    _selectedConnection = getBlankConnectionName();
}
function setBeginDeletionTypePopup(jobDetails) {
    _editTransferJob = jobDetails;
    _deletionTypeVisible = true;
}
function setBeginDeleteAllPopup() {
    _deleteAllVisible = true;
}
function setEndDeleteAllPopup() {
    _deleteAllVisible = false;
}
function setEndDeletionTypePopup() {
    _deletionTypeVisible = false;
}
function setBeginAddingConnection() {
    _connectionModalVisible = true;
    if (!_isCreatingJob && !_editConnectionModalVisible) {
        var SqlServerName = _editTransferJob.SqlServerName, SqlServerInstance = _editTransferJob.SqlServerInstance, SqlServerPort = _editTransferJob.SqlServerPort, CoreServerName = _editTransferJob.CoreServerName, CoreVersion = _editTransferJob.CoreVersion;
        _coreConnectionSetting.SqlServerName = SqlServerName;
        _coreConnectionSetting.SqlServerInstance = SqlServerInstance;
        _coreConnectionSetting.SqlServerTcpPort = SqlServerPort.toString() === '0' ? '' : SqlServerPort;
        _coreConnectionSetting.CoreServerName = CoreServerName;
        _coreConnectionSetting.Version = CoreVersion;
    }
}
function setFinishAddingConnection() {
    _connectionModalVisible = false;
    _connectionFormChangesMade = false;
    _coreConnectionSetting = getBlankCoreSettings();
}
function getBlankTransferJobCreation() {
    return {
        ProjectName: "",
        CoreProjectName: "",
        CoreConnectionId: "",
        JobSchedule: getBlankJobSchedule()
    };
}
function getBlankTransferJobInfo() {
    return {
        Name: "",
        ProjectName: "",
        VSuiteCoreProjectName: "",
        SqlServerName: "",
        SqlServerInstance: "",
        ScheduleEnabled: false,
        SqlServerPort: "",
        CoreServerName: "",
        CoreVersion: "",
        JobSchedule: getBlankJobSchedule(),
        Synchronization: "",
        SynchronizationStatus: "",
        LastTransferDate: ""
    };
}
function getBlankCoreSettings() {
    return {
        ConfigurationName: "",
        SqlServerName: "",
        SqlServerInstance: "",
        SqlServerTcpPort: "",
        CoreServerName: "",
        CoreAdminPassword: "",
        Version: "6.2"
    };
}
function getBlankConnectionName() {
    return { Id: "", Name: "" };
}
function getBlankJobSchedule() {
    return {
        DaysToRun: [],
        StartDate: new Date().toISOString(),
        RunOnceDaily: true,
        RunEveryHours: 0,
        RunStartTime: "00:00",
        RunEndTime: "00:00",
        ScheduleEnabled: false
    };
}
function updateJobCreation(key, value) {
    _changesMadeToJob = true;
    _transferJobCreation[key] = value;
    if (!_isCreatingJob) {
        if (key === "CoreProjectName") {
            _editTransferJob.VSuiteCoreProjectName = value;
        }
    }
}
function updateConnection(key, value) {
    _connectionFormChangesMade = true;
    _connectionValid = false;
    _coreConnectionSetting[key] = value;
}
var DataTransferStore = assign({}, EventEmitter.prototype, {
    // Add store getters here
    getAllJobs: function () {
        return _transferJobs;
    },
    getTransferJobCreation: function () {
        return _transferJobCreation;
    },
    getEditTransferJob: function () {
        return _editTransferJob;
    },
    getAllCoreConnections: function () {
        return _coreConnections;
    },
    getConnectionProjects: function () {
        return _connectionProjects;
    },
    getSelectedConnection: function () {
        return _selectedConnection;
    },
    getCoreConnectionSetting: function () {
        return _coreConnectionSetting;
    },
    getIsCreating: function () {
        return _isCreatingJob;
    },
    getHasJobChanges: function () {
        return _changesMadeToJob;
    },
    getConnectionFormHasChanges: function () {
        return _connectionFormChangesMade;
    },
    getConnectionValidity: function () {
        return _connectionValid;
    },
    getConnectionModalVisible: function () {
        return _connectionModalVisible;
    },
    getEditConnectionModalVisible: function () {
        return _editConnectionModalVisible;
    },
    getDeletionTypeVisible: function () {
        return _deletionTypeVisible;
    },
    getModalVisible: function () {
        return _modalVisible;
    },
    getDeletionTypeModalVisible: function () {
        return _deletionTypeVisible;
    },
    getDeleteAllModalVisible: function () {
        return _deleteAllVisible;
    },
    emitChange: function () {
        this.emit(CHANGE_EVENT);
    },
    addChangeListener: function (callback) {
        this.on(CHANGE_EVENT, callback);
    },
    removeChangeListener: function (callback) {
        this.removeListener(CHANGE_EVENT, callback);
    }
});
function ShowCustomDialog() {
    ShowDialogBox('Warning', 'Record updated successfully.', 'Ok', '', 'GoToAssetList', null);
}
function ShowDialogBox(title, content, btn1text, btn2text, functionText, parameterList) {
    var btn1css;
    var btn2css;
    if (btn1text == '') {
        btn1css = "hidecss";
    }
    else {
        btn1css = "showcss";
    }
    if (btn2text == '') {
        btn2css = "hidecss";
    }
    else {
        btn2css = "showcss";
    }
    $("#lblMessage").html(content);
    var dialog = document.createElement("DIALOG");
    $("#dialog").dialog({
        resizable: false,
        title: title,
        modal: true,
        width: '400px',
        height: 'auto',
        bgiframe: false,
        hide: { effect: 'scale', duration: 400 },
        buttons: [
            {
                text: btn1text,
                "class": btn1css,
                click: function () {
                    $("#dialog").dialog('close');
                }
            },
            {
                text: btn2text,
                "class": btn2css,
                click: function () {
                    $("#dialog").dialog('close');
                }
            }
        ]
    });
}
function fixJobData(data) {
    if (data) {
        data.forEach(function (job) {
            if (job.SynchronizationStatus == SynchronizationStatusTypeEnum.NotSynchronized) {
                job.Synchronization = InovxLoader.t("DataTransfer:grid.notSynchronized");
            }
            else if (job.SynchronizationStatus == SynchronizationStatusTypeEnum.Synchronized) {
                job.Synchronization = DateTimeFormatHelper.getFormatDate(job.LastTransferDate) + " " + DateTimeFormatHelper.getFormatTime(job.LastTransferDate, false);
            }
            else if (job.SynchronizationStatus == SynchronizationStatusTypeEnum.Invalid) {
                job.Synchronization = InovxLoader.t("DataTransfer:grid.invalid");
            }
            else if (job.SynchronizationStatus == SynchronizationStatusTypeEnum.Disconnected) {
                job.Synchronization = InovxLoader.t("DataTransfer:grid.disconnected");
            }
        });
    }
}
Inovx.Shared.Flux.AppDispatcher.register(function (payload) {
    switch (payload.actionType) {
        case DataTransferConstants.DATATRANSFER_BEGIN_DELETE_TYPE:
            setBeginDeletionTypePopup(payload.data);
            break;
        case DataTransferConstants.DATATRANSFER_END_DELETE_TYPE:
            setEndDeletionTypePopup();
            break;
        case DataTransferConstants.DATATRANSFER_BEGIN_DELETE_ALL:
            setBeginDeleteAllPopup();
            break;
        case DataTransferConstants.DATATRANSFER_FINISH_DELETE_ALL:
            setEndDeleteAllPopup();
            break;
        case DataTransferConstants.DATATRANSFER_GET_ALL_JOBS:
            _transferJobs = payload.data;
            fixJobData(_transferJobs);
            break;
        case DataTransferConstants.DATATRANSFER_BEGIN_CREATE:
            setBeginCreatingNewJob();
            break;
        case DataTransferConstants.DATATRANSFER_BEGIN_EDIT:
            setBeginEdittingJob(payload.data);
            break;
        case DataTransferConstants.DATATRANSFER_FINISH_EDIT:
            _modalVisible = false;
            _changesMadeToJob = false;
            break;
        case DataTransferConstants.DATATRANSFER_CHANGE_SELECTED_CONNECTION:
            _selectedConnection = payload.data;
            break;
        case DataTransferConstants.DATATRANSFER_GET_ALL_CORE_CONNECTIONS:
            setCoreConnection(payload.data);
            break;
        case DataTransferConstants.DATATRANSFER_GET_ALL_CONNECTION_PROJECTS:
            _connectionProjects = payload.data;
            break;
        case DataTransferConstants.DATATRANSFER_UPDATE_JOB_CREATION:
            updateJobCreation(payload.key, payload.value);
            break;
        case DataTransferConstants.DATATRANSFER_UPDATE_CONNECTION:
            updateConnection(payload.key, payload.value);
            break;
        case DataTransferConstants.DATATRANSFER_BEGIN_ADD_CONNECTION:
            setBeginAddingConnection();
            break;
        case DataTransferConstants.DATATRANSFER_FINISH_ADD_CONNECTION:
            setFinishAddingConnection();
            break;
        case DataTransferConstants.DATATRANSFER_TEST_CONNECTION:
            _connectionValid = true;
            break;
        case DataTransferConstants.DATATRANSFER_EDIT_CONNECTION:
            _editConnectionModalVisible = true;
            break;
        case DataTransferConstants.DATATRANSFER_CLOSE_EDIT_CONNECTION:
            _editConnectionModalVisible = false;
            break;
        default: return true;
    }
    DataTransferStore.emitChange();
    return true;
});
module.exports = DataTransferStore;

},{"./../constants/DataTransferConstants":12,"./../constants/SynchronizationStatusTypeEnum":14,"events":17,"object-assign":18,"shared.web.client":"shared.web.client"}],17:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var objectCreate = Object.create || objectCreatePolyfill
var objectKeys = Object.keys || objectKeysPolyfill
var bind = Function.prototype.bind || functionBindPolyfill

function EventEmitter() {
  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
    this._events = objectCreate(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

var hasDefineProperty;
try {
  var o = {};
  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
  hasDefineProperty = o.x === 0;
} catch (err) { hasDefineProperty = false }
if (hasDefineProperty) {
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      // check whether the input is a positive number (whose value is zero or
      // greater and not a NaN).
      if (typeof arg !== 'number' || arg < 0 || arg !== arg)
        throw new TypeError('"defaultMaxListeners" must be a positive number');
      defaultMaxListeners = arg;
    }
  });
} else {
  EventEmitter.defaultMaxListeners = defaultMaxListeners;
}

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    if (arguments.length > 1)
      er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Unhandled "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
      // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
      // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = objectCreate(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
          listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
            existing.length + ' "' + String(type) + '" listeners ' +
            'added. Use emitter.setMaxListeners() to ' +
            'increase limit.');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        if (typeof console === 'object' && console.warn) {
          console.warn('%s: %s', w.name, w.message);
        }
      }
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    switch (arguments.length) {
      case 0:
        return this.listener.call(this.target);
      case 1:
        return this.listener.call(this.target, arguments[0]);
      case 2:
        return this.listener.call(this.target, arguments[0], arguments[1]);
      case 3:
        return this.listener.call(this.target, arguments[0], arguments[1],
            arguments[2]);
      default:
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i)
          args[i] = arguments[i];
        this.listener.apply(this.target, args);
    }
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = bind.call(onceWrapper, state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = objectCreate(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else
          spliceOne(list, position);

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (!events)
    return [];

  var evlistener = events[type];
  if (!evlistener)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function objectCreatePolyfill(proto) {
  var F = function() {};
  F.prototype = proto;
  return new F;
}
function objectKeysPolyfill(obj) {
  var keys = [];
  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
    keys.push(k);
  }
  return k;
}
function functionBindPolyfill(context) {
  var fn = this;
  return function () {
    return fn.apply(context, arguments);
  };
}

},{}],18:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
