(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
// Â© 2001-2015 INOVx Solutions, Inc.
// 114 Pacifica Suite 300, Irvine, CA 92618 USA
// All rights reserved.
//
// This software is confidential, proprietary and unpublished property of
// INOVx Solutions, Inc.  It may NOT be copied in part or in whole on any
// medium, either electronic or printed, without the express written consent
// of INOVx Solutions, Inc.
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ReactDOM = require("react-dom");
var RoleApp = require("./components/RoleApp");
try {
    InovxLoader.updateHelp('organization-roles');
}
catch (e) {
}
ReactDOM.render(React.createElement(RoleApp, null), document.getElementById('roleapp'));

},{"./components/RoleApp":3,"react":"react","react-dom":"react-dom"}],2:[function(require,module,exports){
"use strict";
// This file is only a template for actions.  Copy and paste this to your application's actions .ts file and start off from there
// Rename all things with App_Name.
// Naming convention for actions is "[App Name]Actions.ts" i.e. UsersActions.ts, EntitlementActions.ts
var Inovx = require("shared.web.client");
var RoleConstants = require('./../constants/RoleConstants');
var RoleServices = require('./../services/RoleServices');
var RoleStore = require('./../stores/RoleStore');
var SystemActions = Inovx.Shared.System.Actions;
var SystemStore = Inovx.Shared.System.Store;
var FormHelper = Inovx.Shared.Common.FormHelper;
function _finishEdit() {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: RoleConstants.ROLE_FINISH_EDIT
    });
}
function _receiveAllRoles(data) {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: RoleConstants.ROLE_GET_ALL,
        data: data
    });
}
function sendInvalidSave() {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: RoleConstants.ROLE_INVALID_ADD
    });
}
var RoleActions = {
    getAllRoles: function (callback, errorCallback, ignoreDefaultError) {
        RoleServices.getAll(function (data) {
            if (callback !== undefined && callback != null) {
                callback();
            }
            _receiveAllRoles(data);
        }, function (error) {
            if (errorCallback) {
                errorCallback(error);
            }
        }, ignoreDefaultError);
    },
    beginAdd: function () {
        Inovx.Shared.Flux.AppDispatcher.dispatch({
            actionType: RoleConstants.ROLE_BEGIN_ADD
        });
    },
    createRole: function (callback) {
        if (RoleStore.getIsValidObject(RoleConstants.ROLE_ADD_FORM)) {
            if (!SystemStore.isActionInProgress(RoleConstants.ROLE_ADD)) {
                SystemActions.beginAction(RoleConstants.ROLE_ADD);
                RoleServices.createRole(FormHelper.trim(RoleStore.getRole()), function () {
                    RoleActions.refreshData();
                    if (callback !== undefined && callback != null) {
                        callback();
                    }
                    _finishEdit();
                    SystemActions.endAction(RoleConstants.ROLE_ADD);
                }, function (error) {
                    SystemActions.endAction(RoleConstants.ROLE_ADD);
                });
            }
        }
        else {
            sendInvalidSave();
        }
    },
    beginEdit: function (role) {
        RoleServices.getRoleDetail(role.ID, function (role) {
            Inovx.Shared.Flux.AppDispatcher.dispatch({
                actionType: RoleConstants.ROLE_BEGIN_EDIT,
                role: role
            });
        }, function (error) {
        });
    },
    editRole: function (callback) {
        if (RoleStore.getIsValidObject(RoleConstants.ROLE_ADD_FORM)) {
            if (!SystemStore.isActionInProgress(RoleConstants.ROLE_EDIT)) {
                SystemActions.beginAction(RoleConstants.ROLE_EDIT);
                RoleServices.editRole(FormHelper.trim(RoleStore.getRole()), function (data) {
                    RoleActions.refreshData();
                    if (callback !== undefined && callback != null) {
                        callback();
                    }
                    _finishEdit();
                    SystemActions.endAction(RoleConstants.ROLE_EDIT);
                }, function (error) {
                    SystemActions.endAction(RoleConstants.ROLE_EDIT);
                });
            }
        }
        else {
            sendInvalidSave();
        }
    },
    finishEdit: function () {
        if (RoleStore.getHasChanges()) {
            var callbackFunct = RoleStore.getIsEditing() ? RoleActions.editRole : RoleActions.createRole;
            SystemActions.displaySaveChangesDialog({
                message: InovxLoader.t("common:msgBox.saveChanges"),
                confirmCallback: callbackFunct,
                cancelCallback: _finishEdit
            });
        }
        else {
            _finishEdit();
        }
    },
    deleteRole: function (role, callback) {
        if (!SystemStore.isActionInProgress(RoleConstants.ROLE_DELETE)) {
            SystemActions.beginAction(RoleConstants.ROLE_DELETE);
            RoleServices.deleteRole(role, function () {
                RoleActions.refreshData();
                if (callback !== undefined && callback != null) {
                    callback();
                }
                SystemActions.endAction(RoleConstants.ROLE_DELETE);
            }, function (error) {
                SystemActions.endAction(RoleConstants.ROLE_DELETE);
            });
        }
    },
    editCurrentRole: function (comp, key, value) {
        Inovx.Shared.Flux.AppDispatcher.dispatch({
            actionType: RoleConstants.ROLE_UPDATE_EDIT,
            component: comp,
            key: key,
            value: value
        });
    },
    addUsers: function (users) {
        Inovx.Shared.Flux.AppDispatcher.dispatch({
            actionType: RoleConstants.ROLE_ADD_USER,
            users: users
        });
    },
    deleteAuthorizedUser: function (user) {
        Inovx.Shared.Flux.AppDispatcher.dispatch({
            actionType: RoleConstants.ROLE_DELETE_USER,
            user: user
        });
    },
    refreshData: function () {
        this.getAllRoles();
    }
};
module.exports = RoleActions;

},{"./../constants/RoleConstants":5,"./../services/RoleServices":6,"./../stores/RoleStore":7,"shared.web.client":"shared.web.client"}],3:[function(require,module,exports){
"use strict";
// This file is only a template for BaseAppComponents.  Copy and paste this to your application .tsx file and start off from there
// Rename all things with App_Name.
// Naming convention for BaseAppComponents is "[App Name]App.tsx" i.e. UsersApp.tsx, EntitlementApp.tsx
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var React = require("react");
var Inovx = require("shared.web.client");
var RoleForm = require("./RoleForm");
var RoleStore = require("./../stores/RoleStore");
var RoleActions = require("./../actions/RoleActions");
var RoleConstants = require("./../constants/RoleConstants");
var SystemActions = Inovx.Shared.System.Actions;
var SystemStore = Inovx.Shared.System.Store;
var UrlUtilities = Inovx.Shared.Common.UrlUtilities;
function getRoleState() {
    return {
        allRoles: RoleStore.getAll(),
        modalVisible: RoleStore.getModalVisible(),
        isActionInProgress: SystemStore.isActionInProgress(RoleConstants.ROLE_DELETE)
    };
}
var Role = /** @class */ (function (_super) {
    __extends(Role, _super);
    function Role(props, context) {
        var _this = _super.call(this, 'role', props, context) || this;
        _this._initialize = function () {
            RoleActions.getAllRoles(function () {
                _this._appLoaded = true;
            }, function (error) {
                _this._handlePermissionError(error);
            }, true);
        };
        _this._addRole = function () {
            RoleActions.beginAdd();
        };
        _this._beginEditRole = function (e, role) {
            RoleActions.beginEdit(role);
        };
        _this._deleteRole = function (e, role) {
            var messageObject = {
                message: InovxLoader.t('role:message.confirmDelete'),
                confirmCallback: function () {
                    RoleActions.deleteRole(role, null);
                }
            };
            SystemActions.displayConfirmationMessage(messageObject);
        };
        _this._hideModal = function () {
            RoleActions.finishEdit();
        };
        _this._onChange = function () {
            _this.setState(getRoleState());
        };
        _this._onSystemChange = function () {
            _this.setState({ isActionInProgress: SystemStore.isActionInProgress(RoleConstants.ROLE_DELETE) });
        };
        _this.state = getRoleState();
        return _this;
    }
    Role.prototype.componentWillMount = function () {
        this.componentWillMountBase();
    };
    Role.prototype.componentDidMount = function () {
        RoleStore.addChangeListener(this._onChange);
        SystemStore.addChangeListener(this._onSystemChange);
    };
    Role.prototype.componentWillUnmount = function () {
        RoleStore.removeChangeListener(this._onChange);
        SystemStore.addChangeListener(this._onSystemChange);
    };
    Role.prototype.render = function () {
        var iconHeaderProps = {
            iconUrl: "".concat(UrlUtilities.getBaseApplicationUrl(), "/images/OrganizationRoles.png"),
            iconAtt: { alt: "Organization Roles" },
            title: InovxLoader.t("role:header.organizationRoles"),
            rcClass: "cd-btn add-btn",
            onClick: this._addRole,
            btnUrl: "".concat(UrlUtilities.getBaseApplicationUrl(), "/images/addOrganizationRole.png"),
            btnAtt: {
                alt: InovxLoader.t("role:header.newRole"),
                title: InovxLoader.t("role:header.newRole"),
                id: 'roleApp-add-btn'
            }
        };
        var columns = [{
                field: "Name",
                headerText: InovxLoader.t("role:common.roleName"),
                width: "35%",
                type: "string"
            }, {
                field: "Description",
                headerText: InovxLoader.t("role:common.description"),
                type: "string"
            }];
        var dataSource = this.state.allRoles;
        var defaultSort = [{
                field: "Name",
                dir: "ascending"
            }];
        var commands = {
            headerText: InovxLoader.t("role:common.actions"),
            command: [{
                    iconClassName: "glyphicon glyphicon-pencil",
                    click: this._beginEditRole
                }, {
                    iconClassName: "glyphicon glyphicon-trash",
                    click: this._deleteRole
                }],
            width: "85px"
        };
        return (React.createElement(Inovx.Shared.Core.ReactLoader, { appReady: this.isAppLoaded(), errorStatus: this._errorStatus },
            React.createElement("div", { className: "role-app-content" },
                React.createElement(Inovx.Shared.Controls.If, { condition: this.state.isActionInProgress, class: 'temp-modal-loader' },
                    React.createElement("div", { className: "action-in-progress-loader-lrg" })),
                React.createElement(Inovx.Shared.Layout.IconHeader, __assign({}, iconHeaderProps)),
                React.createElement(Inovx.Shared.Controls.Grid, { dataSource: dataSource, commands: commands, columns: columns, defaultSort: defaultSort, pageable: { pageCount: 5, pageSizes: [10, 20, 50], pageSize: 10 }, sort: true, filter: true })),
            React.createElement(Inovx.Shared.Controls.ModalSlider, { isOpen: this.state.modalVisible, onClose: this._hideModal },
                React.createElement(RoleForm, null))));
    };
    return Role;
}(Inovx.Shared.ReactExt.BaseAppComponent));
module.exports = Role;

},{"./../actions/RoleActions":2,"./../constants/RoleConstants":5,"./../stores/RoleStore":7,"./RoleForm":4,"react":"react","shared.web.client":"shared.web.client"}],4:[function(require,module,exports){
"use strict";
// A '.tsx' file enables JSX support in the TypeScript compiler, 
// for more information see the following page on the TypeScript wiki:
// https://github.com/Microsoft/TypeScript/wiki/JSX
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var React = require("react");
var Inovx = require("shared.web.client");
var RoleActions = require("./../actions/RoleActions");
var RoleStore = require("./../stores/RoleStore");
var RoleConstants = require("./../constants/RoleConstants");
var SystemActions = Inovx.Shared.System.Actions;
var SystemStore = Inovx.Shared.System.Store;
var InovxControls = Inovx.Shared.Controls;
var UrlUtilities = Inovx.Shared.Common.UrlUtilities;
function getIsActionInProgress() {
    return SystemStore.isActionInProgress(RoleConstants.ROLE_ADD) ||
        SystemStore.isActionInProgress(RoleConstants.ROLE_EDIT);
}
var _actionInProgressMsg;
function getRoleFormState() {
    return {
        isAdding: RoleStore.getIsAdding(),
        isEditing: RoleStore.getIsEditing(),
        allRoles: RoleStore.getAll(),
        role: RoleStore.getRole(),
        isActionInProgress: getIsActionInProgress(),
        actionInProgressMsg: _actionInProgressMsg,
        validation: RoleStore.getValidation(RoleConstants.ROLE_ADD_FORM)
    };
}
var RoleForm = /** @class */ (function (_super) {
    __extends(RoleForm, _super);
    function RoleForm(props) {
        var _this = _super.call(this, props) || this;
        _this._validateUser = function () {
            var form = _this.refs["assignUser"];
            if (form.isValid(_this._isEmptyOrNull)) {
                return true;
            }
            return false;
        };
        _this._roleHasUser = function (userName, authorizedUsers) {
            for (var index in authorizedUsers) {
                if (authorizedUsers[index].UserName == userName) {
                    return true;
                }
            }
            ;
            return false;
        };
        _this._assignUserToRole = function (users) {
            if (users.length > 0) {
                RoleActions.addUsers(users);
            }
        };
        _this._deleteAuthorizedUser = function (e, user) {
            RoleActions.deleteAuthorizedUser(user);
        };
        _this._isEmptyOrNull = function (value) {
            return value && value.trim().length > 0;
        };
        _this._saveRole = function () {
            if (_this.state.isAdding) {
                RoleActions.createRole();
            }
            else {
                RoleActions.editRole();
            }
        };
        _this._cancel = function () {
            RoleActions.finishEdit();
        };
        _this._loadState = function () {
            _this.setState(getRoleFormState());
        };
        _this._onChange = function (event) {
            RoleActions.editCurrentRole(RoleConstants.ROLE_ADD_FORM, event.target.name, event.target.value);
        };
        _this._systemChange = function () {
            _this.setState({ isActionInProgress: getIsActionInProgress() });
        };
        _this._checkForUnsavedChanges = function (event) {
            if (RoleStore.getHasChanges()) {
                event.returnValue = InovxLoader.t("common:msgBox.browserSaveChanges");
            }
            ;
        };
        _this.state = getRoleFormState();
        _actionInProgressMsg = InovxLoader.t("role:form.saving");
        return _this;
    }
    RoleForm.prototype.componentDidMount = function () {
        RoleStore.addChangeListener(this._loadState);
        SystemStore.addChangeListener(this._systemChange);
        window.addEventListener('beforeunload', this._checkForUnsavedChanges);
    };
    RoleForm.prototype.componentWillUnmount = function () {
        RoleStore.removeChangeListener(this._loadState);
        SystemStore.removeChangeListener(this._systemChange);
        window.removeEventListener('beforeunload', this._checkForUnsavedChanges);
    };
    RoleForm.prototype.render = function () {
        var inputObj = {
            className: 'form-control',
            type: 'text'
        };
        var role = this.state.role;
        var roleNameInput = jQuery.extend({
            name: 'Name',
            id: 'roleApp-name-input',
            value: role.Name
        }, inputObj);
        var roleDescriptionInput = jQuery.extend({
            name: 'Description',
            id: 'roleApp-desc-input',
            value: role.Description
        }, inputObj);
        var header = this.state.isAdding ? InovxLoader.t('role:header.newRole') : InovxLoader.t('role:header.editRole');
        var columns = [{
                field: "UserName",
                headerText: InovxLoader.t("role:form.userName"),
                width: "40%"
            }, {
                field: "Enabled",
                headerText: InovxLoader.t("role:form.userStatus"),
                values: [
                    { value: true, text: InovxLoader.t("role:common.enabled") },
                    { value: false, text: InovxLoader.t("role:common.disabled") }
                ]
            }];
        var userDataSource = this.state.role.Users;
        var userDefaultSort = [{
                field: "UserName",
                dir: "ascending"
            }];
        var userCommands = {
            headerText: InovxLoader.t("role:common.actions"),
            command: [{
                    iconClassName: 'glyphicon glyphicon-trash',
                    click: this._deleteAuthorizedUser
                }],
            width: "85px",
        };
        return (React.createElement(InovxControls.StaticHeaderForm, { title: header, saveOnClick: this._saveRole, saveBtnId: "roleApp-save-btn", cancelOnClick: this._cancel, cancelBtnId: "roleApp-cancel-btn", isActionInProgress: this.state.isActionInProgress, inProgressMessage: this.state.actionInProgressMsg },
            React.createElement(InovxControls.FormField, { title: "".concat(InovxLoader.t("role:common.roleName"), "*"), inputName: 'Name' },
                React.createElement(InovxControls.ValidationInput, __assign({}, roleNameInput, { className: "form-control", onChange: this._onChange, validation: this.state.validation['Name'] }))),
            React.createElement(InovxControls.FormField, { title: InovxLoader.t("role:common.description"), inputName: 'Description' },
                React.createElement("textarea", __assign({}, roleDescriptionInput, { onChange: this._onChange }))),
            React.createElement(InovxControls.FormField, { title: InovxLoader.t("role:form.assignUsers"), inputName: 'AssignUsers' },
                React.createElement(InovxControls.MultiSelect, { minLength: 1, displayProp: "UserName", url: "".concat(UrlUtilities.getApiUrl(), "/RoleApi/api/user/SearchUsers"), onClick: this._assignUserToRole, parameters: { maxNumberOfResults: 5 }, numParameter: 'maxNumberOfResults', searchProperty: 'searchString', btnLabel: InovxLoader.t("role:form.add"), keyProp: "UserID" })),
            React.createElement(Inovx.Shared.Controls.Grid, { dataSource: userDataSource, commands: userCommands, columns: columns, defaultSort: userDefaultSort, sort: true })));
    };
    return RoleForm;
}(React.Component));
module.exports = RoleForm;

},{"./../actions/RoleActions":2,"./../constants/RoleConstants":5,"./../stores/RoleStore":7,"react":"react","shared.web.client":"shared.web.client"}],5:[function(require,module,exports){
"use strict";
// This file is only a template for constants.  Copy and paste this to your application's constants .ts file and start off from there
// Rename all things with App_Name.
// Naming convention for constants is "[App Name]Constants.ts" i.e. UsersConstants.ts, EntitlementConstants.ts
var keymirror = require("fbjs/lib/keymirror");
// convention for constants is
// [App_Name]_[Action]
var RoleConstants = keymirror({
    ROLE_ADD_FORM: null,
    ROLE_INVALID_ADD: null,
    ROLE_GET_ALL: null,
    ROLE_GET_DETAIL: null,
    ROLE_BEGIN_ADD: null,
    ROLE_BEGIN_EDIT: null,
    ROLE_FINISH_EDIT: null,
    ROLE_UPDATE_EDIT: null,
    ROLE_DELETE: null,
    ROLE_ADD: null,
    ROLE_EDIT: null,
    ROLE_ADD_USER: null,
    ROLE_DELETE_USER: null
});
module.exports = RoleConstants;

},{"fbjs/lib/keymirror":"fbjs/lib/keymirror"}],6:[function(require,module,exports){
"use strict";
// This file is only a template for services.  Copy and paste this to your application's service .ts file and start off from there
// Rename all things with App_Name.
// Naming convention for services is "[App Name]Services.ts" i.e. UsersServices.ts, EntitlementServices.ts
var Inovx = require("shared.web.client");
var assign = require("object-assign");
var UrlUtilities = Inovx.Shared.Common.UrlUtilities;
var url = UrlUtilities.getApiUrl() + '/RoleApi/api/role';
var RoleServices = assign({}, Inovx.Shared.Flux.BaseService, {
    //Replace method accordingly
    getAll: function (successCallback, errorCallback, ignoreDefaultError) {
        var _this = this;
        this.get(url, null, function (retData) {
            successCallback(retData);
        }, function (error) {
            if (!ignoreDefaultError) {
                _this.handleWebApiError(error);
            }
            errorCallback(error);
        });
    },
    getRoleDetail: function (id, successCallback, errorCallback) {
        var _this = this;
        this.get("".concat(url, "/").concat(id), null, function (retData) {
            successCallback(retData);
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    },
    createRole: function (role, successCallback, errorCallback) {
        var _this = this;
        this.post("".concat(url, "/Create"), role, function (retData) {
            successCallback(retData);
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    },
    editRole: function (role, successCallback, errorCallback) {
        var _this = this;
        this.post("".concat(url, "/Update"), role, function (retData) {
            successCallback(retData);
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    },
    deleteRole: function (role, successCallback, errorCallback) {
        var _this = this;
        this.post("".concat(url, "/Delete"), { ID: role.ID, VersionToken: role.VersionToken }, function () {
            successCallback();
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    }
});
module.exports = RoleServices;

},{"object-assign":9,"shared.web.client":"shared.web.client"}],7:[function(require,module,exports){
"use strict";
// This file is only a template for Stores.  Copy and paste this to your application store .ts file and start off from there
// Rename all things with App_Name.
// Naming convention for Stores is "[App Name]Store.ts" i.e. UserStore.ts, EntitlementStore.ts
var NodeEvents = require("events");
var Inovx = require("shared.web.client");
var RoleConstants = require("./../constants/RoleConstants");
var assign = require("object-assign");
var EventEmitter = NodeEvents.EventEmitter;
var CommonMessages = Inovx.Shared.Common.CommonMessages;
var CHANGE_EVENT = 'Role.change';
var FORM_ADD_ROLE_NAME = RoleConstants.ROLE_ADD_FORM;
var _roles = [], _role = getBlankRole(), _modalVisible = false, _beginAdd = false, _beginEdit = false, _hasChanges = false, _validation = {};
function setAddingRole() {
    _beginAdd = _modalVisible = true;
    _beginEdit = false;
    _hasChanges = false;
    _role = getBlankRole();
    _initalizeValidation(FORM_ADD_ROLE_NAME);
}
function setEditingRole(role) {
    _modalVisible = _beginEdit = true;
    _beginAdd = false;
    _hasChanges = false;
    _role = $.extend({}, role);
    _initalizeValidation(FORM_ADD_ROLE_NAME);
}
function _initalizeValidation(comp) {
    switch (comp) {
        case FORM_ADD_ROLE_NAME:
            var valiObj = _validation[FORM_ADD_ROLE_NAME] = {};
            for (var k in _role) {
                _setValidValidation(FORM_ADD_ROLE_NAME, k);
            }
            break;
    }
}
function _setValidValidation(comp, name) {
    if (_validation[comp][name]) {
        _validation[comp][name].invalidInput = false;
        _validation[comp][name].invalidValue = false;
    }
    else {
        _validation[comp][name] = _getNewValidationObject();
    }
}
function _getNewValidationObject() {
    return {
        invalidInput: false,
        invalidValue: false
    };
}
function _validate(comp) {
    switch (comp) {
        case FORM_ADD_ROLE_NAME:
            return _validateObject(comp, _role);
    }
    return false;
}
function _ensureValidObject(comp, obj) {
    for (var k in obj) {
        switch (comp) {
            case FORM_ADD_ROLE_NAME:
                var objType = typeof (obj[k]);
                if (objType !== 'function') {
                    if (obj[k] === null || objType !== 'object') {
                        _updateChanges(k, obj[k]);
                    }
                    else {
                        _ensureValidObject(comp, obj[k]);
                    }
                }
        }
    }
}
function _validateObject(comp, obj) {
    _ensureValidObject(comp, obj);
    var ret = true;
    for (var k in _validation[FORM_ADD_ROLE_NAME]) {
        if (_validation[FORM_ADD_ROLE_NAME][k].invalidValue) {
            return false;
        }
    }
    return ret;
}
function _updateChanges(name, value) {
    switch (name) {
        case "Name":
            _role[name] = value;
            if (value) {
                var dupName = false;
                for (var i = 0; i < _roles.length; i++) {
                    if (_role.Name.toUpperCase() === _roles[i].Name.toUpperCase()
                        && _role.ID.toUpperCase() !== _roles[i].ID.toUpperCase()) {
                        dupName = true;
                        break;
                    }
                }
                if (dupName) {
                    _validation[FORM_ADD_ROLE_NAME][name].invalidValue = true;
                    _validation[FORM_ADD_ROLE_NAME][name].invalidValueMessage = InovxLoader.t("role:message.invalidRole");
                }
                else {
                    _setValidValidation(FORM_ADD_ROLE_NAME, name);
                }
            }
            else {
                _validation[FORM_ADD_ROLE_NAME][name].invalidValue = true;
                _validation[FORM_ADD_ROLE_NAME][name].invalidValueMessage = CommonMessages.Validation.Required;
            }
            break;
        default:
            if (name != 'ID' && name != 'VersionToken') {
                _role[name] = value;
            }
            _setValidValidation(FORM_ADD_ROLE_NAME, name);
            break;
    }
}
function finishedEditingRole() {
    _modalVisible = false;
    _hasChanges = false;
}
function updateCurrentRole(comp, key, value) {
    switch (comp) {
        case FORM_ADD_ROLE_NAME:
            _updateChanges(key, value);
            _hasChanges = true;
            break;
    }
}
function addUsers(users) {
    for (var indx in users) {
        var exists = false;
        for (var grpIndx in _role.Users) {
            if (users[indx].UserID === _role.Users[grpIndx].UserID) {
                exists = true;
                break;
            }
        }
        if (!exists) {
            _role.Users.push(users[indx]);
        }
    }
    _hasChanges = true;
}
function deleteAuthorizedUser(user) {
    var authorizedUsers = _role.Users;
    for (var index in authorizedUsers) {
        if (authorizedUsers[index].UserName == user.UserName) {
            authorizedUsers.splice(index, 1);
            _hasChanges = true;
        }
    }
}
function loadAllRoles(data) {
    _roles = data;
}
function getBlankRole() {
    return { ID: "", VersionToken: "", Name: "", Description: "", Users: [] };
}
function getBlankUser() {
    return { UserID: null, UserName: null, UserVersionToken: null, FirstName: null, LastName: null, Enabled: null };
}
var RoleStore = assign({}, EventEmitter.prototype, {
    // Add store getters here
    getAll: function () {
        return _roles;
    },
    getRole: function () {
        return _role;
    },
    getIsAdding: function () {
        return _beginAdd;
    },
    getIsEditing: function () {
        return _beginEdit;
    },
    getModalVisible: function () {
        return _modalVisible;
    },
    getHasChanges: function () {
        return _hasChanges;
    },
    getValidation: function (key) {
        return _validation[key];
    },
    getIsValidObject: function (key) {
        return _validate(key);
    },
    emitChange: function () {
        this.emit(CHANGE_EVENT);
    },
    addChangeListener: function (callback) {
        this.on(CHANGE_EVENT, callback);
    },
    removeChangeListener: function (callback) {
        this.removeListener(CHANGE_EVENT, callback);
    }
});
Inovx.Shared.Flux.AppDispatcher.register(function (payload) {
    switch (payload.actionType) {
        case RoleConstants.ROLE_GET_ALL:
            loadAllRoles(payload.data);
            break;
        case RoleConstants.ROLE_BEGIN_ADD:
            setAddingRole();
            break;
        case RoleConstants.ROLE_BEGIN_EDIT:
            setEditingRole(payload.role);
            break;
        case RoleConstants.ROLE_FINISH_EDIT:
            finishedEditingRole();
            break;
        case RoleConstants.ROLE_UPDATE_EDIT:
            updateCurrentRole(payload.component, payload.key, payload.value);
            break;
        case RoleConstants.ROLE_ADD_USER:
            addUsers(payload.users);
            break;
        case RoleConstants.ROLE_DELETE_USER:
            deleteAuthorizedUser(payload.user);
            break;
        case RoleConstants.ROLE_INVALID_ADD:
            break;
        default: return true;
    }
    RoleStore.emitChange();
    return true;
});
module.exports = RoleStore;

},{"./../constants/RoleConstants":5,"events":8,"object-assign":9,"shared.web.client":"shared.web.client"}],8:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var objectCreate = Object.create || objectCreatePolyfill
var objectKeys = Object.keys || objectKeysPolyfill
var bind = Function.prototype.bind || functionBindPolyfill

function EventEmitter() {
  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
    this._events = objectCreate(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

var hasDefineProperty;
try {
  var o = {};
  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
  hasDefineProperty = o.x === 0;
} catch (err) { hasDefineProperty = false }
if (hasDefineProperty) {
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      // check whether the input is a positive number (whose value is zero or
      // greater and not a NaN).
      if (typeof arg !== 'number' || arg < 0 || arg !== arg)
        throw new TypeError('"defaultMaxListeners" must be a positive number');
      defaultMaxListeners = arg;
    }
  });
} else {
  EventEmitter.defaultMaxListeners = defaultMaxListeners;
}

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    if (arguments.length > 1)
      er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Unhandled "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
      // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
      // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = objectCreate(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
          listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
            existing.length + ' "' + String(type) + '" listeners ' +
            'added. Use emitter.setMaxListeners() to ' +
            'increase limit.');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        if (typeof console === 'object' && console.warn) {
          console.warn('%s: %s', w.name, w.message);
        }
      }
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    switch (arguments.length) {
      case 0:
        return this.listener.call(this.target);
      case 1:
        return this.listener.call(this.target, arguments[0]);
      case 2:
        return this.listener.call(this.target, arguments[0], arguments[1]);
      case 3:
        return this.listener.call(this.target, arguments[0], arguments[1],
            arguments[2]);
      default:
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i)
          args[i] = arguments[i];
        this.listener.apply(this.target, args);
    }
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = bind.call(onceWrapper, state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = objectCreate(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else
          spliceOne(list, position);

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (!events)
    return [];

  var evlistener = events[type];
  if (!evlistener)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function objectCreatePolyfill(proto) {
  var F = function() {};
  F.prototype = proto;
  return new F;
}
function objectKeysPolyfill(obj) {
  var keys = [];
  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
    keys.push(k);
  }
  return k;
}
function functionBindPolyfill(context) {
  var fn = this;
  return function () {
    return fn.apply(context, arguments);
  };
}

},{}],9:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
