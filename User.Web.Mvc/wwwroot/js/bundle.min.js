(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
// A ‘.tsx’ file enables JSX support in the TypeScript compiler, 
// for more information see the following page on the TypeScript wiki:
// https://github.com/Microsoft/TypeScript/wiki/JSX
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ReactDOM = require("react-dom");
var UserApp = require("./components/UserApp");
try {
    InovxLoader.updateHelp('users');
}
catch (e) {
}
ReactDOM.render(React.createElement(UserApp, null), document.getElementById('userapp'));

},{"./components/UserApp":4,"react":"react","react-dom":"react-dom"}],2:[function(require,module,exports){
"use strict";
// A ‘.tsx’ file enables JSX support in the TypeScript compiler, 
// for more information see the following page on the TypeScript wiki:
// https://github.com/Microsoft/TypeScript/wiki/JSX
var Inovx = require("shared.web.client");
var UserConstants = require('./../constants/UserConstants');
var UserServices = require('./../services/UserServices');
var SettingsService = require('./../services/SettingsService');
var UserStore = require('./../stores/UserStore');
var SystemActions = Inovx.Shared.System.Actions;
var SystemStore = Inovx.Shared.System.Store;
function receiveData(data) {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: UserConstants.USER_RECIEVE_DATA,
        data: data
    });
}
function receiveHint(data, callback) {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: UserConstants.USER_RECIEVE_HINT,
        data: data,
        callback: callback
    });
}
function receiveCurrentUser(data, callback) {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: UserConstants.USER_RECIEVE_CURRENT,
        data: data,
        callback: callback
    });
}
function _finishEdit() {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: UserConstants.FINISH_EDIT
    });
}
function _hideSettings() {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: UserConstants.HIDE_SETTINGS_MENU
    });
}
function sendInvalidSave() {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: UserConstants.USER_FORM_INVALID_SAVE
    });
}
function sendValidationError(comp, error) {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: UserConstants.USER_VALIDATION_ERROR,
        messageObj: error,
        component: comp
    });
}
function sendBeginEdit(user, roles, entitlement) {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: user ? UserConstants.BEGIN_EDIT_USER : UserConstants.BEGIN_USER_ADD,
        user: user,
        entitlement: entitlement,
        role: roles
    });
}
function getEntitlementList(cbFn, errorCbFn, ignoreDefault) {
    UserServices.getEntitlements(function (entitlement) {
        cbFn(entitlement);
    }, function (error) {
        errorCbFn(error);
    }, ignoreDefault);
}
function getRolesList(cbFn, errorCbFn, ignoreDefault) {
    UserServices.getRoles(function (roles) {
        cbFn(roles);
    }, function (error) {
        errorCbFn(error);
    }, ignoreDefault);
}
function getUserSystemSetting(cbFn, errorCbFn, ignoreDefault) {
    SettingsService.getSystemSettings(function (setting) {
        cbFn(setting);
    }, function (error) {
        errorCbFn(error);
    }, ignoreDefault);
}
var UserActions = {
    getAllUsers: function (callback, errorCallback, ignoreDefaultError) {
        UserServices.getAll(function (data) {
            if (callback !== 'undefined' && callback != null) {
                callback();
            }
            receiveData(data);
        }, function (error) {
            if (errorCallback) {
                errorCallback(error);
            }
        }, ignoreDefaultError);
    },
    create: function (callback) {
        if (UserStore.getIsValidObject(UserConstants.USER_ADD_FORM)) {
            if (!SystemStore.isActionInProgress(UserConstants.USER_ADD)) {
                SystemActions.beginAction(UserConstants.USER_ADD);
                UserServices.createUser(UserStore.getEditUser(), function () {
                    UserActions.refreshData();
                    if (callback !== undefined && callback != null) {
                        callback();
                    }
                    _finishEdit();
                    SystemActions.endAction(UserConstants.USER_ADD);
                }, function (error) {
                    if (error.messageObj.propertyName) {
                        sendValidationError(UserConstants.USER_ADD_FORM, error.messageObj);
                    }
                    SystemActions.endAction(UserConstants.USER_ADD);
                }, function (error) {
                    return error.messageObj.propertyName ? true : false;
                });
            }
        }
        else {
            sendInvalidSave();
        }
    },
    delete: function (user, callback) {
        if (!SystemStore.isActionInProgress(UserConstants.USER_DELETE)) {
            SystemActions.beginAction(UserConstants.USER_DELETE);
            UserServices.deleteUser(user, function () {
                UserActions.refreshData();
                if (callback !== undefined && callback != null) {
                    callback();
                }
                SystemActions.endAction(UserConstants.USER_DELETE);
            }, function (error) {
                SystemActions.endAction(UserConstants.USER_DELETE);
            });
        }
    },
    edit: function (callback) {
        if (UserStore.getIsValidObject(UserConstants.USER_ADD_FORM)) {
            if (!SystemStore.isActionInProgress(UserConstants.USER_EDIT)) {
                SystemActions.beginAction(UserConstants.USER_EDIT);
                UserServices.editUser(UserStore.getEditUser(), function () {
                    UserActions.refreshData();
                    if (callback !== undefined && callback != null) {
                        callback();
                    }
                    _finishEdit();
                    SystemActions.endAction(UserConstants.USER_EDIT);
                }, function (error) {
                    if (error.messageObj.propertyName) {
                        if (error.messageObj.propertyName == "UserName" && error.messageObj.reason == 'DuplicateDeletedUserName') {
                            var messageObject = {
                                message: InovxLoader.t("users:form.duplicateEmail"),
                                reason: error.messageObj.reason,
                                propertyName: "Email"
                            };
                            sendValidationError(UserConstants.USER_ADD_FORM, messageObject);
                        }
                        else
                            sendValidationError(UserConstants.USER_ADD_FORM, error.messageObj);
                    }
                    SystemActions.endAction(UserConstants.USER_EDIT);
                }, function (error) {
                    return error.messageObj.propertyName ? true : false;
                });
            }
        }
        else {
            sendInvalidSave();
        }
    },
    changePassword: function (user, password, callback, errorCallback) {
        if (!SystemStore.isActionInProgress(UserConstants.USER_CHANGE_PASSWORD)) {
            SystemActions.beginAction(UserConstants.USER_CHANGE_PASSWORD);
            UserServices.changePassword(user, password, function (updatedUser) {
                Inovx.Shared.Flux.AppDispatcher.dispatch({
                    actionType: UserConstants.USER_CHANGE_PASSWORD_SUCCESS,
                    user: updatedUser
                });
                callback();
                SystemActions.endAction(UserConstants.USER_CHANGE_PASSWORD);
            }, function (error) {
                errorCallback(error);
                SystemActions.endAction(UserConstants.USER_CHANGE_PASSWORD);
            }, function (error) {
                return error.messageObj.propertyName ? true : false;
            });
        }
    },
    resetPasswords: function (callback, errorCallback) {
        UserServices.resetPasswords(function () {
            if (callback) {
                callback();
            }
        }, function (error) {
            if (errorCallback) {
                errorCallback(error);
            }
        }, true);
    },
    beginAdd: function () {
        if (!SystemStore.isActionInProgress(UserConstants.BEGIN_USER_ADD)) {
            SystemActions.beginAction(UserConstants.BEGIN_USER_ADD);
            var entitlement_1 = [];
            var roles_1 = [];
            var getRolesCall_1 = function () {
                getRolesList(function (roleData) {
                    roles_1 = roleData;
                    sendBeginEdit(null, roles_1, entitlement_1);
                    SystemActions.endAction(UserConstants.BEGIN_USER_ADD);
                }, function (error) {
                    sendBeginEdit(null, roles_1, entitlement_1);
                    SystemActions.endAction(UserConstants.BEGIN_USER_ADD);
                }, true);
            };
            getEntitlementList(function (entitlementData) {
                entitlement_1 = entitlementData;
                getRolesCall_1();
            }, function (error) {
                getRolesCall_1();
            }, true);
        }
    },
    beginEdit: function (user) {
        if (!SystemStore.isActionInProgress(UserConstants.BEGIN_EDIT_USER)) {
            SystemActions.beginAction(UserConstants.BEGIN_EDIT_USER);
            UserServices.getDetail(user.UserID, function (data) {
                if (!data.EntitlementGroupIDs)
                    data.EntitlementGroupIDs = [];
                if (!data.RoleIDs)
                    data.RoleIDs = [];
                var entitlement = [];
                var roles = [];
                var getRolesCall = function () {
                    getRolesList(function (roleData) {
                        roles = roleData;
                        sendBeginEdit(data, roles, entitlement);
                        SystemActions.endAction(UserConstants.BEGIN_EDIT_USER);
                    }, function (error) {
                        sendBeginEdit(data, roles, entitlement);
                        SystemActions.endAction(UserConstants.BEGIN_EDIT_USER);
                    }, true);
                };
                getEntitlementList(function (entitlementData) {
                    entitlement = entitlementData;
                    getRolesCall();
                }, function (error) {
                    getRolesCall();
                }, true);
            }, function (error) {
                SystemActions.endAction(UserConstants.BEGIN_EDIT_USER);
            });
        }
    },
    selectHint: function (user) {
        Inovx.Shared.Flux.AppDispatcher.dispatch({
            actionType: UserConstants.USER_SELECT_HINT,
            user: user
        });
    },
    finishEdit: function () {
        if (UserStore.getHasChanges()) {
            var callbackFunct = UserActions.create;
            if (UserStore.getIsEditing()) {
                callbackFunct = UserActions.edit;
            }
            SystemActions.displaySaveChangesDialog({
                message: InovxLoader.t("common:msgBox.saveChanges"),
                confirmCallback: callbackFunct,
                cancelCallback: _finishEdit
            });
        }
        else {
            _finishEdit();
        }
    },
    refreshData: function () {
        this.getAllUsers();
    },
    getHint: function (hint, callback) {
        if (!SystemStore.isActionInProgress(UserConstants.USER_CHECK_NAME)) {
            SystemActions.beginAction(UserConstants.USER_CHECK_NAME);
            UserServices.checkName(hint, function (data) {
                receiveHint(data, callback);
                SystemActions.endAction(UserConstants.USER_CHECK_NAME);
            }, function (error) {
                SystemActions.endAction(UserConstants.USER_CHECK_NAME);
            });
        }
    },
    getCurrentUser: function (callback) {
        if (!SystemStore.isActionInProgress(UserConstants.USER_CURRENT_GET)) {
            SystemActions.beginAction(UserConstants.USER_CURRENT_GET);
            UserServices.getCurrentUserDetail(function (data) {
                receiveCurrentUser(data, callback);
                SystemActions.endAction(UserConstants.USER_CURRENT_GET);
            }, function (error) {
                SystemActions.endAction(UserConstants.USER_CURRENT_GET);
            });
        }
    },
    resetLoginAttempts: function (user, callback) {
        if (!SystemStore.isActionInProgress(UserConstants.RESET_LOGIN_ATTEMPTS)) {
            SystemActions.beginAction(UserConstants.RESET_LOGIN_ATTEMPTS);
            UserServices.resetLoginAttempts(user, function () {
                UserServices.getDetail(user.UserID, function (data) {
                    Inovx.Shared.Flux.AppDispatcher.dispatch({
                        actionType: UserConstants.RESET_LOGIN_ATTEMPTS,
                        user: data
                    });
                    if (callback) {
                        callback();
                    }
                    SystemActions.endAction(UserConstants.RESET_LOGIN_ATTEMPTS);
                }, function (error) {
                    SystemActions.endAction(UserConstants.RESET_LOGIN_ATTEMPTS);
                });
            }, function (error) {
                SystemActions.endAction(UserConstants.RESET_LOGIN_ATTEMPTS);
            });
        }
    },
    editCurrentObject: function (comp, key, value) {
        Inovx.Shared.Flux.AppDispatcher.dispatch({
            actionType: UserConstants.USER_UPDATE_OBJECT,
            component: comp,
            key: key,
            value: value
        });
    },
    editCurrentObjectAddToList: function (comp, key, value) {
        Inovx.Shared.Flux.AppDispatcher.dispatch({
            actionType: UserConstants.USER_UPDATE_OBJECT_ADD_LIST,
            component: comp,
            key: key,
            value: value
        });
    },
    editCurrentObjectRemoveFromList: function (comp, key, value) {
        Inovx.Shared.Flux.AppDispatcher.dispatch({
            actionType: UserConstants.USER_UPDATE_OBJECT_REMOVE_LIST,
            component: comp,
            key: key,
            value: value
        });
    },
    hideSettings: function () {
        if (UserStore.getHasChanges()) {
            SystemActions.displaySaveChangesDialog({
                message: InovxLoader.t("common:msgBox.saveChanges"),
                confirmCallback: UserActions.saveSettings,
                cancelCallback: _hideSettings
            });
        }
        else {
            _hideSettings();
        }
    },
    saveSettings: function (errorCallback, ignoreVSuiteLoginError) {
        if (UserStore.getIsValidObject(UserConstants.USER_SETTINGS_FORM)) {
            if (!SystemStore.isActionInProgress(UserConstants.SETTINGS_SAVE)) {
                SystemActions.beginAction(UserConstants.SETTINGS_SAVE);
                SettingsService.saveSettings(UserStore.getSaveFriendlyEditSettings(), function () {
                    _hideSettings();
                    Inovx.Shared.Flux.AppDispatcher.dispatch({
                        actionType: UserConstants.SETTINGS_GET,
                        data: $.extend({}, UserStore.getSaveFriendlyEditSettings()),
                        display: UserStore.getSettingsShown()
                    });
                    SystemActions.endAction(UserConstants.SETTINGS_SAVE);
                }, function (error) {
                    if (errorCallback) {
                        errorCallback(error);
                    }
                    SystemActions.endAction(UserConstants.SETTINGS_SAVE);
                }, ignoreVSuiteLoginError);
            }
        }
        else {
            sendInvalidSave();
        }
    },
    getSettings: function (displaySettings, callback, errorCallback) {
        if (!SystemStore.isActionInProgress(UserConstants.SETTINGS_GET)) {
            SystemActions.beginAction(UserConstants.SETTINGS_GET);
            SettingsService.getSettings(function (data) {
                Inovx.Shared.Flux.AppDispatcher.dispatch({
                    actionType: UserConstants.SETTINGS_GET,
                    data: data,
                    display: displaySettings
                });
                if (callback) {
                    callback();
                }
                SystemActions.endAction(UserConstants.SETTINGS_GET);
            }, function (error) {
                if (errorCallback) {
                    errorCallback(error);
                }
                SystemActions.endAction(UserConstants.SETTINGS_GET);
            });
        }
    },
    getUserSystemPreferences: function (callback, errorCallback) {
        var entitlement = [];
        var roles = [];
        var defaultSetting;
        if (!SystemStore.isActionInProgress(UserConstants.SYSTEM_SETTINGS_GET)) {
            SystemActions.beginAction(UserConstants.SYSTEM_SETTINGS_GET);
            getUserSystemSetting(function (settingData) {
                defaultSetting = settingData;
                getRolesList(function (roleData) {
                    roles = roleData;
                    getEntitlementList(function (entitlementData) {
                        entitlement = entitlementData;
                        var data = {
                            DefaultSytemSetting: defaultSetting,
                            AllGroups: entitlement,
                            AllRoles: roles
                        };
                        callback(data);
                        SystemActions.endAction(UserConstants.SYSTEM_SETTINGS_GET);
                    }, function (error) {
                        if (errorCallback) {
                            errorCallback(error);
                        }
                        SystemActions.endAction(UserConstants.SYSTEM_SETTINGS_GET);
                    }, true);
                }, function (error) {
                    if (errorCallback) {
                        errorCallback(error);
                    }
                    SystemActions.endAction(UserConstants.SYSTEM_SETTINGS_GET);
                }, true);
            }, function (error) {
                if (errorCallback) {
                    errorCallback(error);
                }
                SystemActions.endAction(UserConstants.SYSTEM_SETTINGS_GET);
            }, true);
        }
    },
    saveSystemSettings: function (systemSetting, callback, errorCallback) {
        if (!SystemStore.isActionInProgress(UserConstants.SYSTEM_SETTINGS_SAVE)) {
            SystemActions.beginAction(UserConstants.SYSTEM_SETTINGS_SAVE);
            SettingsService.saveSystemSettings(systemSetting, function () {
                if (callback !== undefined) {
                    callback();
                }
                SystemActions.endAction(UserConstants.SYSTEM_SETTINGS_SAVE);
            }, function (error) {
                if (errorCallback) {
                    errorCallback(error);
                }
                SystemActions.endAction(UserConstants.SYSTEM_SETTINGS_SAVE);
            });
        }
    }
};
module.exports = UserActions;

},{"./../constants/UserConstants":12,"./../services/SettingsService":14,"./../services/UserServices":15,"./../stores/UserStore":16,"shared.web.client":"shared.web.client"}],3:[function(require,module,exports){
"use strict";
// A ‘.tsx’ file enables JSX support in the TypeScript compiler, 
// for more information see the following page on the TypeScript wiki:
// https://github.com/Microsoft/TypeScript/wiki/JSX
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var React = require("react");
var Inovx = require("shared.web.client");
var UserActions = require("./../actions/UserActions");
var InovxControls = Inovx.Shared.Controls;
var ChangeUserPassword = /** @class */ (function (_super) {
    __extends(ChangeUserPassword, _super);
    function ChangeUserPassword(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this._user = {};
        _this._changePassword = function () {
            var curState = _this._cloneState(_this.state);
            if (_this._validatePasswordState(curState)) {
                _this.setState(curState);
                var that = _this;
                UserActions.changePassword(_this.props.User, _this.state.newPassword, _this.props.onPasswordChanged, function (error) {
                    if (error.messageObj.propertyName) {
                        that.setState({
                            validation: {
                                invalidValue: true,
                                invalidValueMessage: error.messageObj.message,
                                invalidInput: false,
                                invalidInputMessage: ""
                            }
                        });
                    }
                });
            }
            else {
                _this.setState(curState);
            }
        };
        _this._validatePasswordState = function (state) {
            if (state.newPassword !== state.confirmPassword) {
                state.validation.invalidValueMessage = InovxLoader.t("users:form.passwordMustMatch");
                state.validation.invalidValue = true;
                return false;
            }
            else if (!state.newPassword) {
                state.validation.invalidValueMessage = Inovx.Shared.Common.CommonMessages.Validation.Required;
                state.validation.invalidValue = true;
                return false;
            }
            else {
                state.validation.invalidValue = false;
                return true;
            }
        };
        _this._onPasswordChanged = function (event) {
            var newState = _this._cloneState(_this.state);
            newState.newPassword = event.target.value;
            _this._validatePasswordState(newState);
            _this.setState(newState);
        };
        _this._onConfirmChanged = function (event) {
            var newState = _this._cloneState(_this.state);
            newState.confirmPassword = event.target.value;
            _this._validatePasswordState(newState);
            _this.setState(newState);
        };
        _this._cloneState = function (state) {
            return {
                newPassword: state.newPassword,
                confirmPassword: state.confirmPassword,
                validation: {
                    invalidInput: state.validation.invalidInput,
                    invalidValue: state.validation.invalidValue,
                    invalidInputMessage: state.validation.invalidInputMessage,
                    invalidValueMessage: state.validation.invalidValueMessage
                }
            };
        };
        _this.state = {
            validation: { invalidInput: false, invalidValue: false, invalidInputMessage: "", invalidValueMessage: "" },
            newPassword: "",
            confirmPassword: ""
        };
        return _this;
    }
    ChangeUserPassword.prototype.render = function () {
        var passwordInput = {
            className: 'form-control',
            type: 'password',
            name: 'Password'
        };
        return (React.createElement("div", { className: "panel panel-primary user-change-password" },
            React.createElement("div", { className: "panel-heading" }, InovxLoader.t('users:form.changePasswordHeader')),
            React.createElement("div", { className: "panel-body fc-margin" },
                (this.props.message != null) && React.createElement("p", null, this.props.message),
                React.createElement(InovxControls.FormField, { title: "".concat(InovxLoader.t("users:form.newPassword"), "*"), inputName: 'Password' },
                    React.createElement(InovxControls.ValidationInput, __assign({}, passwordInput, { id: "new-pw-input", value: this.state.newPassword, onChange: this._onPasswordChanged, validation: this.state.validation, autocomplete: "new-password" }))),
                React.createElement(InovxControls.FormField, { title: "".concat(InovxLoader.t("users:form.confirmPassword"), "*"), inputName: 'Password' },
                    React.createElement(InovxControls.ValidationInput, __assign({}, passwordInput, { id: "confirm-pw-input", value: this.state.confirmPassword, onChange: this._onConfirmChanged, validation: this.state.validation, autocomplete: "new-password" }))),
                React.createElement("div", { className: "btn-bar-b-sm" },
                    React.createElement("button", { id: "change-pw-ok-btn", type: "button", className: "btn btn-primary", onClick: this._changePassword }, InovxLoader.t('users:form.changePassword')),
                    React.createElement("button", { id: "change-pw-cancel-btn", type: "button", className: "btn btn-default", onClick: this.props.onCancel }, InovxLoader.t('users:form.cancel'))))));
    };
    return ChangeUserPassword;
}(React.Component));
module.exports = ChangeUserPassword;

},{"./../actions/UserActions":2,"react":"react","shared.web.client":"shared.web.client"}],4:[function(require,module,exports){
"use strict";
// A ‘.tsx’ file enables JSX support in the TypeScript compiler, 
// for more information see the following page on the TypeScript wiki:
// https://github.com/Microsoft/TypeScript/wiki/JSX
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var React = require("react");
var Inovx = require("shared.web.client");
var UserForm = require("./UserForm");
var UserView = require("./UserView");
var UserSettings = require("./UserSettings");
var UserStore = require("./../stores/UserStore");
var UserActions = require("./../actions/UserActions");
var UserConstants = require("./../constants/UserConstants");
var UserPermissionName = require("./../constants/UserPermissionNames");
var UserSystemPreferences = require("./UserSystemPreferences");
var SystemActions = Inovx.Shared.System.Actions;
var SystemStore = Inovx.Shared.System.Store;
var UrlUtilities = Inovx.Shared.Common.UrlUtilities;
var PermissionService = Inovx.Shared.Permission.PermissionService;
var PreferencesActions = Inovx.Shared.Preferences.Actions;
var PreferencesStore = Inovx.Shared.Preferences.Store;
function getActionInProgress() {
    return SystemStore.isActionInProgress(UserConstants.USER_DELETE) || SystemStore.isActionInProgress(UserConstants.SETTINGS_GET)
        || SystemStore.isActionInProgress(UserConstants.BEGIN_EDIT_USER) || SystemStore.isActionInProgress(UserConstants.BEGIN_USER_ADD);
}
function getUserState() {
    return {
        allUsers: UserStore.getAll(),
        modalVisible: UserStore.getModalVisible(),
        isActionInProgress: getActionInProgress(),
        authenticationMode: UserStore.getSettings().AuthenticationMode,
        settingsShown: UserStore.getSettingsShown()
    };
}
var UserApp = /** @class */ (function (_super) {
    __extends(UserApp, _super);
    function UserApp(props, context) {
        var _this = _super.call(this, 'users', props, context) || this;
        _this._onChange = function () {
            _this.setState(getUserState());
        };
        _this._onSystemChange = function () {
            _this.setState({
                isActionInProgress: getActionInProgress()
            });
        };
        _this._hideModal = function () {
            if (_this.state.settingsShown) {
                UserActions.hideSettings();
            }
            else {
                UserActions.finishEdit();
            }
        };
        _this._beginEditUser = function (e, user) {
            UserActions.beginEdit(user);
        };
        _this._deleteUser = function (e, user) {
            var messageObject = {
                message: InovxLoader.t('users:message.confirmDelete'),
                confirmCallback: function () {
                    UserActions.delete(user, null);
                }
            };
            SystemActions.displayConfirmationMessage(messageObject);
        };
        _this._showAddUser = function () {
            UserActions.beginAdd();
        };
        _this._showSettings = function () {
            UserActions.getSettings(true);
        };
        _this._initialize = function () {
            UserActions.getAllUsers(function () { return UserActions.getSettings(false, function () { return _this._appLoaded = true; }); }, function (error) { return _this._handlePermissionError(error); }, true);
            UserActions.getCurrentUser(function () { return _this._appLoaded = true; });
        };
        _this._createUserSystemPreferencesComponent = function (props) {
            return React.createElement(UserSystemPreferences, props);
        };
        _this._enableSystemPreferences = function () {
            var hasUserSettings = PermissionService.checkPermission(UserPermissionName.USER_SETTINGS);
            var hasEntitlementPermission = PermissionService.checkPermission(UserPermissionName.ENTITLEMENT_MANAGE);
            var hasRolePermission = PermissionService.checkPermission(UserPermissionName.ROLE_MANAGE);
            var hasUserViewPermission = PermissionService.checkPermission(UserPermissionName.USER_VIEW);
            var hasUserManagePermission = PermissionService.checkPermission(UserPermissionName.USER_MANAGE);
            if (hasUserSettings && hasRolePermission && hasEntitlementPermission && (hasUserViewPermission || hasUserManagePermission))
                PreferencesActions.registerCreateUserSystemPreferencesComponent(_this._createUserSystemPreferencesComponent);
        };
        _this.state = getUserState();
        return _this;
    }
    UserApp.prototype.componentWillMount = function () {
        this.componentWillMountBase();
    };
    UserApp.prototype.componentDidMount = function () {
        UserStore.addChangeListener(this._onChange);
        SystemStore.addChangeListener(this._onSystemChange);
        this._enableSystemPreferences();
    };
    UserApp.prototype.componentWillUnmount = function () {
        UserStore.removeChangeListener(this._onChange);
        SystemStore.removeChangeListener(this._onSystemChange);
        PreferencesActions.registerCreateUserSystemPreferencesComponent(null);
    };
    UserApp.prototype.render = function () {
        var hasUserManage = PermissionService.checkPermission(UserPermissionName.USER_MANAGE);
        var hasUserSettings = PermissionService.checkPermission(UserPermissionName.USER_SETTINGS);
        var columns = [{
                field: "Email",
                headerText: InovxLoader.t('users:common.email'),
                type: "string",
                width: "auto"
            }, {
                field: "FirstName",
                headerText: InovxLoader.t('users:common.firstname'),
                type: "string"
            }, {
                field: "LastName",
                headerText: InovxLoader.t('users:common.lastname'),
                type: "string"
            }, {
                field: "Enabled",
                headerText: InovxLoader.t('users:common.userStatus'),
                type: "boolean",
                width: "140px",
                values: [
                    { value: true, text: InovxLoader.t('users:common.enabled') },
                    { value: false, text: InovxLoader.t('users:common.disabled') }
                ]
            }];
        var commands = {
            command: [
                {
                    iconClassName: "glyphicon glyphicon-pencil",
                    className: "grid-button",
                    click: this._beginEditUser
                }
            ],
            width: "85px",
            headerText: InovxLoader.t('users:common.commands')
        };
        var manageUserCommand = {
            iconClassName: "glyphicon glyphicon-trash",
            className: "grid-button",
            click: this._deleteUser
        };
        if (hasUserManage) {
            commands.command.push(manageUserCommand);
        }
        var defaultSort = [{
                field: "Email",
                dir: "ascending"
            }];
        var btns = [];
        var iconHeaderProps = {
            iconUrl: "".concat(UrlUtilities.getBaseApplicationUrl(), "/images/Users.png"),
            iconAtt: { alt: "users" },
            title: InovxLoader.t('users:header.users'),
            rcClass: "cd-btn add-btn",
        };
        if (hasUserManage) {
            btns.push({
                onClick: this._showAddUser,
                btnUrl: "".concat(UrlUtilities.getBaseApplicationUrl(), "/images/adduser.png"),
                btnAtt: {
                    alt: InovxLoader.t("users:header.newUser"),
                    title: InovxLoader.t("users:header.newUser"),
                    id: 'userApp-addUser-btn'
                },
            });
        }
        if (hasUserSettings) {
            btns.push({
                onClick: this._showSettings,
                btnUrl: "".concat(UrlUtilities.getBaseApplicationUrl(), "/images/Authenticationsettings.png"),
                btnAtt: {
                    alt: InovxLoader.t("users:settingsForm.headerTitle"),
                    title: InovxLoader.t("users:settingsForm.headerTitle"),
                    id: 'userApp-authen-settings-btn'
                },
            });
        }
        iconHeaderProps.btnUrls = btns;
        return (React.createElement(Inovx.Shared.Core.ReactLoader, { appReady: this.isAppLoaded(), errorStatus: this._errorStatus },
            React.createElement("div", { className: "user-app-content" },
                React.createElement(Inovx.Shared.Controls.If, { condition: this.state.isActionInProgress, class: 'temp-modal-loader' },
                    React.createElement("div", { className: "action-in-progress-loader-lrg" })),
                React.createElement(Inovx.Shared.Layout.IconHeader, __assign({}, iconHeaderProps)),
                React.createElement(Inovx.Shared.Controls.Grid, { dataSource: this.state.allUsers, columns: columns, commands: commands, sort: true, filter: true, pageable: { pageCount: 5, pageSizes: [10, 20, 50], pageSize: 10 }, defaultSort: defaultSort })),
            React.createElement(Inovx.Shared.Controls.ModalSlider, { isOpen: this.state.modalVisible, onClose: this._hideModal }, this.state.settingsShown ?
                React.createElement(UserSettings, null) :
                hasUserManage ? React.createElement(UserForm, null) : React.createElement(UserView, null))));
    };
    return UserApp;
}(Inovx.Shared.ReactExt.BaseAppComponent));
module.exports = UserApp;

},{"./../actions/UserActions":2,"./../constants/UserConstants":12,"./../constants/UserPermissionNames":13,"./../stores/UserStore":16,"./UserForm":5,"./UserSettings":7,"./UserSystemPreferences":8,"./UserView":9,"react":"react","shared.web.client":"shared.web.client"}],5:[function(require,module,exports){
"use strict";
/// <reference path="changeuserpassword.tsx" />
// A ‘.tsx’ file enables JSX support in the TypeScript compiler, 
// for more information see the following page on the TypeScript wiki:
// https://github.com/Microsoft/TypeScript/wiki/JSX
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var React = require("react");
var UserStore = require("./../stores/UserStore");
var UserConstants = require("./../constants/UserConstants");
var UserActions = require("./../actions/UserActions");
var UserSelect = require("./../components/UserSelect");
var ChangeUserPassword = require("./../components/ChangeUserPassword");
var UserPermissionName = require("./../constants/UserPermissionNames");
var AuthenticationModeEnum = require("./../constants/AuthenticationModeEnum");
var ExternalProviderEnum = require("./../constants/ExternalProviderEnum");
var Inovx = require("shared.web.client");
var SystemActions = Inovx.Shared.System.Actions;
var SystemStore = Inovx.Shared.System.Store;
var InovxControls = Inovx.Shared.Controls;
var PermissionService = Inovx.Shared.Permission.PermissionService;
function getActionInProgress() {
    return SystemStore.isActionInProgress(UserConstants.USER_ADD) ||
        SystemStore.isActionInProgress(UserConstants.USER_EDIT) ||
        SystemStore.isActionInProgress(UserConstants.USER_CHECK_NAME);
}
var _isValidADUserID;
var _displaySelectUserState;
var _displayPasswordChange;
var _actionInProgressMsg;
var _useExternalAccount;
function getFormState() {
    var user = UserStore.getEditUser();
    return {
        editUser: user,
        isAdding: UserStore.getIsAdding(),
        isEditing: UserStore.getIsEditing(),
        displaySelectUser: _displaySelectUserState,
        displayPasswordChange: _displayPasswordChange,
        isActionInProgress: getActionInProgress(),
        actionInProgressMsg: _actionInProgressMsg,
        validation: UserStore.getValidation(UserConstants.USER_ADD_FORM),
        authenticationMode: UserStore.getSettings().AuthenticationMode,
        externalProviderName: UserStore.getSettings().ExternalProviderName,
        hasEntitlementPermission: PermissionService.checkPermission(UserPermissionName.ENTITLEMENT_MANAGE),
        hasRolePermission: PermissionService.checkPermission(UserPermissionName.ROLE_MANAGE),
        entitlement: UserStore.getValidEntitlements(),
        roles: UserStore.getValidRoles(),
        isValidADUserID: _isValidADUserID,
        useExternalAccount: _useExternalAccount
    };
}
var UserForm = /** @class */ (function (_super) {
    __extends(UserForm, _super);
    function UserForm(props) {
        var _this = _super.call(this, props) || this;
        _this._onChange = function (event) {
            UserActions.editCurrentObject(UserConstants.USER_ADD_FORM, event.target.name, event.target.value);
            if (event.target.name == "ExternalAccountUserName") {
                UserActions.editCurrentObject(UserConstants.USER_ADD_FORM, "ExternalAccountID", null);
                _isValidADUserID = false;
                _this.setState({ isValidADUserID: false });
            }
        };
        _this._onUseExternalAccountChange = function (event) {
            var value = false;
            if (event.target.checked) {
                value = true;
                _useExternalAccount = true;
            }
            else {
                UserActions.editCurrentObject(UserConstants.USER_ADD_FORM, "ExternalAccountID", "");
                UserActions.editCurrentObject(UserConstants.USER_ADD_FORM, "ExternalAccountUserName", "");
                _useExternalAccount = false;
            }
            _this.setState({ useExternalAccount: value });
        };
        _this._onRolesSelect = function (roleObj, selected) {
            _this._onSelect('RoleIDs', roleObj, selected);
        };
        _this._onEntitlementSelect = function (entitlementObj, selected) {
            _this._onSelect('EntitlementGroupIDs', entitlementObj, selected);
        };
        _this._onSelect = function (name, obj, selected) {
            if (selected) {
                UserActions.editCurrentObjectAddToList(UserConstants.USER_ADD_FORM, name, obj.ID);
            }
            else {
                UserActions.editCurrentObjectRemoveFromList(UserConstants.USER_ADD_FORM, name, obj.ID);
            }
        };
        _this._onCheckChange = function (event) {
            UserActions.editCurrentObject(UserConstants.USER_ADD_FORM, event.target.name, event.target.value === "true");
        };
        _this._loadState = function () {
            _this.setState(getFormState());
        };
        _this._systemChange = function () {
            _this.setState({
                isActionInProgress: getActionInProgress()
            });
        };
        _this._saveUser = function () {
            if (!_this.state.isValidADUserID && _this.state.authenticationMode != AuthenticationModeEnum.LocalOnly && _this.state.useExternalAccount) {
                var checkMessage = InovxLoader.t('users:message.checkAzureADUser');
                if (_this.state.externalProviderName == ExternalProviderEnum.ADFS) {
                    checkMessage = InovxLoader.t('users:message.checkAdfsUser');
                }
                var messageObject = {
                    message: checkMessage
                };
                SystemActions.displayWarningMessage(messageObject);
            }
            else {
                if (_this.state.isAdding) {
                    UserActions.create();
                }
                else {
                    UserActions.edit();
                }
                _this.setState({ actionInProgressMsg: InovxLoader.t('users:form.saving') });
            }
        };
        _this._cancel = function () {
            UserActions.finishEdit();
        };
        _this._checkName = function () {
            _this.setState({ displaySelectUser: true });
        };
        _this._closeSelectUser = function () {
            _displaySelectUserState = false;
            _this.setState({
                userHints: [],
                displaySelectUser: _displaySelectUserState
            });
        };
        _this._closeChangePassword = function () {
            _displayPasswordChange = false;
            _this.setState({
                displayPasswordChange: _displayPasswordChange
            });
        };
        _this._onChangePassword = function () {
            _displayPasswordChange = true;
            _this.setState({
                displayPasswordChange: _displayPasswordChange
            });
        };
        _this._onResetLoginAttempts = function () {
            UserActions.resetLoginAttempts(_this.state.editUser);
        };
        _this._fillUser = function (user) {
            if (user && user.UserID) {
                _displaySelectUserState = false;
                if (_this.state.isEditing) {
                    UserActions.editCurrentObject(UserConstants.USER_ADD_FORM, "ExternalAccountUserName", user.UserName);
                    UserActions.editCurrentObject(UserConstants.USER_ADD_FORM, "ExternalAccountID", user.UserID);
                }
                else {
                    UserActions.selectHint(user);
                    UserActions.editCurrentObject(UserConstants.USER_ADD_FORM, "ExternalAccountID", user.UserID);
                }
                _isValidADUserID = true;
                _this.setState({ isValidADUserID: true });
            }
        };
        _this._checkForUnsavedChanges = function (event) {
            if (UserStore.getHasChanges()) {
                event.returnValue = InovxLoader.t('common:msgBox.browserSaveChanges');
            }
            ;
        };
        _displaySelectUserState = false;
        _displayPasswordChange = false;
        _useExternalAccount = true;
        _isValidADUserID = UserStore.getIsEditing();
        _this.state = getFormState();
        return _this;
    }
    UserForm.prototype.componentDidMount = function () {
        UserStore.addChangeListener(this._loadState);
        SystemStore.addChangeListener(this._systemChange);
        window.addEventListener('beforeunload', this._checkForUnsavedChanges);
        if (this.state.isEditing) {
            if (this.state.authenticationMode == AuthenticationModeEnum.Mixed && this.state.editUser && !this.state.editUser.ExternalAccountID)
                _useExternalAccount = false;
            else if (this.state.authenticationMode == AuthenticationModeEnum.LocalOnly) {
                _useExternalAccount = false;
            }
            this.setState({ useExternalAccount: _useExternalAccount });
        }
    };
    UserForm.prototype.componentWillUnmount = function () {
        UserStore.removeChangeListener(this._loadState);
        SystemStore.removeChangeListener(this._systemChange);
        window.removeEventListener('beforeunload', this._checkForUnsavedChanges);
    };
    UserForm.prototype.render = function () {
        var isNativeLoginMode;
        var isAzureADLoginMode;
        var isMixedMode = false;
        if (this.state.authenticationMode == AuthenticationModeEnum.Mixed) {
            isNativeLoginMode = true;
            isAzureADLoginMode = true;
            isMixedMode = true;
        }
        else if (this.state.authenticationMode == AuthenticationModeEnum.ExternalOnly) {
            isNativeLoginMode = false;
            isAzureADLoginMode = true;
        }
        else if (this.state.authenticationMode == AuthenticationModeEnum.LocalOnly) {
            isNativeLoginMode = true;
            isAzureADLoginMode = false;
        }
        var inputObj = {
            className: 'form-control',
            type: 'text'
        };
        var user = this.state.editUser;
        var passwordInput = {
            id: 'userApp-password-input',
            className: 'form-control',
            type: 'password',
            name: 'VPass',
            value: user.Password
        };
        var firstNameInput = jQuery.extend({
            id: 'userApp-firstName-input',
            name: 'FirstName',
            value: (user.FirstName != null) ? user.FirstName : ""
        }, inputObj);
        var lastNameInput = jQuery.extend({
            id: 'userApp-lastName-input',
            name: 'LastName',
            value: (user.LastName != null) ? user.LastName : ""
        }, inputObj);
        var adUserInput = jQuery.extend({
            id: 'userApp-adUserName-input',
            name: 'ExternalAccountUserName',
            value: user.ExternalAccountUserName
        }, inputObj);
        var emailInput = jQuery.extend({
            id: 'userApp-email-input',
            name: 'Email',
            value: (user.Email != null) ? user.Email : ""
        }, inputObj);
        var header = this.state.isAdding ? InovxLoader.t('users:header.newUser') : InovxLoader.t('users:header.editUser');
        var passwordSettings = InovxLoader.t('users:form.vsuitePasswordTooltip');
        var settings = UserStore.getEditSettings();
        passwordSettings = passwordSettings.concat(InovxLoader.t("users:form.pwdSettingsPart1").replace("{0}", settings.PasswordCharacters));
        passwordSettings = passwordSettings.concat(InovxLoader.t("users:form.pwdSettingsPart2").replace("{0}", settings.PasswordSymbols));
        passwordSettings = passwordSettings.concat(InovxLoader.t("users:form.pwdSettingsPart3").replace("{0}", settings.PasswordNumbers));
        var usernameLabel = InovxLoader.t("users:common.username");
        var usernameToolTip = InovxLoader.t("users:common.usernameTooltip");
        var checkboxLabel = InovxLoader.t("users:form.azureADAuthentication");
        var userExternalAccount = this.state.useExternalAccount;
        if (this.state.externalProviderName == ExternalProviderEnum.ADFS) {
            usernameLabel = InovxLoader.t("users:form.adfsUsername");
            usernameToolTip = InovxLoader.t("users:form.adfsUsernameTooltip");
            checkboxLabel = InovxLoader.t("users:form.adfsAuthentication");
        }
        else if (this.state.externalProviderName == ExternalProviderEnum.AzureAD) {
            usernameLabel = InovxLoader.t("users:form.azureUsername");
            usernameToolTip = InovxLoader.t("users:form.azureUsernameTooltip");
            checkboxLabel = InovxLoader.t("users:form.azureADAuthentication");
        }
        return (React.createElement(InovxControls.StaticHeaderForm, { title: header, saveOnClick: this._saveUser, saveBtnId: "userApp-save-btn", cancelOnClick: this._cancel, cancelBtnId: "userApp-cancel-btn", isActionInProgress: this.state.isActionInProgress, inProgressMessage: this.state.actionInProgressMsg },
            React.createElement("div", { className: 'user-form' },
                React.createElement(InovxControls.If, { condition: isAzureADLoginMode, class: 'fc-margin' },
                    isNativeLoginMode && this.state.isAdding &&
                        React.createElement("div", { className: "form-field" },
                            React.createElement("label", { className: "control-label" },
                                React.createElement("input", { type: "checkbox", onChange: this._onUseExternalAccountChange, checked: userExternalAccount }),
                                " " + checkboxLabel)),
                    userExternalAccount &&
                        React.createElement(InovxControls.FormField, { title: "".concat(usernameLabel, "*"), tooltip: usernameToolTip, inputName: 'ExternalAccountUserName' },
                            React.createElement(InovxControls.ValidationInput, __assign({}, adUserInput, { className: "form-control", onChange: this._onChange, validation: this.state.validation['ExternalAccountUserName'], readOnly: true })),
                            React.createElement("a", { id: "userApp-checkName-btn", className: "btn btn-info", onClick: this._checkName },
                                InovxLoader.t("users:form.searchDirectory"),
                                " "))),
                (this.state.isValidADUserID || (!this.state.useExternalAccount && isMixedMode) || (!isMixedMode && isNativeLoginMode)) &&
                    React.createElement("div", null,
                        React.createElement("div", { className: "row" },
                            React.createElement("div", { className: "col-md-6 field-col" },
                                React.createElement(InovxControls.FormField, { title: "".concat(InovxLoader.t("users:form.email"), "*"), inputName: 'Email' },
                                    React.createElement(InovxControls.ValidationInput, __assign({}, emailInput, { className: "form-control", onChange: this._onChange, validation: this.state.validation['Email'], readOnly: false, autocomplete: "email" })))),
                            isNativeLoginMode &&
                                React.createElement("div", { className: "col-md-6 field-col" },
                                    React.createElement(InovxControls.If, { condition: this.state.isEditing, class: 'form-field' },
                                        React.createElement(InovxControls.FormField, { title: "".concat(InovxLoader.t("users:form.vsuitePassword")), tooltip: passwordSettings, inputName: 'VPass' },
                                            React.createElement("a", { id: "userApp-password-reset-btn", className: "btn btn-info", onClick: this._onChangePassword }, InovxLoader.t("users:form.resetPassword")),
                                            React.createElement(InovxControls.If, { condition: user.PasswordExpired },
                                                React.createElement("h5", { style: { color: 'red' } }, InovxLoader.t("users:form.passwordExpired"))))),
                                    React.createElement(InovxControls.If, { condition: this.state.isAdding, class: 'form-field' },
                                        React.createElement(InovxControls.FormField, { title: "".concat(InovxLoader.t("users:form.vsuitePassword"), "*"), tooltip: passwordSettings, inputName: 'VPassword' },
                                            React.createElement(InovxControls.ValidationInput, __assign({}, passwordInput, { className: "form-control", onChange: this._onChange, validation: this.state.validation['Password'], readOnly: false, autocomplete: "new-password" })))))),
                        React.createElement(InovxControls.If, { condition: this.state.hasEntitlementPermission, class: 'fc-margin' },
                            React.createElement(InovxControls.FormField, { title: InovxLoader.t("users:form.securityGroups"), inputName: 'Entitlement' },
                                React.createElement(InovxControls.MultiSelect, { displayProp: "Name", minLength: 0, onSelect: this._onEntitlementSelect, datasource: this.state.entitlement, keyProp: "ID", valueProp: "ID", values: this.state.editUser.EntitlementGroupIDs }))),
                        React.createElement(InovxControls.If, { condition: this.state.hasRolePermission, class: 'fc-margin' },
                            React.createElement(InovxControls.FormField, { title: InovxLoader.t("users:form.roles"), inputName: 'Role' },
                                React.createElement(InovxControls.MultiSelect, { displayProp: "Name", minLength: 0, onSelect: this._onRolesSelect, datasource: this.state.roles, keyProp: "ID", valueProp: "ID", values: this.state.editUser.RoleIDs }))),
                        React.createElement(InovxControls.FormField, { title: "".concat(InovxLoader.t("users:form.userStatus"), ": "), inputName: '' },
                            React.createElement("label", { className: "radio-inline" },
                                React.createElement("input", { type: "radio", value: "true", name: "Enabled", onChange: this._onCheckChange, checked: user.Enabled }),
                                InovxLoader.t("users:common.enabled")),
                            React.createElement("label", { className: "radio-inline" },
                                React.createElement("input", { type: "radio", value: "false", name: "Enabled", onChange: this._onCheckChange, checked: !user.Enabled }),
                                InovxLoader.t("users:common.disabled"))),
                        React.createElement(InovxControls.GroupBox, { title: InovxLoader.t('users:form.userProfile'), class: "gb-password-complexity" },
                            React.createElement("div", { className: "row" },
                                React.createElement("div", { className: "col-md-6 field-col" },
                                    React.createElement(InovxControls.FormField, { title: InovxLoader.t("users:common.firstname"), inputName: 'FirstName' },
                                        React.createElement(InovxControls.ValidationInput, __assign({}, firstNameInput, { className: "form-control", onChange: this._onChange, validation: this.state.validation['FirstName'], readOnly: false })))),
                                React.createElement("div", { className: "col-md-6 field-col" },
                                    React.createElement(InovxControls.FormField, { title: InovxLoader.t("users:common.lastname"), inputName: 'LastName' },
                                        React.createElement(InovxControls.ValidationInput, __assign({}, lastNameInput, { className: "form-control", onChange: this._onChange, validation: this.state.validation['LastName'], readOnly: false })))))),
                        React.createElement(InovxControls.If, { condition: this.state.editUser.MaxLoginAttempts, class: 'fc-margin' },
                            React.createElement(InovxControls.FormField, { title: "".concat(InovxLoader.t("users:form.resetLoginAttempts"), ": "), inputName: '' },
                                React.createElement("a", { className: "btn btn-info", onClick: this._onResetLoginAttempts }, InovxLoader.t("users:form.resetLoginAttemptsBtn"))))),
                React.createElement(InovxControls.ModalPopUp, { isOpen: this.state.displaySelectUser },
                    React.createElement(UserSelect, { onSelect: this._fillUser, onCancel: this._closeSelectUser })),
                React.createElement(InovxControls.ModalPopUp, { isOpen: this.state.displayPasswordChange },
                    React.createElement(ChangeUserPassword, { User: this.state.editUser, onPasswordChanged: this._closeChangePassword, onCancel: this._closeChangePassword })))));
    };
    return UserForm;
}(React.Component));
module.exports = UserForm;

},{"./../actions/UserActions":2,"./../components/ChangeUserPassword":3,"./../components/UserSelect":6,"./../constants/AuthenticationModeEnum":10,"./../constants/ExternalProviderEnum":11,"./../constants/UserConstants":12,"./../constants/UserPermissionNames":13,"./../stores/UserStore":16,"react":"react","shared.web.client":"shared.web.client"}],6:[function(require,module,exports){
"use strict";
// A ‘.tsx’ file enables JSX support in the TypeScript compiler, 
// for more information see the following page on the TypeScript wiki:
// https://github.com/Microsoft/TypeScript/wiki/JSX
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var React = require("react");
var Inovx = require("shared.web.client");
var UserStore = require("./../stores/UserStore");
var UserActions = require("./../actions/UserActions");
var UserConstants = require("./../constants/UserConstants");
var InovxControls = Inovx.Shared.Controls;
var CommonMessages = Inovx.Shared.Common.CommonMessages;
function getBlankValidation() {
    return { invalidInput: false, invalidValue: false, invalidInputMessage: "", invalidValueMessage: "" };
}
function getState() {
    return {
        validation: {
            "SearchString": getBlankValidation()
        },
        Users: [],
        searchString: "",
        selectedUser: null,
        showValidationWarning: false
    };
}
var UserSelect = /** @class */ (function (_super) {
    __extends(UserSelect, _super);
    function UserSelect(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this._onRowSelect = function (e, user) {
            _this.setState(function (state) { return ({
                selectedUser: user,
                showValidationWarning: (state.showValidationWarning && user) ? false : state.showValidationWarning
            }); });
        };
        _this._onOKClick = function () {
            if (_this.state.selectedUser) {
                _this.props.onSelect(_this.state.selectedUser);
            }
            else {
                _this.setState({
                    showValidationWarning: true
                });
            }
        };
        _this._onSearch = function () {
            if (_this.state.searchString && !_this.state.validation["SearchString"].invalidValue) {
                UserActions.getHint(_this.state.searchString, function () {
                    var users = UserStore.checkUser();
                    _this.setState({ Users: users });
                });
            }
        };
        _this._onSearchChange = function (event) {
            _this.setState({ searchString: event.target.value });
            _this.setState(function (state) {
                _this._validateSearchString(state);
                return state;
            });
        };
        _this._validateSearchString = function (state) {
            if (!state.searchString) {
                state.validation["SearchString"].invalidValueMessage = CommonMessages.Validation.Required;
                state.validation["SearchString"].invalidValue = true;
                return false;
            }
            else {
                if (state.searchString.length < 3) {
                    state.validation["SearchString"].invalidValueMessage = InovxLoader.t('users:form.searchStringTooShort');
                    state.validation["SearchString"].invalidValue = true;
                    return false;
                }
                else {
                    state.validation["SearchString"].invalidValue = false;
                    return true;
                }
            }
        };
        _this.state = getState();
        return _this;
    }
    UserSelect.prototype.render = function () {
        var pagesize = 7;
        var columns = [{
                field: "UserName",
                headerText: InovxLoader.t('users:common.username')
            }, {
                field: "FirstName",
                headerText: InovxLoader.t('users:common.firstname')
            }, {
                field: "LastName",
                headerText: InovxLoader.t('users:common.lastname')
            }];
        var dataSource = this.state.Users;
        var defaultSort = [{
                field: "UserName",
                dir: "ascending"
            }];
        var searchInput = {
            className: 'form-control',
            type: 'text',
            name: 'SearchString'
        };
        return (React.createElement("div", { className: "panel panel-primary user-select" },
            React.createElement("div", { className: "panel-heading" }, InovxLoader.t('users:form.selectAccount')),
            React.createElement("div", { className: "panel-body" },
                React.createElement("div", { className: 'user-form' },
                    React.createElement(Inovx.Shared.Controls.ActionInProgressLoader, { actionKey: [UserConstants.USER_CHECK_NAME], class: 'temp-modal-loader' },
                        React.createElement("div", { className: "action-in-progress-loader-sm" })),
                    React.createElement(InovxControls.FormField, { title: "", tooltip: "", inputName: 'SearchString' },
                        React.createElement(InovxControls.ValidationInput, __assign({}, searchInput, { value: this.state.searchString, className: "form-control", onChange: this._onSearchChange, validation: this.state.validation["SearchString"], readOnly: false, autofocus: true })),
                        React.createElement("button", { id: "User_Search_btn", onClick: this._onSearch, className: 'glyphicon glyphicon-search user-search-button' })),
                    React.createElement(Inovx.Shared.Controls.Grid, { dataSource: dataSource, selectRow: this._onRowSelect, reset: true, defaultSort: defaultSort, columns: columns, sort: true, filter: false, scrollHeight: 31 * pagesize, allowScrolling: true, autoSelectSingleRow: true }),
                    React.createElement("div", { className: "text-danger", style: { paddingTop: "10px", display: (this.state.showValidationWarning) ? "" : "none" } }, InovxLoader.t('users:form.selectAccountWarning')),
                    React.createElement("div", { className: "btn-bar-b-sm" },
                        React.createElement("button", { type: "button", className: "btn btn-primary", onClick: this._onOKClick }, InovxLoader.t('users:form.ok')),
                        React.createElement("button", { type: "button", className: "btn btn-default", onClick: this.props.onCancel }, InovxLoader.t('users:form.cancel')))))));
    };
    return UserSelect;
}(React.Component));
module.exports = UserSelect;

},{"./../actions/UserActions":2,"./../constants/UserConstants":12,"./../stores/UserStore":16,"react":"react","shared.web.client":"shared.web.client"}],7:[function(require,module,exports){
"use strict";
// A ‘.tsx’ file enables JSX support in the TypeScript compiler, 
// for more information see the following page on the TypeScript wiki:
// https://github.com/Microsoft/TypeScript/wiki/JSX
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var React = require("react");
var UserStore = require("./../stores/UserStore");
var UserConstants = require("./../constants/UserConstants");
var UserActions = require("./../actions/UserActions");
var ChangeUserPassword = require("./../components/ChangeUserPassword");
var Inovx = require("shared.web.client");
var SystemActions = Inovx.Shared.System.Actions;
var SystemStore = Inovx.Shared.System.Store;
var InovxControls = Inovx.Shared.Controls;
function getActionInProgress() {
    return SystemStore.isActionInProgress(UserConstants.SETTINGS_SAVE);
}
var _actionInProgressMsg;
function getFormState() {
    return {
        isActionInProgress: getActionInProgress(),
        actionInProgressMsg: _actionInProgressMsg,
        validation: UserStore.getValidation(UserConstants.USER_SETTINGS_FORM),
        settings: UserStore.getEditSettings(),
        displayPasswordChange: false,
        currentUserHasPassword: false,
        currentUser: UserStore.getCurrentUser()
    };
}
var UserSettings = /** @class */ (function (_super) {
    __extends(UserSettings, _super);
    function UserSettings(props) {
        var _this = _super.call(this, props) || this;
        _this._passwordComplexityChanged = false;
        _this._displayPasswordChange = false;
        _this._onChange = function (event) {
            UserActions.editCurrentObject(UserConstants.USER_SETTINGS_FORM, event.target.name, event.target.value);
        };
        _this._onPasswordComplexityChange = function (event) {
            _this._passwordComplexityChanged = true;
            UserActions.editCurrentObject(UserConstants.USER_SETTINGS_FORM, event.target.name, event.target.value);
        };
        _this._onCheckChange = function (event) {
            UserActions.editCurrentObject(UserConstants.USER_SETTINGS_FORM, event.target.name, event.target.value === "true");
        };
        _this._loadState = function () {
            _this.setState(getFormState());
        };
        _this._systemChange = function () {
            _this.setState({
                isActionInProgress: getActionInProgress()
            });
        };
        _this._saveChangePassword = function () {
            _this.setState({
                displayPasswordChange: false
            });
            _this._save();
        };
        _this._cancelChangePassword = function () {
            _this.setState({
                displayPasswordChange: false
            });
        };
        _this._saveSettings = function () {
            UserActions.saveSettings(function (error) {
                _this.setState({
                    displayPasswordChange: true,
                });
            }, true);
            _this.setState({ actionInProgressMsg: InovxLoader.t('users:form.saving') });
        };
        _this._save = function () {
            var that = _this;
            if (UserStore.getIsValidObject(UserConstants.USER_SETTINGS_FORM)) {
                if (that._passwordComplexityChanged) {
                    SystemActions.displayYesNoMessage({
                        confirmCallback: function () {
                            UserActions.resetPasswords();
                            that._saveSettings();
                        },
                        cancelCallback: function () {
                            that._saveSettings();
                        },
                        message: InovxLoader.t('users:settingsForm.resetPasswords')
                    });
                    that._passwordComplexityChanged = false;
                }
                else {
                    that._saveSettings();
                }
            }
            else {
                _this.setState({});
            }
        };
        _this._cancel = function () {
            UserActions.hideSettings();
        };
        _this._isEmptyOrNull = function (value) {
            return !value || value.length <= 0;
        };
        _this._checkForUnsavedChanges = function (event) {
            if (UserStore.getHasChanges()) {
                event.returnValue = InovxLoader.t('common:msgBox.browserSaveChanges');
            }
        };
        _this.state = getFormState();
        return _this;
    }
    UserSettings.prototype.componentDidMount = function () {
        UserStore.addChangeListener(this._loadState);
        SystemStore.addChangeListener(this._systemChange);
        window.addEventListener('beforeunload', this._checkForUnsavedChanges);
    };
    UserSettings.prototype.componentWillUnmount = function () {
        UserStore.removeChangeListener(this._loadState);
        SystemStore.removeChangeListener(this._systemChange);
        window.removeEventListener('beforeunload', this._checkForUnsavedChanges);
    };
    UserSettings.prototype.render = function () {
        var inputObj = {
            className: 'form-control',
            type: 'text'
        };
        var settings = this.state.settings;
        var passwordMinCharacters = jQuery.extend({
            name: 'PasswordCharacters',
            value: settings.PasswordCharacters.toString()
        }, inputObj);
        var requiredSymbols = jQuery.extend({
            name: 'PasswordSymbols',
            value: settings.PasswordSymbols.toString()
        }, inputObj);
        var requireNumbers = jQuery.extend({
            name: 'PasswordNumbers',
            value: settings.PasswordNumbers.toString()
        }, inputObj);
        var passwordExpiration = jQuery.extend({
            name: 'PasswordExpiration',
            value: settings.PasswordExpiration.toString()
        }, inputObj);
        var failedAttempts = jQuery.extend({
            name: 'AllowedAttempts',
            value: settings.AllowedAttempts.toString()
        }, inputObj);
        return (React.createElement(InovxControls.StaticHeaderForm, { title: InovxLoader.t('users:settingsForm.headerTitle'), saveOnClick: this._save, cancelOnClick: this._cancel, isActionInProgress: this.state.isActionInProgress, inProgressMessage: this.state.actionInProgressMsg },
            React.createElement("div", { className: 'user-form' },
                true ? null :
                    React.createElement(InovxControls.GroupBox, { title: InovxLoader.t('users:settingsForm.rememberMe'), class: "gb-remember-me" },
                        React.createElement("div", { className: "form-field" },
                            React.createElement("div", { className: "fr-margin" },
                                React.createElement("label", { className: "radio-inline" },
                                    React.createElement("input", { type: "radio", value: "true", name: "RememberMe", onChange: this._onCheckChange, checked: settings.RememberMe }),
                                    InovxLoader.t("users:settingsForm.enabled")),
                                React.createElement("label", { className: "radio-inline" },
                                    React.createElement("input", { type: "radio", value: "false", name: "RememberMe", onChange: this._onCheckChange, checked: !settings.RememberMe }),
                                    InovxLoader.t("users:settingsForm.disabled"))))),
                React.createElement(InovxControls.GroupBox, { title: InovxLoader.t('users:settingsForm.passwordSettings'), class: "gb-password-settings" },
                    React.createElement("div", { className: "form-field" },
                        React.createElement("div", { className: "fr-margin" },
                            React.createElement("label", { className: "radio-inline" },
                                React.createElement("input", { type: "radio", value: "false", name: "PasswordExpires", onChange: this._onCheckChange, checked: !settings.PasswordExpires }),
                                InovxLoader.t("users:settingsForm.passwordNotExpires")),
                            React.createElement("label", { className: "radio-inline" },
                                React.createElement("input", { type: "radio", value: "true", name: "PasswordExpires", onChange: this._onCheckChange, checked: settings.PasswordExpires }),
                                InovxLoader.t("users:settingsForm.passwordExpires")))),
                    React.createElement(InovxControls.FormField, { title: InovxLoader.t("users:settingsForm.passwordExpiration"), tooltip: InovxLoader.t("users:settingsForm.passwordExpirationToolTip"), inputName: 'PasswordExpiration' },
                        React.createElement(InovxControls.ValidationInput, __assign({}, passwordExpiration, { className: "form-control", onChange: this._onChange, validation: this.state.validation['PasswordExpiration'], readOnly: !settings.PasswordExpires }))),
                    React.createElement(InovxControls.FormField, { title: InovxLoader.t("users:settingsForm.failedAttempts"), tooltip: InovxLoader.t("users:settingsForm.failedAttemptsToolTip"), inputName: 'AllowedAttempts' },
                        React.createElement(InovxControls.ValidationInput, __assign({}, failedAttempts, { className: "form-control", onChange: this._onChange, validation: this.state.validation['AllowedAttempts'] })))),
                React.createElement(InovxControls.GroupBox, { title: InovxLoader.t('users:settingsForm.passwordComplexityTitle'), class: "gb-password-complexity" },
                    React.createElement(InovxControls.FormField, { title: InovxLoader.t("users:settingsForm.passwordMinCharacters"), tooltip: InovxLoader.t("users:settingsForm.passwordMinCharactersToolTip"), inputName: 'MinCharacters' },
                        React.createElement(InovxControls.ValidationInput, __assign({}, passwordMinCharacters, { className: "form-control", onChange: this._onPasswordComplexityChange, validation: this.state.validation['PasswordCharacters'] }))),
                    React.createElement(InovxControls.FormField, { title: InovxLoader.t("users:settingsForm.requiredSymbols"), tooltip: InovxLoader.t("users:settingsForm.requiredSymbolsToolTip"), inputName: 'RequiredSymbols' },
                        React.createElement(InovxControls.ValidationInput, __assign({}, requiredSymbols, { className: "form-control", onChange: this._onPasswordComplexityChange, validation: this.state.validation['PasswordSymbols'] }))),
                    React.createElement(InovxControls.FormField, { title: InovxLoader.t("users:settingsForm.requireNumbers"), tooltip: InovxLoader.t("users:settingsForm.requireNumbersToolTip"), inputName: 'UserName' },
                        React.createElement(InovxControls.ValidationInput, __assign({}, requireNumbers, { className: "form-control", onChange: this._onPasswordComplexityChange, validation: this.state.validation['PasswordNumbers'] })))),
                React.createElement(InovxControls.ModalPopUp, { isOpen: this.state.displayPasswordChange },
                    React.createElement(ChangeUserPassword, { User: this.state.currentUser, onPasswordChanged: this._saveChangePassword, onCancel: this._cancelChangePassword, message: InovxLoader.t('users:settingsForm.setPasswordInfo') })))));
    };
    return UserSettings;
}(React.Component));
module.exports = UserSettings;

},{"./../actions/UserActions":2,"./../components/ChangeUserPassword":3,"./../constants/UserConstants":12,"./../stores/UserStore":16,"react":"react","shared.web.client":"shared.web.client"}],8:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var React = require("react");
var Inovx = require("shared.web.client");
var InovxControls = Inovx.Shared.Controls;
var SystemActions = Inovx.Shared.System.Actions;
var UserActions = require("./../actions/UserActions");
var UserConstants = require("./../constants/UserConstants");
var SystemStore = Inovx.Shared.System.Store;
function getDefaultState() {
    return {
        isActionInProgress: false,
        dirty: false,
        entitlement: [],
        roles: [],
        preferences: {
            DefaultSytemSetting: {
                DefaultGroupIDs: [],
                DefaultRoleIDs: []
            },
            AllGroups: [],
            AllRoles: []
        }
    };
}
function getActionInProgress() {
    return SystemStore.isActionInProgress(UserConstants.SYSTEM_SETTINGS_GET);
}
var UserSystemPreferences = /** @class */ (function (_super) {
    __extends(UserSystemPreferences, _super);
    function UserSystemPreferences(props, context) {
        var _this = _super.call(this, "System Preferences", props, context) || this;
        _this._onSave = function (e) {
            if (e && e.stopPropagation)
                e.stopPropagation();
            _this._save();
        };
        _this._save = function () {
            var data = _this.state.preferences.DefaultSytemSetting;
            UserActions.saveSystemSettings(data, function () {
                _this.props.onClose();
            }, null);
        };
        _this._onCancel = function (e) {
            if (_this.state.dirty) {
                SystemActions.displaySaveChangesDialog({
                    message: InovxLoader.t("common:msgBox.saveChanges"),
                    confirmCallback: function () {
                        _this._save();
                    },
                    cancelCallback: function () {
                        _this.props.onClose();
                    }
                });
            }
            else {
                _this.props.onClose();
            }
        };
        _this._onReset = function (e) {
            _this.setState({
                dirty: true,
                preferences: {
                    DefaultSytemSetting: {
                        DefaultGroupIDs: _this._preferences.DefaultSytemSetting.DefaultGroupIDs.slice(0),
                        DefaultRoleIDs: _this._preferences.DefaultSytemSetting.DefaultRoleIDs.slice(0)
                    },
                    AllGroups: _this._preferences.AllGroups.slice(0),
                    AllRoles: _this._preferences.AllRoles.slice(0)
                }
            });
        };
        _this._checkForUnsavedChangesWindow = function (e) {
            if (_this.state.dirty) {
                e.returnValue = InovxLoader.t('users:message.unsavedPreferences');
            }
        };
        _this._onRolesSelect = function (roleObj, selected) {
            _this._onSelect('RoleIDs', roleObj, selected);
        };
        _this._onEntitlementSelect = function (entitlementObj, selected) {
            _this._onSelect('EntitlementGroupIDs', entitlementObj, selected);
        };
        _this._onSelect = function (name, obj, selected) {
            if (selected) {
                //Add
                if (name === "EntitlementGroupIDs") {
                    _this.state.preferences.DefaultSytemSetting.DefaultGroupIDs.push(obj.ID);
                }
                else {
                    _this.state.preferences.DefaultSytemSetting.DefaultRoleIDs.push(obj.ID);
                }
            }
            else {
                //Remove
                if (name === "EntitlementGroupIDs") {
                    var index = _this.state.preferences.DefaultSytemSetting.DefaultGroupIDs.indexOf(obj.ID);
                    if (index > -1)
                        _this.state.preferences.DefaultSytemSetting.DefaultGroupIDs.splice(index, 1);
                }
                else {
                    var index = _this.state.preferences.DefaultSytemSetting.DefaultRoleIDs.indexOf(obj.ID);
                    if (index > -1)
                        _this.state.preferences.DefaultSytemSetting.DefaultRoleIDs.splice(index, 1);
                }
            }
            _this.setState({
                dirty: true
            });
        };
        _this._onSystemChange = function () {
            _this.setState({
                isActionInProgress: getActionInProgress()
            });
        };
        _this.state = getDefaultState();
        _this._initialize = _this._initialize.bind(_this);
        return _this;
    }
    UserSystemPreferences.prototype._initialize = function () {
        var _this = this;
        UserActions.getUserSystemPreferences(function (preferences) {
            _this._appLoaded = true;
            _this.setState({
                dirty: false,
                preferences: preferences
            });
            _this._preferences = {
                DefaultSytemSetting: {
                    DefaultGroupIDs: preferences.AllGroups.filter(function (item) { return item.Name == "User"; }).map(function (item) { return item.ID; }),
                    DefaultRoleIDs: []
                },
                AllGroups: preferences.AllGroups.slice(0),
                AllRoles: preferences.AllRoles.slice(0)
            };
        }, null);
    };
    UserSystemPreferences.prototype.componentWillMount = function () {
        this.componentWillMountBase();
        SystemStore.addChangeListener(this._onSystemChange);
    };
    UserSystemPreferences.prototype.componentWillUnmount = function () {
        window.removeEventListener('beforeunload', this._checkForUnsavedChangesWindow);
        SystemStore.addChangeListener(this._onSystemChange);
    };
    UserSystemPreferences.prototype.componentDidMount = function () {
        window.addEventListener('beforeunload', this._checkForUnsavedChangesWindow);
    };
    UserSystemPreferences.prototype.render = function () {
        return (React.createElement(Inovx.Shared.Core.ReactLoader, { appReady: this.isAppLoaded(), errorStatus: this._errorStatus },
            React.createElement("div", { className: "user-preferences-popup no-print", id: "user-preferences-popup" },
                React.createElement(Inovx.Shared.Controls.If, { condition: this.state.isActionInProgress, class: 'temp-modal-loader' },
                    React.createElement("div", { className: "action-in-progress-loader-lrg" })),
                React.createElement("div", { className: "panel panel-primary user-preferences-app-content" },
                    React.createElement("div", { className: "panel-heading" },
                        InovxLoader.t("users:preferences.title"),
                        React.createElement("a", { href: "#", onClick: this._onCancel },
                            React.createElement("span", { className: "pull-right glyphicon glyphicon glyphicon-remove" }))),
                    React.createElement("div", { className: "panel-body" },
                        React.createElement("div", { className: "user-form" },
                            React.createElement(InovxControls.If, { condition: true, class: 'fc-margin' },
                                React.createElement(InovxControls.GroupBox, { title: InovxLoader.t('users:preferences.entitlement'), class: "gb-user-entitlement" },
                                    React.createElement(InovxControls.FormField, { title: InovxLoader.t("users:common.entitlement"), inputName: 'Entitlement' },
                                        React.createElement(InovxControls.MultiSelect, { displayProp: "Name", minLength: 0, onSelect: this._onEntitlementSelect, datasource: this.state.preferences.AllGroups, keyProp: "ID", valueProp: "ID", values: this.state.preferences.DefaultSytemSetting.DefaultGroupIDs })))),
                            React.createElement(InovxControls.If, { condition: true, class: 'fc-margin' },
                                React.createElement(InovxControls.GroupBox, { title: InovxLoader.t('users:preferences.roles'), class: "gb-user-roles" },
                                    React.createElement(InovxControls.FormField, { title: InovxLoader.t("users:common.roles"), inputName: 'Role' },
                                        React.createElement(InovxControls.MultiSelect, { displayProp: "Name", minLength: 0, onSelect: this._onRolesSelect, datasource: this.state.preferences.AllRoles, keyProp: "ID", valueProp: "ID", values: this.state.preferences.DefaultSytemSetting.DefaultRoleIDs })))))),
                    React.createElement("div", { className: "panel-footer clearfix" },
                        React.createElement("div", { className: "row" },
                            React.createElement("div", { className: "pull-left" },
                                React.createElement("button", { type: "button", id: "preferences.btn.reset", className: "btn btn-info btn-left", onClick: this._onReset }, InovxLoader.t("users:preferences.resetButton"))),
                            React.createElement("div", { className: "pull-right" },
                                React.createElement("button", { type: "button", id: "preferences.btn.save", className: "btn btn-primary btn-space", onClick: this._onSave }, InovxLoader.t("users:preferences.saveButton")),
                                React.createElement("button", { type: "button", id: "preferences.btn.cancel", className: "btn btn-primary btn-right", onClick: this._onCancel }, InovxLoader.t("users:preferences.cancelButton")))))))));
    };
    return UserSystemPreferences;
}(Inovx.Shared.ReactExt.BaseAppComponent));
module.exports = UserSystemPreferences;

},{"./../actions/UserActions":2,"./../constants/UserConstants":12,"react":"react","shared.web.client":"shared.web.client"}],9:[function(require,module,exports){
"use strict";
// A '.tsx' file enables JSX support in the TypeScript compiler, 
// for more information see the following page on the TypeScript wiki:
// https://github.com/Microsoft/TypeScript/wiki/JSX
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var React = require("react");
var UserStore = require("./../stores/UserStore");
var Inovx = require("shared.web.client");
var InovxControls = Inovx.Shared.Controls;
var UserView = /** @class */ (function (_super) {
    __extends(UserView, _super);
    function UserView(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            user: UserStore.getEditUser()
        };
        return _this;
    }
    UserView.prototype.render = function () {
        return (React.createElement(InovxControls.StaticHeaderForm, { title: InovxLoader.t("users:form.viewUser") },
            React.createElement(InovxControls.FormField, { title: InovxLoader.t("users:common.username"), inputName: '' },
                React.createElement("span", { className: "user-field-viewonly" }, this.state.user.UserName)),
            React.createElement(InovxControls.FormField, { title: InovxLoader.t("users:common.firstname"), inputName: 'FirstName' },
                React.createElement("span", { className: "user-field-viewonly" }, this.state.user.FirstName)),
            React.createElement(InovxControls.FormField, { title: InovxLoader.t("users:common.lastname"), inputName: 'LastName' },
                React.createElement("span", { className: "user-field-viewonly" }, this.state.user.LastName)),
            React.createElement(InovxControls.FormField, { title: InovxLoader.t("users:form.userStatus"), inputName: '' },
                React.createElement("span", { className: "user-field-viewonly" }, this.state.user.Enabled ? InovxLoader.t("users:common.enabled") : InovxLoader.t("users:common.disabled")))));
    };
    return UserView;
}(React.Component));
module.exports = UserView;

},{"./../stores/UserStore":16,"react":"react","shared.web.client":"shared.web.client"}],10:[function(require,module,exports){
"use strict";
var AuthenticationModeEnum;
(function (AuthenticationModeEnum) {
    AuthenticationModeEnum["LocalOnly"] = "LocalOnly";
    AuthenticationModeEnum["ExternalOnly"] = "ExternalOnly";
    AuthenticationModeEnum["Mixed"] = "Mixed";
})(AuthenticationModeEnum || (AuthenticationModeEnum = {}));
;
module.exports = AuthenticationModeEnum;

},{}],11:[function(require,module,exports){
"use strict";
var ExternalProviderEnum;
(function (ExternalProviderEnum) {
    ExternalProviderEnum["AzureAD"] = "aad";
    ExternalProviderEnum["ADFS"] = "adfs";
})(ExternalProviderEnum || (ExternalProviderEnum = {}));
;
module.exports = ExternalProviderEnum;

},{}],12:[function(require,module,exports){
"use strict";
var keymirror = require("fbjs/lib/keymirror");
var UserConstants = keymirror({
    USER_ADD_FORM: null,
    USER_SETTINGS_FORM: null,
    USER_FORM_INVALID_SAVE: null,
    USER_VALIDATION_ERROR: null,
    USER_ADD: null,
    USER_DELETE: null,
    USER_EDIT: null,
    USER_CHANGE_PASSWORD: null,
    USER_CHANGE_PASSWORD_SUCCESS: null,
    BEGIN_EDIT_USER: null,
    BEGIN_USER_ADD: null,
    FINISH_EDIT: null,
    UPDATE_MODAL_VISIBLE: null,
    USER_RECIEVE_DATA: null,
    USER_CHECK_NAME: null,
    USER_RECIEVE_HINT: null,
    USER_GET_ALL: null,
    USER_UPDATE_OBJECT: null,
    USER_UPDATE_OBJECT_ADD_LIST: null,
    USER_UPDATE_OBJECT_REMOVE_LIST: null,
    USER_SELECT_HINT: null,
    USER_CURRENT_GET: null,
    USER_CURRENT_RECIEVE: null,
    RESET_LOGIN_ATTEMPTS: null,
    SHOW_SETTINGS_MENU: null,
    HIDE_SETTINGS_MENU: null,
    SETTINGS_SAVE: null,
    SETTINGS_GET: null,
    SYSTEM_SETTING_GET: null,
    SYSTEM_SETTING_SAVE: null
});
module.exports = UserConstants;

},{"fbjs/lib/keymirror":"fbjs/lib/keymirror"}],13:[function(require,module,exports){
"use strict";
var UserPermissionNames = {
    USER_VIEW: "User.View",
    USER_MANAGE: "User.Manage",
    USER_SETTINGS: "User.Settings",
    ROLE_MANAGE: "Role.Manage",
    ENTITLEMENT_MANAGE: "Entitlement.Manage"
};
module.exports = UserPermissionNames;

},{}],14:[function(require,module,exports){
"use strict";
var Inovx = require("shared.web.client");
var assign = require("object-assign");
var UrlUtilities = Inovx.Shared.Common.UrlUtilities;
var url = "".concat(UrlUtilities.getApiUrl(), "/UserApi/api/settings");
var SettingsService = assign({}, Inovx.Shared.Flux.BaseService, {
    getSettings: function (successCallback, errorCallback, ignoreDefaultError) {
        var _this = this;
        this.get("".concat(url, "/Authentication"), null, function (retData) {
            successCallback(retData);
        }, function (error) {
            if (!ignoreDefaultError) {
                _this.handleWebApiError(error);
            }
            errorCallback(error);
        });
    },
    saveSettings: function (settings, successCallback, errorCallback, ignoreVSuiteLoginError) {
        var _this = this;
        this.post("".concat(url, "/Authentication"), settings, function (data) {
            successCallback();
        }, function (error) {
            var errJson = JSON.parse(error.responseText);
            if (ignoreVSuiteLoginError) {
                if (errJson.Reason != "CurrentUserPasswordNotSet") {
                    _this.handleWebApiError(error);
                }
            }
            else {
                _this.handleWebApiError(error);
            }
            errorCallback(error);
        });
    },
    getSystemSettings: function (successCallback, errorCallback, ignoreDefaultError) {
        var _this = this;
        this.get("".concat(url, "/System"), null, function (retData) {
            successCallback(retData);
        }, function (error) {
            if (!ignoreDefaultError) {
                _this.handleWebApiError(error);
            }
            errorCallback(error);
        });
    },
    saveSystemSettings: function (settings, successCallback, errorCallback, ignoreDefaultError) {
        var _this = this;
        this.post("".concat(url, "/System"), settings, function (data) {
            successCallback();
        }, function (error) {
            if (!ignoreDefaultError) {
                _this.handleWebApiError(error);
            }
            errorCallback(error);
        });
    }
});
module.exports = SettingsService;

},{"object-assign":18,"shared.web.client":"shared.web.client"}],15:[function(require,module,exports){
"use strict";
var Inovx = require("shared.web.client");
var assign = require("object-assign");
var UrlUtilities = Inovx.Shared.Common.UrlUtilities;
var url = "".concat(UrlUtilities.getApiUrl(), "/UserApi/api/user");
var UserServices = assign({}, Inovx.Shared.Flux.BaseService, {
    getAll: function (successCallback, errorCallback, ignoreDefaultError) {
        var _this = this;
        this.get(url, null, function (retData) {
            successCallback(retData);
        }, function (error) {
            if (!ignoreDefaultError) {
                _this.handleWebApiError(error);
            }
            errorCallback(error);
        });
    },
    createUser: function (user, successCallback, errorCallback, ignoreDefaultError) {
        var _this = this;
        this.post("".concat(url, "/Create"), user, function (data) {
            successCallback();
        }, function (error) {
            if (!ignoreDefaultError(error)) {
                _this.handleWebApiError(error);
            }
            errorCallback(error);
        });
    },
    deleteUser: function (user, successCallback, errorCallback) {
        var _this = this;
        this.post("".concat(url, "/Delete"), { id: user.UserID, versionToken: user.UserVersionToken }, function (data) {
            successCallback();
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    },
    editUser: function (user, successCallback, errorCallback, ignoreDefaultError) {
        var _this = this;
        this.post("".concat(url, "/Update"), user, function (data) {
            successCallback();
        }, function (error) {
            if (!ignoreDefaultError(error)) {
                _this.handleWebApiError(error);
            }
            errorCallback(error);
        });
    },
    getDetail: function (userId, successCallback, errorCallback) {
        var _this = this;
        this.post("".concat(url, "/GetDetails"), { UserId: userId }, function (data) {
            successCallback(data);
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    },
    getCurrentUserDetail: function (successCallback, errorCallback, ignoreDefaultError) {
        var _this = this;
        this.get("".concat(url, "/GetCurrentUserDetails"), null, function (data) {
            successCallback(data);
        }, function (error) {
            if (!ignoreDefaultError) {
                _this.handleWebApiError(error);
            }
            errorCallback(error);
        });
    },
    changePassword: function (user, password, successCallback, errorCallback, ignoreDefaultError) {
        var _this = this;
        this.post("".concat(url, "/ChangePassword"), { UserId: user.UserID, UserVersionToken: user.UserVersionToken, Password: password }, function (data) {
            successCallback(data);
        }, function (error) {
            if (!ignoreDefaultError(error)) {
                _this.handleWebApiError(error);
            }
            errorCallback(error);
        });
    },
    resetPasswords: function (successCallback, errorCallback, ignoreDefaultError) {
        var _this = this;
        this.post("".concat(url, "/InvalidatePasswords"), null, function (data) {
            successCallback();
        }, function (error) {
            if (!ignoreDefaultError) {
                _this.handleWebApiError(error);
            }
            errorCallback(error);
        });
    },
    checkName: function (hint, successCallback, errorCallback) {
        var _this = this;
        this.get("".concat(url, "/QueryDirectory"), { nameHint: hint }, function (data) {
            successCallback(data);
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    },
    resetLoginAttempts: function (user, successCallback, errorCallback) {
        var _this = this;
        this.post("".concat(url, "/ResetLoginAttempts"), { id: user.UserID }, function (data) {
            successCallback();
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    },
    getEntitlements: function (successCallback, errorCallback, ignoreDefaultError) {
        var _this = this;
        this.get("".concat(url, "/EntitlementGroups"), null, function (data) {
            successCallback(data);
        }, function (error) {
            if (!ignoreDefaultError) {
                _this.handleWebApiError(error);
            }
            errorCallback(error);
        });
    },
    getRoles: function (successCallback, errorCallback, ignoreDefaultError) {
        var _this = this;
        this.get("".concat(url, "/Roles"), null, function (data) {
            successCallback(data);
        }, function (error) {
            if (!ignoreDefaultError) {
                _this.handleWebApiError(error);
            }
            errorCallback(error);
        });
    }
});
module.exports = UserServices;

},{"object-assign":18,"shared.web.client":"shared.web.client"}],16:[function(require,module,exports){
"use strict";
// A ‘.tsx’ file enables JSX support in the TypeScript compiler, 
// for more information see the following page on the TypeScript wiki:
// https://github.com/Microsoft/TypeScript/wiki/JSX
var NodeEvents = require("events");
var Inovx = require("shared.web.client");
var UserConstants = require("./../constants/UserConstants");
var assign = require("object-assign");
var AuthenticationModeEnum = require("./../constants/AuthenticationModeEnum");
var EventEmitter = NodeEvents.EventEmitter;
var CommonMessages = Inovx.Shared.Common.CommonMessages;
var CHANGE_EVENT = 'user.change';
var _users = [], _hints = [], _editUser = getBlankUser(), _currentUser = null, _settings = getBlankUserAppSetting(), _editSettings = getBlankUserAppSetting(), _beginAdd = false, _beginEdit = false, _changesMade = false, _modalVisible = false, _settingsShown = false, _validation = {}, _entitlements = [], _roles = [];
function loadUserData(data) {
    _users = data;
}
function loadHints(data) {
    _hints = data;
}
function loadCurrentUser(data) {
    _currentUser = data;
}
function showUserSettings(show) {
    _settingsShown = _modalVisible = show;
    _changesMade = false;
    _initalizeValidation(UserConstants.USER_SETTINGS_FORM);
}
function setAddingUser() {
    _beginAdd = _modalVisible = true;
    _beginEdit = false;
    _changesMade = false;
    _editUser = getBlankUser();
    _initalizeValidation(UserConstants.USER_ADD_FORM);
}
function setEditingUser(user) {
    _modalVisible = _beginEdit = true;
    _beginAdd = false;
    _changesMade = false;
    _editUser = user;
    _initalizeValidation(UserConstants.USER_ADD_FORM);
}
function _updateObjectListProp(comp, key, value, add) {
    switch (comp) {
        case UserConstants.USER_ADD_FORM:
            _updateUserListChanges(key, value, add);
            _changesMade = true;
            break;
    }
}
function _updateUserListChanges(name, value, add) {
    switch (name) {
        default:
            if (Array.isArray(_editUser[name])) {
                if (add) {
                    _editUser[name].push(value);
                }
                else {
                    var indx = _editUser[name].indexOf(value);
                    if (indx > -1) {
                        _editUser[name].splice(indx, 1);
                    }
                }
            }
            _setValidValidation(UserConstants.USER_ADD_FORM, name);
            break;
    }
}
function _updateObject(comp, key, value, fromUI) {
    if (fromUI === void 0) { fromUI = true; }
    switch (comp) {
        case UserConstants.USER_ADD_FORM:
            _updateUserChanges(key, value, fromUI);
            _changesMade = true;
            break;
        case UserConstants.USER_SETTINGS_FORM:
            _updateSettingChanges(key, value);
            _changesMade = true;
            break;
    }
}
function _updateUserChanges(name, value, fromUI) {
    var isNativeLoginMode = true;
    var isAzureADLoginMode = true;
    if (_settings) {
        if (_settings.AuthenticationMode == AuthenticationModeEnum.Mixed) {
            isNativeLoginMode = true;
            isAzureADLoginMode = true;
        }
        else if (_settings.AuthenticationMode == AuthenticationModeEnum.ExternalOnly) {
            isNativeLoginMode = false;
            isAzureADLoginMode = true;
        }
        else if (_settings.AuthenticationMode == AuthenticationModeEnum.LocalOnly) {
            isNativeLoginMode = true;
            isAzureADLoginMode = false;
        }
    }
    switch (name) {
        case "Email":
            var Email = "Email";
            _editUser[Email] = value;
            if (value) {
                var re = /\S+@\S+\.\S+/;
                if (!re.test(value)) {
                    _validation[UserConstants.USER_ADD_FORM][Email].invalidValueMessage = InovxLoader.t("users:form.invalidEmail");
                    _validation[UserConstants.USER_ADD_FORM][Email].invalidValue = true;
                }
                else if (_users.filter(function (user) { return user.Email && user.Email.toLowerCase() === value.toLowerCase() && user.UserID !== _editUser.UserID; }).length > 0) {
                    _validation[UserConstants.USER_ADD_FORM][Email].invalidValueMessage = InovxLoader.t("users:form.duplicateEmail");
                    _validation[UserConstants.USER_ADD_FORM][Email].invalidValue = true;
                }
                else {
                    _setValidValidation(UserConstants.USER_ADD_FORM, Email);
                }
            }
            else {
                _validation[UserConstants.USER_ADD_FORM][Email].invalidValueMessage = CommonMessages.Validation.Required;
                _validation[UserConstants.USER_ADD_FORM][Email].invalidValue = true;
            }
            break;
        case "Password":
        case "VPass":
            var VPass = "Password";
            _editUser[VPass] = value;
            if (isNativeLoginMode) {
                if (_beginEdit || value) {
                    _setValidValidation(UserConstants.USER_ADD_FORM, VPass);
                }
                else {
                    _validation[UserConstants.USER_ADD_FORM][VPass].invalidValueMessage = CommonMessages.Validation.Required;
                    _validation[UserConstants.USER_ADD_FORM][VPass].invalidValue = true;
                }
            }
            else {
                _setValidValidation(UserConstants.USER_ADD_FORM, VPass);
            }
            break;
        //case "ExternalAccountID":
        //    _editUser[name] = value;
        //    if (isAzureADLoginMode && !isNativeLoginMode) {
        //        if (value)
        //            _setValidValidation(UserConstants.USER_ADD_FORM, name)
        //        else {
        //            var propName: string = name;
        //            if (!fromUI)
        //                propName = "ExternalAccountUserName";
        //            _validation[UserConstants.USER_ADD_FORM][propName].invalidValueMessage = InovxLoader.t("users:message.checkAdfsUser");
        //            _validation[UserConstants.USER_ADD_FORM][propName].invalidValue = true;
        //        }
        //    }
        //    else {
        //        _setValidValidation(UserConstants.USER_ADD_FORM, name);
        //    }
        //    break;
        case "ExternalAccountUserName":
            _editUser[name] = value;
            if (isAzureADLoginMode && !isNativeLoginMode) {
                if (value) {
                    if (value == null || value.length == 0) {
                        _validation[UserConstants.USER_ADD_FORM][name].invalidValueMessage = CommonMessages.Validation.Required;
                        _validation[UserConstants.USER_ADD_FORM][name].invalidValue = true;
                    }
                    else {
                        _setValidValidation(UserConstants.USER_ADD_FORM, name);
                    }
                }
                else {
                    _validation[UserConstants.USER_ADD_FORM][name].invalidValueMessage = CommonMessages.Validation.Required;
                    _validation[UserConstants.USER_ADD_FORM][name].invalidValue = true;
                }
            }
            else {
                _setValidValidation(UserConstants.USER_ADD_FORM, name);
            }
            break;
        default:
            if (name != 'UserID' && name != 'UserVersionToken') {
                _editUser[name] = value;
            }
            _setValidValidation(UserConstants.USER_ADD_FORM, name);
            break;
    }
}
function _updateSettingChanges(name, value) {
    _editSettings[name] = value;
    switch (name) {
        case "PasswordExpiration":
            if (_editSettings["PasswordExpires"] && !_isValidIntegerBetweenRange(value, 14, 730)) {
                _validation[UserConstants.USER_SETTINGS_FORM][name].invalidValue = true;
                _validation[UserConstants.USER_SETTINGS_FORM][name].invalidValueMessage = InovxLoader.t("users:settingsForm.numberValue", { min: 14, max: 730 });
            }
            else {
                _setValidValidation(UserConstants.USER_SETTINGS_FORM, name);
            }
            break;
        case "PasswordExpires":
            if (!value) {
                _editSettings[name] = false;
                _setValidValidation(UserConstants.USER_SETTINGS_FORM, "PasswordExpiration");
            }
            break;
        case "AllowedAttempts":
            if (!_isValidIntegerBetweenRange(value, 1, 5)) {
                _validation[UserConstants.USER_SETTINGS_FORM][name].invalidValue = true;
                _validation[UserConstants.USER_SETTINGS_FORM][name].invalidValueMessage = InovxLoader.t("users:settingsForm.numberValue", { min: 1, max: 5 });
            }
            else {
                _setValidValidation(UserConstants.USER_SETTINGS_FORM, name);
            }
            break;
        case "PasswordCharacters":
            if (!_isValidIntegerBetweenRange(value, 1, 32)) {
                _validation[UserConstants.USER_SETTINGS_FORM][name].invalidValue = true;
                _validation[UserConstants.USER_SETTINGS_FORM][name].invalidValueMessage = InovxLoader.t("users:settingsForm.numberValue", { min: 1, max: 32 });
            }
            else {
                _setValidValidation(UserConstants.USER_SETTINGS_FORM, name);
                _updateSettingChanges("PasswordNumbers", _editSettings["PasswordNumbers"]);
                _updateSettingChanges("PasswordSymbols", _editSettings["PasswordSymbols"]);
            }
            break;
        case "PasswordSymbols":
            var numberOfCharacters = _editSettings["PasswordCharacters"];
            var numberOfDigits = _editSettings["PasswordNumbers"];
            if (!_isValidIntegerBetweenRange(value, 0, numberOfCharacters - numberOfDigits)) {
                _validation[UserConstants.USER_SETTINGS_FORM][name].invalidValue = true;
                _validation[UserConstants.USER_SETTINGS_FORM][name].invalidValueMessage = InovxLoader.t("users:settingsForm.invalidDigitsOrSymbols");
            }
            else {
                _setValidValidation(UserConstants.USER_SETTINGS_FORM, name);
                _setValidValidation(UserConstants.USER_SETTINGS_FORM, "PasswordNumbers");
            }
            break;
        case "PasswordNumbers":
            var numberOfCharacters = _editSettings["PasswordCharacters"];
            var numberOfSymbols = _editSettings["PasswordSymbols"];
            if (!_isValidIntegerBetweenRange(value, 0, numberOfCharacters - numberOfSymbols)) {
                _validation[UserConstants.USER_SETTINGS_FORM][name].invalidValue = true;
                _validation[UserConstants.USER_SETTINGS_FORM][name].invalidValueMessage = InovxLoader.t("users:settingsForm.invalidDigitsOrSymbols");
            }
            else {
                _setValidValidation(UserConstants.USER_SETTINGS_FORM, name);
                _setValidValidation(UserConstants.USER_SETTINGS_FORM, "PasswordSymbols");
            }
            break;
        default:
            _setValidValidation(UserConstants.USER_SETTINGS_FORM, name);
            break;
    }
}
// Check for valid positive integer.
function _isValidIntegerBetweenRange(value, min, max) {
    var parsedValue = Number(value);
    if (!isNaN(parsedValue) && parsedValue % 1 === 0 && parsedValue >= min && parsedValue <= max) {
        return true;
    }
    return false;
}
function _setValidValidation(comp, name) {
    if (_validation[comp][name]) {
        _validation[comp][name].invalidInput = false;
        _validation[comp][name].invalidValue = false;
    }
    else {
        _validation[comp][name] = _getNewValidationObject();
    }
}
function _getNewValidationObject() {
    return {
        invalidInput: false,
        invalidValue: false
    };
}
function _validate(comp) {
    switch (comp) {
        case UserConstants.USER_ADD_FORM:
            _ensureValidObject(comp, _editUser);
            return _validateObject(UserConstants.USER_ADD_FORM);
        case UserConstants.USER_SETTINGS_FORM:
            _ensureValidObject(comp, _editSettings);
            return _validateObject(UserConstants.USER_SETTINGS_FORM);
    }
    return false;
}
function _ensureValidObject(comp, obj) {
    var updateChangesFunct = function (name, value, fromUI) { };
    var updateListChangesFunct = function (name, value) { };
    switch (comp) {
        case UserConstants.USER_ADD_FORM:
            updateChangesFunct = _updateUserChanges;
            break;
        case UserConstants.USER_SETTINGS_FORM:
            updateChangesFunct = _updateSettingChanges;
            break;
    }
    for (var k in obj) {
        var objType = typeof (obj[k]);
        if (objType !== 'function') {
            if (obj[k] === null || objType !== 'object' || Array.isArray(obj[k])) {
                updateChangesFunct(k, obj[k], false);
            }
            else {
                _ensureValidObject(comp, obj[k]);
            }
        }
    }
}
function _validateObject(comp) {
    var ret = true;
    for (var k in _validation[comp]) {
        if (_validation[comp][k].invalidValue) {
            return false;
        }
    }
    return ret;
}
function _initalizeValidation(comp) {
    switch (comp) {
        case UserConstants.USER_ADD_FORM:
            var valiObj = _validation[UserConstants.USER_ADD_FORM] = {};
            for (var k in _editUser) {
                _setValidValidation(UserConstants.USER_ADD_FORM, k);
            }
            break;
        case UserConstants.USER_SETTINGS_FORM:
            valiObj = _validation[UserConstants.USER_SETTINGS_FORM] = {};
            for (var k in _settings) {
                _setValidValidation(UserConstants.USER_SETTINGS_FORM, k);
                valiObj[k].invalidValueMessage = CommonMessages.Validation.PositiveInteger;
            }
            break;
    }
}
function validationError(comp, messageObj) {
    _validation[comp][messageObj.propertyName].invalidValueMessage = messageObj.message;
    _validation[comp][messageObj.propertyName].invalidValue = true;
}
function finishedEditing() {
    _modalVisible = false;
    _changesMade = false;
}
function selectHint(user) {
    _updateProfile(user);
    _updateUserChanges("ExternalAccountUserName", user.UserName, true);
    _updateUserChanges("Email", user.Email, true);
}
function _updateProfile(user) {
    _editUser["FirstName"] = user.FirstName;
    _editUser["LastName"] = user.LastName;
    _editUser["UserName"] = user.UserName;
    //_editUser["ADUserName"] = user.Email;
    _editUser["ExternalAccountUserName"] = user.UserName;
    _editUser["ExternalAccountID"] = user.UserID;
}
function getBlankUser() {
    return {
        UserID: "", UserVersionToken: null, Enabled: true, FirstName: "", LastName: "", UserName: "",
        Password: "", Email: "", ExternalAccountUserName: "", ExternalAccountID: "", PasswordExpired: false, MaxLoginAttempts: false,
        EntitlementGroupIDs: [], RoleIDs: []
    };
}
function getBlankUserAppSetting() {
    return { PasswordExpiration: 0, AllowedAttempts: 0, PasswordCharacters: 0, PasswordSymbols: 0, PasswordNumbers: 0, RememberMe: false, AuthenticationMode: "", ExternalProviderName: "" };
}
function sortINamedItem(a, b) {
    if (!a)
        return -1;
    if (!b)
        return 1;
    return (a.Name > b.Name) ? 1 : (b.Name > a.Name) ? -1 : 0;
}
var UserStore = assign({}, EventEmitter.prototype, {
    getAll: function () {
        return _users;
    },
    getEditUser: function () {
        return _editUser;
    },
    getCurrentUser: function () {
        return _currentUser;
    },
    getHasChanges: function () {
        return _changesMade;
    },
    getIsAdding: function () {
        return _beginAdd;
    },
    getIsEditing: function () {
        return _beginEdit;
    },
    getModalVisible: function () {
        return _modalVisible;
    },
    getSettingsShown: function () {
        return _settingsShown;
    },
    getSettings: function () {
        return _settings;
    },
    getEditSettings: function () {
        return _editSettings;
    },
    getSaveFriendlyEditSettings: function () {
        var edit = $.extend({}, _editSettings);
        edit.AllowedAttempts = parseInt(_editSettings.AllowedAttempts);
        edit.PasswordCharacters = parseInt(_editSettings.PasswordCharacters);
        edit.PasswordExpiration = parseInt(_editSettings.PasswordExpiration);
        edit.PasswordNumbers = parseInt(_editSettings.PasswordNumbers);
        edit.PasswordSymbols = parseInt(_editSettings.PasswordSymbols);
        return edit;
    },
    checkUser: function () {
        return _hints;
    },
    updateExternalAccountID: function (id) {
        _editUser.ExternalAccountID = id;
    },
    getValidation: function (key) {
        return _validation[key];
    },
    getIsValidObject: function (key) {
        return _validate(key);
    },
    getValidRoles: function () {
        return _roles;
    },
    getValidEntitlements: function () {
        return _entitlements;
    },
    emitChange: function () {
        return this.emit(CHANGE_EVENT);
    },
    addChangeListener: function (callback) {
        this.on(CHANGE_EVENT, callback);
    },
    removeChangeListener: function (callback) {
        this.removeListener(CHANGE_EVENT, callback);
    }
});
Inovx.Shared.Flux.AppDispatcher.register(function (payload) {
    switch (payload.actionType) {
        case UserConstants.BEGIN_USER_ADD:
            setAddingUser();
            _entitlements = payload.entitlement.sort(sortINamedItem);
            _roles = payload.role.sort(sortINamedItem);
            _editUser.EntitlementGroupIDs = _entitlements.filter(function (item) {
                return item.IsDefault;
            }).map(function (item) { return item.ID; });
            _editUser.RoleIDs = _roles.filter(function (item) {
                return item.IsDefault;
            }).map(function (item) { return item.ID; });
            break;
        case UserConstants.BEGIN_EDIT_USER:
            setEditingUser(payload.user);
            _entitlements = payload.entitlement.sort(sortINamedItem);
            _roles = payload.role.sort(sortINamedItem);
            _editUser.EntitlementGroupIDs.sort(function (a, b) {
                var itemA = null;
                var itemB = null;
                for (var indx in _entitlements) {
                    if (_entitlements[indx].ID === a) {
                        itemA = _entitlements[indx];
                    }
                    else if (_entitlements[indx].ID === b) {
                        itemB = _entitlements[indx];
                    }
                }
                return sortINamedItem(itemA, itemB);
            });
            _editUser.RoleIDs.sort(function (a, b) {
                var itemA = null;
                var itemB = null;
                for (var indx in _roles) {
                    if (_roles[indx].ID === a) {
                        itemA = _roles[indx];
                    }
                    else if (_roles[indx].ID === b) {
                        itemB = _roles[indx];
                    }
                }
                return sortINamedItem(itemA, itemB);
            });
            break;
        case UserConstants.FINISH_EDIT:
            finishedEditing();
            break;
        case UserConstants.USER_RECIEVE_DATA:
            loadUserData(payload.data);
            break;
        case UserConstants.USER_RECIEVE_HINT:
            loadHints(payload.data);
            payload.callback();
            return true;
        case UserConstants.USER_UPDATE_OBJECT:
            _updateObject(payload.component, payload.key, payload.value);
            break;
        case UserConstants.USER_UPDATE_OBJECT_ADD_LIST:
            _updateObjectListProp(payload.component, payload.key, payload.value, true);
            break;
        case UserConstants.USER_UPDATE_OBJECT_REMOVE_LIST:
            _updateObjectListProp(payload.component, payload.key, payload.value, false);
            break;
        case UserConstants.USER_SELECT_HINT:
            selectHint(payload.user);
            break;
        case UserConstants.USER_FORM_INVALID_SAVE:
            break;
        case UserConstants.HIDE_SETTINGS_MENU:
            showUserSettings(false);
            break;
        case UserConstants.SETTINGS_GET:
            _settings = payload.data;
            _editSettings = $.extend({}, _settings);
            _editSettings.PasswordExpires = _settings.PasswordExpiration > 0;
            showUserSettings(payload.display);
            break;
        case UserConstants.USER_RECIEVE_CURRENT:
            loadCurrentUser(payload.data);
            payload.callback();
            return true;
        case UserConstants.USER_VALIDATION_ERROR:
            validationError(payload.component, payload.messageObj);
            break;
        case UserConstants.USER_CHANGE_PASSWORD_SUCCESS:
            _editUser.PasswordExpired = false;
            _editUser.UserVersionToken = payload.user.UserVersionToken;
            break;
        case UserConstants.RESET_LOGIN_ATTEMPTS:
            _editUser.MaxLoginAttempts = payload.user.MaxLoginAttempts;
            _editUser.UserVersionToken = payload.user.UserVersionToken;
            break;
        default: return true;
    }
    UserStore.emitChange();
    return true;
});
module.exports = UserStore;

},{"./../constants/AuthenticationModeEnum":10,"./../constants/UserConstants":12,"events":17,"object-assign":18,"shared.web.client":"shared.web.client"}],17:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var objectCreate = Object.create || objectCreatePolyfill
var objectKeys = Object.keys || objectKeysPolyfill
var bind = Function.prototype.bind || functionBindPolyfill

function EventEmitter() {
  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
    this._events = objectCreate(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

var hasDefineProperty;
try {
  var o = {};
  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
  hasDefineProperty = o.x === 0;
} catch (err) { hasDefineProperty = false }
if (hasDefineProperty) {
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      // check whether the input is a positive number (whose value is zero or
      // greater and not a NaN).
      if (typeof arg !== 'number' || arg < 0 || arg !== arg)
        throw new TypeError('"defaultMaxListeners" must be a positive number');
      defaultMaxListeners = arg;
    }
  });
} else {
  EventEmitter.defaultMaxListeners = defaultMaxListeners;
}

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    if (arguments.length > 1)
      er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Unhandled "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
      // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
      // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = objectCreate(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
          listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
            existing.length + ' "' + String(type) + '" listeners ' +
            'added. Use emitter.setMaxListeners() to ' +
            'increase limit.');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        if (typeof console === 'object' && console.warn) {
          console.warn('%s: %s', w.name, w.message);
        }
      }
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    switch (arguments.length) {
      case 0:
        return this.listener.call(this.target);
      case 1:
        return this.listener.call(this.target, arguments[0]);
      case 2:
        return this.listener.call(this.target, arguments[0], arguments[1]);
      case 3:
        return this.listener.call(this.target, arguments[0], arguments[1],
            arguments[2]);
      default:
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i)
          args[i] = arguments[i];
        this.listener.apply(this.target, args);
    }
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = bind.call(onceWrapper, state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = objectCreate(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else
          spliceOne(list, position);

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (!events)
    return [];

  var evlistener = events[type];
  if (!evlistener)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function objectCreatePolyfill(proto) {
  var F = function() {};
  F.prototype = proto;
  return new F;
}
function objectKeysPolyfill(obj) {
  var keys = [];
  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
    keys.push(k);
  }
  return k;
}
function functionBindPolyfill(context) {
  var fn = this;
  return function () {
    return fn.apply(context, arguments);
  };
}

},{}],18:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
