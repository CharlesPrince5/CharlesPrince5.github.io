(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
// Â© 2001-2015 INOVx Solutions, Inc.
// 114 Pacifica Suite 300, Irvine, CA 92618 USA
// All rights reserved.
//
// This software is confidential, proprietary and unpublished property of
// INOVx Solutions, Inc.  It may NOT be copied in part or in whole on any
// medium, either electronic or printed, without the express written consent
// of INOVx Solutions, Inc.
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ReactDOM = require("react-dom");
var EntitlementApp = require("./components/EntitlementApp");
try {
    InovxLoader.updateHelp('entitlement');
}
catch (e) {
}
ReactDOM.render(React.createElement(EntitlementApp, null), document.getElementById('entitlementapp'));

},{"./components/EntitlementApp":3,"react":"react","react-dom":"react-dom"}],2:[function(require,module,exports){
"use strict";
var Inovx = require("shared.web.client");
var EntitlementConstants = require("./../constants/EntitlementConstants");
var EntitlementServices = require("./../services/EntitlementServices");
var EntitlementStore = require("./../stores/EntitlementStore");
var SystemActions = Inovx.Shared.System.Actions;
var SystemStore = Inovx.Shared.System.Store;
function receiveEntitlementData(data) {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: EntitlementConstants.ENTITLEMENT_RECIEVE_DATA,
        data: data
    });
}
function _finishEdit() {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: EntitlementConstants.ENTITLEMENT_FINISH_EDIT
    });
}
function sendInvalidSave() {
    Inovx.Shared.Flux.AppDispatcher.dispatch({
        actionType: EntitlementConstants.ENTITLEMENT_FORM_INVALID_SAVE
    });
}
var EntitlementActions = {
    getAllEntitlement: function (callback, errorCallback, ignoreDefaultError) {
        EntitlementServices.getAll(function (data) {
            if (callback !== 'undefined' && callback != null) {
                callback(data);
            }
            receiveEntitlementData(data);
        }, function (error) {
            if (errorCallback) {
                errorCallback(error);
            }
        }, ignoreDefaultError);
    },
    beginAdd: function () {
        EntitlementServices.getApplicationPermissions(function (data) {
            Inovx.Shared.Flux.AppDispatcher.dispatch({
                actionType: EntitlementConstants.ENTITLEMENT_BEGIN_ADD,
                applicationPermissions: data
            });
        }, function (error) {
        });
    },
    createEntitlement: function (callback) {
        if (EntitlementStore.getIsValidObject(EntitlementConstants.ENTITLEMENT_ADD_FORM)) {
            if (!SystemStore.isActionInProgress(EntitlementConstants.ENTITLEMENT_ADD)) {
                SystemActions.beginAction(EntitlementConstants.ENTITLEMENT_ADD);
                var securityGroup = EntitlementStore.getSecurityGroup();
                var securtyGroupDetail = EntitlementStore.getSecurityGroupDetail();
                var applicationPermissions = securtyGroupDetail.ApplicationPermissions;
                var groupUsers = securtyGroupDetail.GroupUsers;
                var permissionIDs = [];
                var groupUserIDs = [];
                for (var index in applicationPermissions) {
                    var applicationPermission = applicationPermissions[index];
                    for (var subIndex in applicationPermission.Permissions) {
                        var permission = applicationPermission.Permissions[subIndex];
                        if (permission.Assigned) {
                            permissionIDs.push(permission.ID);
                        }
                    }
                }
                for (var index in groupUsers) {
                    var groupUser = groupUsers[index];
                    groupUserIDs.push(groupUser.UserID);
                }
                EntitlementServices.create(securityGroup, permissionIDs, groupUserIDs, function () {
                    EntitlementActions.refreshData();
                    if (callback !== undefined && callback != null) {
                        callback();
                    }
                    _finishEdit();
                    SystemActions.endAction(EntitlementConstants.ENTITLEMENT_ADD);
                }, function () {
                    SystemActions.endAction(EntitlementConstants.ENTITLEMENT_ADD);
                });
            }
        }
        else {
            sendInvalidSave();
        }
    },
    beginEdit: function (securityGroup) {
        EntitlementServices.getDetail(securityGroup.ID, function (data) {
            Inovx.Shared.Flux.AppDispatcher.dispatch({
                actionType: EntitlementConstants.ENTITLEMENT_BEGIN_EDIT,
                securityGroup: securityGroup,
                securityGroupDetail: data
            });
        }, function (error) {
        });
    },
    updateEntitlement: function (callback) {
        if (EntitlementStore.getIsValidObject(EntitlementConstants.ENTITLEMENT_ADD_FORM)) {
            if (!EntitlementStore.getIsValidEditObject()) {
                EntitlementActions.displayInvalidEdit();
                sendInvalidSave();
            }
            else {
                if (!SystemStore.isActionInProgress(EntitlementConstants.ENTITLEMENT_EDIT)) {
                    SystemActions.beginAction(EntitlementConstants.ENTITLEMENT_EDIT);
                    var securityGroup = EntitlementStore.getSecurityGroup();
                    var securtyGroupDetail = EntitlementStore.getSecurityGroupDetail();
                    var applicationPermissions = securtyGroupDetail.ApplicationPermissions;
                    var groupUsers = securtyGroupDetail.GroupUsers;
                    var permissionIDs = [];
                    var groupUserIDs = [];
                    for (var index in applicationPermissions) {
                        var applicationPermission = applicationPermissions[index];
                        for (var subIndex in applicationPermission.Permissions) {
                            var permission = applicationPermission.Permissions[subIndex];
                            if (permission.Assigned) {
                                permissionIDs.push(permission.ID);
                            }
                        }
                    }
                    for (var index in groupUsers) {
                        var groupUser = groupUsers[index];
                        groupUserIDs.push(groupUser.UserID);
                    }
                    EntitlementServices.update(securityGroup, permissionIDs, groupUserIDs, function (data) {
                        EntitlementActions.refreshData();
                        if (callback !== undefined && callback != null) {
                            callback();
                        }
                        _finishEdit();
                        SystemActions.endAction(EntitlementConstants.ENTITLEMENT_EDIT);
                    }, function (error) {
                        SystemActions.endAction(EntitlementConstants.ENTITLEMENT_EDIT);
                    });
                }
            }
        }
        else {
            sendInvalidSave();
        }
    },
    finishEdit: function () {
        if (EntitlementStore.getHasChanges()) {
            var saveFunct = EntitlementStore.getIsEditing() ? EntitlementActions.updateEntitlement : EntitlementActions.createEntitlement;
            SystemActions.displaySaveChangesDialog({
                message: InovxLoader.t("common:msgBox.saveChanges"),
                cancelCallback: _finishEdit,
                confirmCallback: saveFunct
            });
        }
        else {
            _finishEdit();
        }
    },
    deleteEntitlement: function (securityGroup, callback) {
        if (!SystemStore.isActionInProgress(EntitlementConstants.ENTITLEMENT_DELETE)) {
            SystemActions.beginAction(EntitlementConstants.ENTITLEMENT_DELETE);
            EntitlementServices.delete(securityGroup, function () {
                EntitlementActions.refreshData();
                if (callback !== 'undefined' && callback != null) {
                    callback();
                }
                SystemActions.endAction(EntitlementConstants.ENTITLEMENT_DELETE);
            }, function (error) {
                SystemActions.endAction(EntitlementConstants.ENTITLEMENT_DELETE);
            });
        }
    },
    refreshData: function () {
        this.getAllEntitlement();
    },
    editSecurityGroup: function (comp, key, value) {
        Inovx.Shared.Flux.AppDispatcher.dispatch({
            actionType: EntitlementConstants.ENTITLEMENT_UPDATE_SECURITY_GROUP,
            component: comp,
            key: key,
            value: value
        });
    },
    editPermissions: function (uid, value) {
        Inovx.Shared.Flux.AppDispatcher.dispatch({
            actionType: EntitlementConstants.ENTITLEMENT_UPDATE_PERMISSIONS,
            uid: uid,
            value: value
        });
    },
    addUsers: function (users) {
        Inovx.Shared.Flux.AppDispatcher.dispatch({
            actionType: EntitlementConstants.ENTITLEMENT_ADD_USER,
            users: users
        });
    },
    deleteUser: function (user) {
        Inovx.Shared.Flux.AppDispatcher.dispatch({
            actionType: EntitlementConstants.ENTITLEMENT_DELETE_USER,
            user: user
        });
    },
    displayInvalidEdit: function () {
        var messageObject = {
            message: InovxLoader.t('Entitlement:message.systemSecurityGroupUserNotFound')
        };
        SystemActions.displayErrorMessage(messageObject);
    }
};
module.exports = EntitlementActions;

},{"./../constants/EntitlementConstants":5,"./../services/EntitlementServices":6,"./../stores/EntitlementStore":7,"shared.web.client":"shared.web.client"}],3:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var React = require("react");
var Inovx = require("shared.web.client");
var EntitlementForm = require("./EntitlementForm");
var EntitlementActions = require("./../actions/EntitlementActions");
var EntitlementStore = require("./../stores/EntitlementStore");
var EntitlementConstants = require("./../constants/EntitlementConstants");
var SystemActions = Inovx.Shared.System.Actions;
var SystemStore = Inovx.Shared.System.Store;
var UrlUtilities = Inovx.Shared.Common.UrlUtilities;
function getEntitlementState() {
    return {
        allSecurityGroup: EntitlementStore.getAll(),
        modalVisible: EntitlementStore.getModalVisible(),
        isActionInProgress: SystemStore.isActionInProgress(EntitlementConstants.ENTITLEMENT_DELETE)
    };
}
var EntitlementApp = /** @class */ (function (_super) {
    __extends(EntitlementApp, _super);
    function EntitlementApp(props, context) {
        var _this = _super.call(this, 'Entitlement', props, context) || this;
        _this._onChange = function () {
            _this.setState(getEntitlementState());
        };
        _this._onSystemChange = function () {
            _this.setState({
                isActionInProgress: SystemStore.isActionInProgress(EntitlementConstants.ENTITLEMENT_DELETE)
            });
        };
        _this._hideModal = function () {
            EntitlementActions.finishEdit();
        };
        _this._beginEditEntitlement = function (e, securityGroup) {
            EntitlementActions.beginEdit(securityGroup);
        };
        _this._deleteEntitlement = function (e, securityGroup) {
            var messageObject = {
                message: InovxLoader.t('Entitlement:message.confirmDelete'),
                confirmCallback: function () {
                    EntitlementActions.deleteEntitlement(securityGroup, null);
                }
            };
            SystemActions.displayConfirmationMessage(messageObject);
        };
        _this._showAddEntitlement = function () {
            EntitlementActions.beginAdd();
        };
        _this._initialize = function () {
            EntitlementActions.getAllEntitlement(function () {
                _this._appLoaded = true;
            }, function (error) {
                _this._handlePermissionError(error);
            }, true);
        };
        _this.state = getEntitlementState();
        return _this;
    }
    EntitlementApp.prototype.componentWillMount = function () {
        this.componentWillMountBase();
    };
    EntitlementApp.prototype.componentDidMount = function () {
        EntitlementStore.addChangeListener(this._onChange);
        SystemStore.addChangeListener(this._onSystemChange);
    };
    EntitlementApp.prototype.componentWillUnmount = function () {
        EntitlementStore.removeChangeListener(this._onChange);
        SystemStore.removeChangeListener(this._onSystemChange);
    };
    EntitlementApp.prototype.render = function () {
        var columns = [{
                field: "Name",
                headerText: InovxLoader.t('Entitlement:grid.name'),
                type: "string"
            }, {
                field: "Description",
                headerText: InovxLoader.t('Entitlement:grid.description'),
                type: "string"
            }];
        var commands = {
            command: [
                {
                    iconClassName: 'glyphicon glyphicon-pencil',
                    className: 'grid-button',
                    click: this._beginEditEntitlement
                }, {
                    iconClassName: 'glyphicon glyphicon-trash',
                    className: 'grid-button',
                    click: this._deleteEntitlement
                }
            ],
            width: "85px",
            headerText: InovxLoader.t('Entitlement:grid.commands')
        };
        var defaultSort = [{
                field: "Name",
                dir: "ascending"
            }];
        var iconHeaderProps = {
            iconUrl: "".concat(UrlUtilities.getBaseApplicationUrl(), "/images/Entitlement.png"),
            iconAtt: { alt: "entitlement" },
            title: InovxLoader.t('Entitlement:header.entitlement'),
            rcClass: "cd-btn add-btn",
            onClick: this._showAddEntitlement,
            btnUrl: "".concat(UrlUtilities.getBaseApplicationUrl(), "/images/addSecurityGroup.png"),
            btnAtt: {
                alt: InovxLoader.t('Entitlement:header.newSecurityGroup'),
                title: InovxLoader.t('Entitlement:header.newSecurityGroup'),
                id: 'entApp-addSecGroup-btn',
            }
        };
        for (var i = 0; i < this.state.allSecurityGroup.length; i++) {
            var group = this.state.allSecurityGroup[i];
            if (group.Description == null)
                group.Description = "";
        }
        return (React.createElement(Inovx.Shared.Core.ReactLoader, { appReady: this.isAppLoaded(), errorStatus: this._errorStatus },
            React.createElement("div", { className: "entitlement-app-content" },
                React.createElement(Inovx.Shared.Layout.IconHeader, __assign({}, iconHeaderProps)),
                React.createElement(Inovx.Shared.Controls.Grid, { dataSource: this.state.allSecurityGroup, commands: commands, columns: columns, defaultSort: defaultSort, filter: true, sort: true, pageable: { pageCount: 5, pageSize: 10, pageSizes: [10, 20, 50] } })),
            React.createElement(Inovx.Shared.Controls.ModalSlider, { isOpen: this.state.modalVisible, onClose: this._hideModal },
                React.createElement(EntitlementForm, null))));
    };
    return EntitlementApp;
}(Inovx.Shared.ReactExt.BaseAppComponent));
module.exports = EntitlementApp;

},{"./../actions/EntitlementActions":2,"./../constants/EntitlementConstants":5,"./../stores/EntitlementStore":7,"./EntitlementForm":4,"react":"react","shared.web.client":"shared.web.client"}],4:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var React = require("react");
var EntitlementStore = require("./../stores/EntitlementStore");
var EntitlementConstants = require("./../constants/EntitlementConstants");
var EntitlementActions = require("./../actions/EntitlementActions");
var Inovx = require("shared.web.client");
var SystemActions = Inovx.Shared.System.Actions;
var SystemStore = Inovx.Shared.System.Store;
var InovxControls = Inovx.Shared.Controls;
var UrlUtilities = Inovx.Shared.Common.UrlUtilities;
var ListHelper = Inovx.Shared.Common.ListHelper;
function getActionInProgress() {
    return SystemStore.isActionInProgress(EntitlementConstants.ENTITLEMENT_ADD) ||
        SystemStore.isActionInProgress(EntitlementConstants.ENTITLEMENT_EDIT);
}
var _displaySelectUserState;
var _actionInProgressMsg;
function getFormState() {
    return {
        securityGroup: EntitlementStore.getSecurityGroup(),
        isAdding: EntitlementStore.getIsAdding(),
        isEditing: EntitlementStore.getIsEditing(),
        isActionInProgress: getActionInProgress(),
        actionInProgressMsg: _actionInProgressMsg,
        applicationPermissions: EntitlementStore.getSecurityGroupDetail().ApplicationPermissions,
        groupUsers: EntitlementStore.getSecurityGroupDetail().GroupUsers,
        validation: EntitlementStore.getValidation(EntitlementConstants.ENTITLEMENT_ADD_FORM)
    };
}
var EntitlementForm = /** @class */ (function (_super) {
    __extends(EntitlementForm, _super);
    function EntitlementForm(props) {
        var _this = _super.call(this, props) || this;
        _this._onChange = function (event) {
            EntitlementActions.editSecurityGroup(EntitlementConstants.ENTITLEMENT_ADD_FORM, event.target.name, event.target.value);
        };
        _this._loadState = function () {
            _this.setState(getFormState());
        };
        _this._systemChange = function () {
            _this.setState({
                isActionInProgress: getActionInProgress()
            });
        };
        _this._validateEntitlement = function () {
            if (!EntitlementStore.getIsValidEditObject()) {
                EntitlementActions.displayInvalidEdit();
                return false;
            }
            return EntitlementStore.getIsValidObject(EntitlementConstants.ENTITLEMENT_ADD_FORM);
        };
        _this._saveEntitlement = function () {
            if (_this._validateEntitlement()) {
                if (_this.state.isAdding) {
                    EntitlementActions.createEntitlement();
                }
                else {
                    EntitlementActions.updateEntitlement();
                }
                _this.setState({ actionInProgressMsg: InovxLoader.t('Entitlement:form.saving') });
            }
            else {
                _this.setState({});
            }
        };
        _this._cancel = function () {
            EntitlementActions.finishEdit();
        };
        _this._updatePermissions = function (id, event) {
            EntitlementActions.editPermissions(id, event.target.checked);
        };
        _this._isEmptyOrNull = function (value) {
            return value && value.length > 0;
        };
        _this._validateUsers = function (users) {
            var assignedUsers = _this.state.groupUsers;
            var messageObject = {
                message: InovxLoader.t("Entitlement:message.duplicateUser")
            };
            var dupUsers = [];
            for (var i = 0; i < users.length; i++) {
                var user = users[i];
                for (var j = 0; j < assignedUsers.length; j++) {
                    var assignedUser = assignedUsers[j];
                    if (user.UserName === assignedUser.UserName && user.UserID === assignedUser.UserID) {
                        var duplicatUserFound = true;
                        dupUsers.push(user.UserName);
                    }
                }
            }
            messageObject.message += dupUsers.join(", ");
            if (duplicatUserFound)
                SystemActions.displayWarningMessage(messageObject);
        };
        _this._addsecurityGroupUser = function (users) {
            _this._validateUsers(users);
            if (users.length > 0) {
                EntitlementActions.addUsers(users);
            }
        };
        _this._deleteSecurityGroupUser = function (e, user) {
            EntitlementActions.deleteUser(user);
        };
        _this._checkForUnsavedChanges = function (event) {
            if (EntitlementStore.getHasChanges()) {
                event.returnValue = InovxLoader.t('common:msgBox.browserSaveChanges');
            }
            ;
        };
        _this.state = getFormState();
        return _this;
    }
    EntitlementForm.prototype.componentDidMount = function () {
        EntitlementStore.addChangeListener(this._loadState);
        SystemStore.addChangeListener(this._systemChange);
        window.addEventListener('beforeunload', this._checkForUnsavedChanges);
    };
    EntitlementForm.prototype.componentWillUnmount = function () {
        EntitlementStore.removeChangeListener(this._loadState);
        SystemStore.removeChangeListener(this._systemChange);
        window.removeEventListener('beforeunload', this._checkForUnsavedChanges);
    };
    EntitlementForm.prototype.render = function () {
        var _this = this;
        ListHelper.sort(this.state.applicationPermissions, "ApplicationDisplayName");
        var inputObj = {
            className: 'form-control',
            type: 'text'
        };
        var securityGroup = this.state.securityGroup;
        var nameInput = jQuery.extend({
            name: 'Name',
            id: 'entApp-groupName-input',
            value: securityGroup.Name
        }, inputObj);
        var descriptionInput = jQuery.extend({
            name: 'Description',
            id: 'entApp-desc-input',
            value: securityGroup.Description
        }, inputObj);
        var header = this.state.isAdding ? InovxLoader.t('Entitlement:header.newSecurityGroup') : InovxLoader.t('Entitlement:header.editSecurityGroup');
        var columns = [{
                field: "UserName",
                headerText: InovxLoader.t('Entitlement:common.username')
            }, {
                field: "FirstName",
                headerText: InovxLoader.t('Entitlement:common.firstname')
            }, {
                field: "LastName",
                headerText: InovxLoader.t('Entitlement:common.lastname')
            }, {
                field: "Enabled",
                headerText: InovxLoader.t('Entitlement:common.userStatus'),
                width: "165px",
                values: [
                    { value: true, text: InovxLoader.t('Entitlement:common.enabled') },
                    { value: false, text: InovxLoader.t('Entitlement:common.disabled') }
                ]
            }];
        var userDataSource = this.state.groupUsers;
        var userDefaultSort = [{
                field: "UserName",
                dir: "ascending"
            }];
        var userCommands = {
            command: [
                {
                    iconClassName: "glyphicon glyphicon-trash",
                    click: this._deleteSecurityGroupUser
                }
            ],
            width: "85px",
            headerText: InovxLoader.t('Entitlement:common.commands')
        };
        var gridWidths = {
            permissionName: { width: "calc(40% - 40px)" },
            enabled: { width: "80px" },
            description: { width: "calc(60% - 40px)" }
        };
        return (React.createElement(InovxControls.StaticHeaderForm, { title: header, saveOnClick: this._saveEntitlement, saveBtnId: "entApp-save-btn", cancelOnClick: this._cancel, cancelBtnId: "entApp-cancel-btn", isActionInProgress: this.state.isActionInProgress, inProgressMessage: this.state.actionInProgressMsg },
            React.createElement(InovxControls.FormField, { title: "".concat(InovxLoader.t("Entitlement:form.name")).concat(securityGroup.IsSystemDefault ? '' : '*'), inputName: 'Name' },
                React.createElement(InovxControls.ValidationInput, __assign({}, nameInput, { className: "form-control", onChange: this._onChange, readOnly: securityGroup.IsSystemDefault, validation: this.state.validation['Name'] }))),
            React.createElement(InovxControls.FormField, { title: InovxLoader.t("Entitlement:form.description"), inputName: 'Description' },
                React.createElement("input", __assign({}, descriptionInput, { onChange: this._onChange, readOnly: securityGroup.IsSystemDefault }))),
            React.createElement(InovxControls.TabControl, { tabs: [InovxLoader.t("Entitlement:form.permissions"), InovxLoader.t("Entitlement:form.users")] },
                React.createElement(InovxControls.Content, null,
                    React.createElement("div", { className: "entitlement-permissions" }, this.state.applicationPermissions.map(function (applicationPermission) {
                        ListHelper.sort(applicationPermission.Permissions, "DisplayName");
                        return (React.createElement(InovxControls.Expander, { title: applicationPermission.ApplicationDisplayName, key: applicationPermission.ApplicationDisplayName },
                            React.createElement("div", { className: "tg-table" },
                                React.createElement("div", { className: "tg-grid" },
                                    React.createElement("div", { className: "tg-header-container" },
                                        React.createElement("div", { className: "tg-header tg-row" },
                                            React.createElement("div", { className: "tg-cell", style: gridWidths.permissionName },
                                                React.createElement("div", { className: "tg-hdr-ctnt" },
                                                    React.createElement("div", { className: "tg-title" }, InovxLoader.t('Entitlement:permission.name')))),
                                            React.createElement("div", { className: "tg-cell", style: gridWidths.enabled },
                                                React.createElement("div", { className: "tg-hdr-ctnt" },
                                                    React.createElement("div", { className: "tg-title" }, InovxLoader.t('Entitlement:permission.enabled')))),
                                            React.createElement("div", { className: "tg-cell", style: gridWidths.description },
                                                React.createElement("div", { className: "tg-hdr-ctnt" },
                                                    React.createElement("div", { className: "tg-title" }, InovxLoader.t('Entitlement:permission.description'))))))),
                                React.createElement("div", { className: "tg-content-container", style: { overflow: 'initial' } },
                                    React.createElement("div", { className: 'tg-content' }, applicationPermission.Permissions.map(function (permission) {
                                        return (React.createElement("div", { className: 'tg-row', "data-uid": permission.ID, key: permission.ID },
                                            React.createElement("div", { style: gridWidths.permissionName, className: 'tg-cell' }, permission.DisplayName),
                                            React.createElement("div", { style: gridWidths.enabled, className: 'tg-cell' },
                                                " ",
                                                React.createElement("input", { type: "checkbox", onChange: function (event) { return _this._updatePermissions(permission.ID, event); }, disabled: securityGroup.IsSystemDefault, checked: permission.Assigned, className: "checkbox" })),
                                            React.createElement("div", { style: gridWidths.description, className: 'tg-cell' }, permission.Description)));
                                    }))))));
                    }))),
                React.createElement(InovxControls.Content, { class: 'fc-margin' },
                    React.createElement(InovxControls.FormField, { title: InovxLoader.t("Entitlement:form.assignUsers"), inputName: 'AssignUsers' },
                        React.createElement(InovxControls.MultiSelect, { minLength: 1, displayProp: "UserName", url: "".concat(UrlUtilities.getApiUrl(), "/EntitlementApi/api/User/SearchUsers"), onClick: this._addsecurityGroupUser, parameters: { maxNumberOfResults: 5 }, numParameter: 'maxNumberOfResults', searchProperty: 'searchString', btnLabel: InovxLoader.t("Entitlement:form.addUserName"), keyProp: "UserID" })),
                    React.createElement(Inovx.Shared.Controls.Grid, { dataSource: userDataSource, commands: userCommands, columns: columns, defaultSort: userDefaultSort, sort: true })))));
    };
    return EntitlementForm;
}(React.Component));
module.exports = EntitlementForm;

},{"./../actions/EntitlementActions":2,"./../constants/EntitlementConstants":5,"./../stores/EntitlementStore":7,"react":"react","shared.web.client":"shared.web.client"}],5:[function(require,module,exports){
"use strict";
var keymirror = require("fbjs/lib/keymirror");
var EntitlementConstants = keymirror({
    ENTITLEMENT_ADD_FORM: null,
    ENTITLEMENT_FORM_INVALID_SAVE: null,
    ENTITLEMENT_RECIEVE_DATA: null,
    ENTITLEMENT_UPDATE_SECURITY_GROUP: null,
    ENTITLEMENT_ADD_USER: null,
    ENTITLEMENT_DELETE_USER: null,
    ENTITLEMENT_UPDATE_PERMISSIONS: null,
    ENTITLEMENT_BEGIN_ADD: null,
    ENTITLEMENT_ADD: null,
    ENTITLEMENT_BEGIN_EDIT: null,
    ENTITLEMENT_EDIT: null,
    ENTITLEMENT_FINISH_EDIT: null,
    ENTITLEMENT_DELETE: null
});
module.exports = EntitlementConstants;

},{"fbjs/lib/keymirror":"fbjs/lib/keymirror"}],6:[function(require,module,exports){
"use strict";
var Inovx = require("shared.web.client");
var assign = require("object-assign");
var UrlUtilities = Inovx.Shared.Common.UrlUtilities;
var url = "".concat(UrlUtilities.getApiUrl(), "/EntitlementApi/api/entitlementgroup");
var EntitlementServices = assign({}, Inovx.Shared.Flux.BaseService, {
    getAll: function (successCallback, errorCallback, ignoreDefaultError) {
        var _this = this;
        this.get(url, null, function (retData) {
            successCallback(retData);
        }, function (error) {
            if (!ignoreDefaultError) {
                _this.handleWebApiError(error);
            }
            errorCallback(error);
        });
    },
    getApplicationPermissions: function (successCallback, errorCallback) {
        var _this = this;
        this.get("".concat(url, "/ApplicationPermissions"), null, function (retData) {
            successCallback(retData);
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    },
    getDetail: function (id, successCallback, errorCallback) {
        var _this = this;
        this.get("".concat(url, "/").concat(id), {}, function (retData) {
            successCallback(retData);
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    },
    create: function (entitlementGroup, permissionIDs, groupUserIDs, successCallback, errorCallback) {
        var _this = this;
        this.post("".concat(url, "/Create"), { entitlementGroup: entitlementGroup, permissionIDs: permissionIDs, groupUserIDs: groupUserIDs }, function (data) {
            successCallback(data);
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    },
    update: function (entitlementGroup, permissionIDs, groupUserIDs, successCallback, errorCallback) {
        var _this = this;
        this.post("".concat(url, "/Update"), { entitlementGroup: entitlementGroup, permissionIDs: permissionIDs, groupUserIDs: groupUserIDs }, function (data) {
            successCallback(data);
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    },
    delete: function (entitlementGroup, successCallback, errorCallback) {
        var _this = this;
        this.post("".concat(url, "/Delete"), { ID: entitlementGroup.ID, VersionToken: entitlementGroup.VersionToken }, function (data) {
            successCallback();
        }, function (error) {
            _this.handleWebApiError(error);
            errorCallback(error);
        });
    },
});
module.exports = EntitlementServices;

},{"object-assign":9,"shared.web.client":"shared.web.client"}],7:[function(require,module,exports){
"use strict";
var NodeEvents = require("events");
var Inovx = require("shared.web.client");
var assign = require("object-assign");
var EntitlementConstants = require("./../constants/EntitlementConstants");
var EventEmitter = NodeEvents.EventEmitter;
var CommonMessages = Inovx.Shared.Common.CommonMessages;
var ENTITLEMENT_CHANGE_EVENT = 'Entitlement.change';
var _securityGroups = [], _securityGroup = getBlankSecurityGroup(), _applicationPermissions = [], _securityGroupDetail = getBlankSecurityGroupDetail(_applicationPermissions), _user = getBlankUser(), _beginAdd = false, _beginEdit = false, _modalVisible = false, _hasChanges = false, _validation = {};
function loadEntitlementData(data) {
    _securityGroups = data;
}
function _updateSecurityGroup(comp, key, value) {
    switch (comp) {
        case EntitlementConstants.ENTITLEMENT_ADD_FORM:
            _updateChanges(key, value);
            _hasChanges = true;
            break;
    }
}
function _updateChanges(name, value) {
    switch (name) {
        case "Name":
            _securityGroup[name] = value;
            if (value) {
                var dupName = false;
                for (var i = 0; i < _securityGroups.length; i++) {
                    if (_securityGroup.Name.toUpperCase() === _securityGroups[i].Name.toUpperCase()
                        && _securityGroup.ID.toUpperCase() !== _securityGroups[i].ID.toUpperCase()) {
                        dupName = true;
                        break;
                    }
                }
                if (dupName) {
                    _validation[EntitlementConstants.ENTITLEMENT_ADD_FORM][name].invalidValue = true;
                    _validation[EntitlementConstants.ENTITLEMENT_ADD_FORM][name].invalidValueMessage = InovxLoader.t("Entitlement:message.invalidSecurityGroupName");
                }
                else {
                    _setValidValidation(EntitlementConstants.ENTITLEMENT_ADD_FORM, name);
                }
            }
            else {
                _validation[EntitlementConstants.ENTITLEMENT_ADD_FORM][name].invalidValue = true;
                _validation[EntitlementConstants.ENTITLEMENT_ADD_FORM][name].invalidValueMessage = CommonMessages.Validation.Required;
            }
            break;
        default:
            if (name != 'ID' && name != 'VersionToken') {
                _securityGroup[name] = value;
            }
            _setValidValidation(EntitlementConstants.ENTITLEMENT_ADD_FORM, name);
            break;
    }
}
function updatePermissions(uid, value) {
    var applicationPermissions = _securityGroupDetail.ApplicationPermissions;
    for (var index in applicationPermissions) {
        var applicationPermission = applicationPermissions[index];
        for (var subIndex in applicationPermission.Permissions) {
            var permission = applicationPermission.Permissions[subIndex];
            if (permission.ID == uid) {
                permission.Assigned = value;
                _hasChanges = true;
                break;
            }
        }
    }
}
function addUsers(users) {
    for (var indx in users) {
        var exists = false;
        for (var grpIndx in _securityGroupDetail.GroupUsers) {
            if (users[indx].UserID === _securityGroupDetail.GroupUsers[grpIndx].UserID) {
                exists = true;
                break;
            }
        }
        if (!exists) {
            _securityGroupDetail.GroupUsers.push(users[indx]);
        }
    }
    _hasChanges = true;
}
function deleteUser(user) {
    for (var index in _securityGroupDetail.GroupUsers) {
        if (_securityGroupDetail.GroupUsers[index].UserName == user.UserName) {
            _securityGroupDetail.GroupUsers.splice(index, 1);
            _hasChanges = true;
            break;
        }
    }
    ;
}
function setAddingEntitlement(applicationPermissions) {
    _beginAdd = _modalVisible = true;
    _beginEdit = false;
    _securityGroup = getBlankSecurityGroup();
    _securityGroupDetail = getBlankSecurityGroupDetail(applicationPermissions);
    _user = getBlankUser();
    _hasChanges = false;
    _initalizeValidation(EntitlementConstants.ENTITLEMENT_ADD_FORM);
}
function setEditingEntitlement(securityGroup, securityGroupDetail) {
    _modalVisible = _beginEdit = true;
    _beginAdd = false;
    _securityGroup = $.extend({}, securityGroup);
    _securityGroupDetail = $.extend({}, securityGroupDetail);
    _user = getBlankUser();
    _hasChanges = false;
    _initalizeValidation(EntitlementConstants.ENTITLEMENT_ADD_FORM);
}
function _initalizeValidation(comp) {
    switch (comp) {
        case EntitlementConstants.ENTITLEMENT_ADD_FORM:
            var valiObj = _validation[EntitlementConstants.ENTITLEMENT_ADD_FORM] = {};
            for (var k in _securityGroup) {
                _setValidValidation(EntitlementConstants.ENTITLEMENT_ADD_FORM, k);
            }
            break;
    }
}
function _setValidValidation(comp, name) {
    if (_validation[comp][name]) {
        _validation[comp][name].invalidInput = false;
        _validation[comp][name].invalidValue = false;
    }
    else {
        _validation[comp][name] = _getNewValidationObject();
    }
}
function _getNewValidationObject() {
    return {
        invalidInput: false,
        invalidValue: false
    };
}
function _validate(comp) {
    switch (comp) {
        case EntitlementConstants.ENTITLEMENT_ADD_FORM:
            return _validateObject(comp, _securityGroup);
    }
    return false;
}
function _ensureValidObject(comp, obj) {
    for (var k in obj) {
        switch (comp) {
            case EntitlementConstants.ENTITLEMENT_ADD_FORM:
                var objType = typeof (obj[k]);
                if (objType !== 'function') {
                    if (obj[k] === null || objType !== 'object') {
                        _updateChanges(k, obj[k]);
                    }
                    else if (obj.constructor !== Array) {
                        _ensureValidObject(comp, obj[k]);
                    }
                }
        }
    }
}
function _validateObject(comp, obj) {
    _ensureValidObject(comp, obj);
    for (var k in _validation[EntitlementConstants.ENTITLEMENT_ADD_FORM]) {
        if (_validation[EntitlementConstants.ENTITLEMENT_ADD_FORM][k].invalidValue) {
            return false;
        }
    }
    return true;
}
function finishedEditing() {
    _modalVisible = false;
    _hasChanges = false;
}
function getBlankSecurityGroup() {
    return {
        ID: '',
        VersionToken: '',
        Name: '',
        Description: '',
        IsSystemDefault: false,
    };
}
function getBlankSecurityGroupDetail(applicationPermissions) {
    return {
        ApplicationPermissions: applicationPermissions,
        GroupUsers: []
    };
}
function getBlankApplicationPermission() {
    return {
        ApplicationDisplayName: null,
        Permissions: []
    };
}
function getBlankUser() {
    return {
        UserID: null,
        UserName: null,
        UserVersionToken: null,
        FirstName: null,
        LastName: null,
        Enabled: null,
    };
}
var EntitlementStore = assign({}, EventEmitter.prototype, {
    // Add store getters here
    getAll: function () {
        return _securityGroups;
    },
    getSecurityGroup: function () {
        return _securityGroup;
    },
    getSecurityGroupDetail: function () {
        return _securityGroupDetail;
    },
    getUser: function () {
        return _user;
    },
    getIsAdding: function () {
        return _beginAdd;
    },
    getIsEditing: function () {
        return _beginEdit;
    },
    getHasChanges: function () {
        return _hasChanges;
    },
    getModalVisible: function () {
        return _modalVisible;
    },
    getValidation: function (key) {
        return _validation[key];
    },
    getIsValidObject: function (key) {
        return _validate(key);
    },
    getIsValidEditObject: function () {
        return !(_securityGroup.IsSystemDefault && _securityGroup.Name === 'System Administrator' && _securityGroupDetail.GroupUsers.length == 0);
    },
    emitChange: function () {
        this.emit(ENTITLEMENT_CHANGE_EVENT);
    },
    addChangeListener: function (callback) {
        this.on(ENTITLEMENT_CHANGE_EVENT, callback);
    },
    removeChangeListener: function (callback) {
        this.removeListener(ENTITLEMENT_CHANGE_EVENT, callback);
    }
});
Inovx.Shared.Flux.AppDispatcher.register(function (payload) {
    switch (payload.actionType) {
        case EntitlementConstants.ENTITLEMENT_BEGIN_ADD:
            setAddingEntitlement(payload.applicationPermissions);
            break;
        case EntitlementConstants.ENTITLEMENT_BEGIN_EDIT:
            setEditingEntitlement(payload.securityGroup, payload.securityGroupDetail);
            break;
        case EntitlementConstants.ENTITLEMENT_FINISH_EDIT:
            finishedEditing();
            break;
        case EntitlementConstants.ENTITLEMENT_RECIEVE_DATA:
            loadEntitlementData(payload.data);
            break;
        case EntitlementConstants.ENTITLEMENT_UPDATE_SECURITY_GROUP:
            _updateSecurityGroup(payload.component, payload.key, payload.value);
            break;
        case EntitlementConstants.ENTITLEMENT_UPDATE_PERMISSIONS:
            updatePermissions(payload.uid, payload.value);
            break;
        case EntitlementConstants.ENTITLEMENT_ADD_USER:
            addUsers(payload.users);
            break;
        case EntitlementConstants.ENTITLEMENT_DELETE_USER:
            deleteUser(payload.user);
            break;
        case EntitlementConstants.ENTITLEMENT_FORM_INVALID_SAVE:
            break;
        default: return true;
    }
    EntitlementStore.emitChange();
    return true;
});
module.exports = EntitlementStore;

},{"./../constants/EntitlementConstants":5,"events":8,"object-assign":9,"shared.web.client":"shared.web.client"}],8:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var objectCreate = Object.create || objectCreatePolyfill
var objectKeys = Object.keys || objectKeysPolyfill
var bind = Function.prototype.bind || functionBindPolyfill

function EventEmitter() {
  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
    this._events = objectCreate(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

var hasDefineProperty;
try {
  var o = {};
  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
  hasDefineProperty = o.x === 0;
} catch (err) { hasDefineProperty = false }
if (hasDefineProperty) {
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      // check whether the input is a positive number (whose value is zero or
      // greater and not a NaN).
      if (typeof arg !== 'number' || arg < 0 || arg !== arg)
        throw new TypeError('"defaultMaxListeners" must be a positive number');
      defaultMaxListeners = arg;
    }
  });
} else {
  EventEmitter.defaultMaxListeners = defaultMaxListeners;
}

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    if (arguments.length > 1)
      er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Unhandled "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
      // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
      // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = objectCreate(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
          listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
            existing.length + ' "' + String(type) + '" listeners ' +
            'added. Use emitter.setMaxListeners() to ' +
            'increase limit.');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        if (typeof console === 'object' && console.warn) {
          console.warn('%s: %s', w.name, w.message);
        }
      }
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    switch (arguments.length) {
      case 0:
        return this.listener.call(this.target);
      case 1:
        return this.listener.call(this.target, arguments[0]);
      case 2:
        return this.listener.call(this.target, arguments[0], arguments[1]);
      case 3:
        return this.listener.call(this.target, arguments[0], arguments[1],
            arguments[2]);
      default:
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i)
          args[i] = arguments[i];
        this.listener.apply(this.target, args);
    }
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = bind.call(onceWrapper, state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = objectCreate(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else
          spliceOne(list, position);

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (!events)
    return [];

  var evlistener = events[type];
  if (!evlistener)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function objectCreatePolyfill(proto) {
  var F = function() {};
  F.prototype = proto;
  return new F;
}
function objectKeysPolyfill(obj) {
  var keys = [];
  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
    keys.push(k);
  }
  return k;
}
function functionBindPolyfill(context) {
  var fn = this;
  return function () {
    return fn.apply(context, arguments);
  };
}

},{}],9:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
