// This is a hack for Syncfusion ReactJS
window.React = require('react');
window.ReactDOM = require('react-dom');
window.createReactClass = require('create-react-class');
var InovxLoader = (function () {
    var _CHANGE = 'loader/change';
    var _LOADED = 'loader/loaded';
    var _LOADING = 'loader/loading';
    var _hasInitialized = false;
    var _loadStack = [];
    var _functionStack = [];
    var _localeData;
    var _publishEvent = function (event) {
        PubSub.publish(event);
    };
    var _loadFinished = function () {
        _loadStack.pop();
        if (isLoaded) {
            _publishEvent(_LOADED);
        }
    };
    var _enqueueLoad = function () {
        _loadStack.push(1);
        _publishEvent(_LOADING);
    };
    var _overrideFetchOne = function (originalFetchOne) {
        return function (lng, ns, options, done) {
            options.resGetPath = i18n.baseUrl + i18n.namespaceMap[ns] + '/locale/__lng__/__ns__.json?v=' + window.ContentVersion;
            return originalFetchOne(lng, ns, options, done);
        };
    };
    var initialize = function () {
        _enqueueLoad();
        var baseUrl = window.BASE_URL;
        var originalFetchOne = i18n.sync._fetchOne;
        i18n.sync._fetchOne = _overrideFetchOne(originalFetchOne);
        addNamespace('common', window.APP_URL);
        i18n.baseUrl = baseUrl;
        i18n.init({
            lng: _localeData.lng,
            lowerCaseLng: true,
            fallbackLng: ['en-us'],
            load: 'current',
            ns: {
                namespaces: ['common']
            },
            resGetPath: '/locale/__lng__/__ns__.json',
            useDataAttrOptions: true
        }, function (err, t) {
            _hasInitialized = true;
            for (var i = 0; i < _functionStack.length; i++) {
                _functionStack[i]();
            }
            _functionStack.length = 0;
            _loadFinished();
        });
    };
    var setLocaleData = function (lng, datePattern, timePattern, tz) {
        _localeData = { lng: lng, datePattern: datePattern, timePattern: timePattern, tz: tz };
    };
    var addLanguage = function (namespace, url, callback) {
        var enqueueFunction = function (pNamespace, pUrl, pCallback) {
            return function () {
                _enqueueLoad();
                addNamespace(pNamespace, pUrl);
                i18n.loadNamespace(pNamespace, function () {
                    _loadFinished();
                    if (pCallback) {
                        pCallback();
                    }
                });
            };
        }(namespace, url, callback);
        if (_hasInitialized) {
            enqueueFunction();
        }
        else {
            _functionStack.push(enqueueFunction);
        }
    };
    var addNamespace = function (namespace, url) {
        if (i18n.namespaceMap === undefined) {
            i18n.namespaceMap = {};
        }
        i18n.namespaceMap[namespace] = url;
    };
    var t = function (translate, varObj) {
        return i18n.t(translate, varObj);
    };
    var getSyncfusionLocale = function () {
        var lng = i18n.lng();
        switch (lng.toLowerCase()) {
            case "zh-hans": return "zh-CN";
            case "ja-jp": return "ja-JP";
            default: return lng;
        }
    };
    var getSyncfusionJS2Locale = function () {
        var lng = i18n.lng();
        switch (lng.toLowerCase()) {
            case "zh-hans": return "zh";
            case "ja-jp": return "ja";
            default: return "";
        }
    };
    var getSyncfusionJS2JsonUrl = function () {
        var locale = getSyncfusionJS2Locale();
        if (locale) {
            var urlRoot = window.BASE_URL + window.APP_URL;
            return "".concat(urlRoot, "/locale/ej2-locale/").concat(locale, ".json");
        }
        else {
            return null;
        }
    };
    var getPdfTrueTypeFontUrl = function () {
        var lng = i18n.lng();
        var fontLng = null;
        switch (lng.toLowerCase()) {
            case "zh-hans":
                fontLng = "SC";
                break;
            case "ja-jp":
                fontLng = "JP";
                break;
            default: fontLng = "";
        }
        var fontUrl = null;
        if (fontLng !== null) {
            var urlRoot = window.BASE_URL + window.APP_URL;
            fontUrl = "".concat(urlRoot, "/locale/fonts/NotoSans").concat(fontLng, "-Regular.ttf");
        }
        return fontUrl;
    };
    var getCldrJsonUrls = function () {
        var locale = getSyncfusionJS2Locale();
        if (locale) {
            var urlRoot = window.BASE_URL + window.APP_URL;
            return [
                "".concat(urlRoot, "/locale/ej2-locale/cldr-data/").concat(locale, "/ca-gregorian.json"),
                "".concat(urlRoot, "/locale/ej2-locale/cldr-data/").concat(locale, "/numbers.json"),
                "".concat(urlRoot, "/locale/ej2-locale/cldr-data/").concat(locale, "/timeZoneNames.json"),
                "".concat(urlRoot, "/locale/ej2-locale/cldr-data/numberingSystems.json"),
                "".concat(urlRoot, "/locale/ej2-locale/cldr-data/weekData.json"),
                "".concat(urlRoot, "/locale/ej2-locale/cldr-data/").concat(locale, "/currencies.json")
            ];
        }
        else {
            return null;
        }
    };
    var getLocaleData = function () {
        return _localeData;
    };
    var loadStyleSheet = function (id, href, callback) {
        var existingScript = document.getElementById(id);
        if (!existingScript) {
            var link = document.createElement('link');
            link.type = "text/css";
            link.rel = "stylesheet";
            link.href = href;
            link.id = id;
            document.head.appendChild(link);
            link.onload = function () {
                if (callback)
                    callback();
            };
        }
        else {
            if (callback)
                callback();
        }
    };
    var unloadStyleSheet = function (id) {
        var link = document.getElementsByTagName("link").namedItem(id);
        if (link) {
            link.parentNode.removeChild(link);
        }
    };
    var loadSyncfusionJS1 = function (callback) {
        // load the EJ1 CSS
        var urlRoot = window.BASE_URL + window.APP_URL;
        loadStyleSheet('ej.web.all.min.css', urlRoot + '/js/lib/js1/themes/default-theme/ej.web.all.min.css', function () {
            if (callback)
                callback();
        });
    };
    var unloadSyncfusionJS1 = function () {
        // unload the EJ1 CSS
        unloadStyleSheet("ej.web.all.min.css");
    };
    var subscribeEvent = function (callback) {
        PubSub.subscribe(_CHANGE, callback);
    };
    var unsubscribeEvent = function (callback) {
        PubSub.unsubscribe(_CHANGE, callback);
    };
    var loadedOnce = function (callback) {
        if (!isLoaded) {
            PubSub.subscribe(_LOADED, function () {
                PubSub.unsubscribe(_LOADED, callback);
                callback();
            });
        }
        else {
            callback();
        }
    };
    var loadedEvent = function (callback) {
        PubSub.subscribe(_LOADED, callback);
    };
    var removeLoadedEvent = function (callback) {
        PubSub.unsubscribe(_LOADED, callback);
    };
    var loadingEvent = function (callback) {
        PubSub.subscribe(_LOADING, callback);
    };
    var removeLoadingEvent = function (callback) {
        PubSub.unsubscribe(_LOADING, callback);
    };
    var isLoading = function () {
        return _loadStack.length > 0;
    };
    var isLoaded = function () {
        return _loadStack.length == 0;
    };
    var getHelpUrl = function (helpName) {
        var helpBaseUrl = window.HELP_URL;
        var contextHelpUrl = "".concat(helpBaseUrl, "/").concat(helpName.split("-").join(""), ".html");
        return contextHelpUrl;
    };
    var updateHelp = function (helpName) {
        //This method SHOULD NOT be here... Header stuff should have it's own global object that modifies the header...
        // Putting the help link stuff here because of time constrictions.
        $("#ihdr-help-for-page").attr('href', getHelpUrl(helpName));
    };
    return {
        initialize: initialize,
        subscribe: subscribeEvent,
        unsubscribe: unsubscribeEvent,
        loaded: loadedEvent,
        unload: removeLoadedEvent,
        loading: loadingEvent,
        unloading: removeLoadingEvent,
        loadedOnce: loadedOnce,
        isLoaded: isLoaded(),
        isLoading: isLoading(),
        t: t,
        addLanguage: addLanguage,
        getSyncfusionLocale: getSyncfusionLocale,
        getSyncfusionJS2Locale: getSyncfusionJS2Locale,
        getSyncfusionJS2JsonUrl: getSyncfusionJS2JsonUrl,
        getCldrJsonUrls: getCldrJsonUrls,
        getPdfTrueTypeFontUrl: getPdfTrueTypeFontUrl,
        setLocaleData: setLocaleData,
        getLocaleData: getLocaleData,
        loadSyncfusionJS1: loadSyncfusionJS1,
        unloadSyncfusionJS1: unloadSyncfusionJS1,
        loadStyleSheet: loadStyleSheet,
        unloadStyleSheet: unloadStyleSheet,
        getHelpUrl: getHelpUrl,
        updateHelp: updateHelp
    };
})();
//# sourceMappingURL=GlobalLoader.js.map
$(document).ready(function () {
    var Inovx = require('shared.web.client');
    var SystemStore = Inovx.Shared.System.Store;
    var PreferencesStore = Inovx.Shared.Preferences.Store;
    var WebClientStore = Inovx.Shared.WebClient.Store;
    var ClipboardHelper = Inovx.Shared.Common.ClipboardHelper;
    var PermissionService = Inovx.Shared.Permission.PermissionService;
    var SystemActions = Inovx.Shared.System.Actions;
    window.onresize = function (e) {
        setHeaderWidth();
    };
    function setHeaderWidth() {
        var calculatedWidth = $('.ihdr-main').width();
        calculatedWidth -= $('.ihdr-logo').width();
        $('.ihdr-menu').children().each(function () {
            calculatedWidth -= $(this).width();
        });
        calculatedWidth -= 1; // Because of IE
        if ($('#user-system-preferences').is(":visible")) {
            calculatedWidth = calculatedWidth - $('#user-system-preferences').width();
        }
        $('#ihdr-title-container').width(calculatedWidth);
        if ($('#nav-app-right-link-parent').is(":visible")) {
            calculatedWidth -= $('#nav-app-right-link-parent').width();
        }
        $('#nav-app-title').css('max-width', calculatedWidth);
    }
    window.refreshHeaderWidth = setHeaderWidth;
    setTimeout(setHeaderWidth, 25);
    function showHidePreferencesMenuItem() {
        if (PreferencesStore.hasActivePreferences()) {
            $('#KnowledgeBookMenu').show();
        }
        else {
            $('#KnowledgeBookMenu').hide();
        }
        if (PreferencesStore.hasUserSystemPrefrences()) {
            $('#user-system-preferences').show();
        }
        else {
            $('#user-system-preferences').hide();
        }
        setHeaderWidth();
    }
    function showHideExportMenuItem() {
        //log("CanExport:" + WebClientStore.canExportScene());
        //log("Export Permision:" + PermissionService.checkPermission('KnowledgeBook.ExportScene'));
        if (WebClientStore.canExportScene() && PermissionService.checkPermission('KnowledgeBook.ExportScene')) {
            $('#ihdr-share-export-glb').show();
            $('#ihdr-share-export-obj').show();
        }
        else {
            $('#ihdr-share-export-glb').hide();
            $('#ihdr-share-export-obj').hide();
        }
        setHeaderWidth();
    }
    // Bind share commands
    (function () {
        showHidePreferencesMenuItem();
        showHideExportMenuItem();
        PreferencesStore.addChangeListener(showHidePreferencesMenuItem);
        WebClientStore.addChangeListener(showHideExportMenuItem);
        if ($('#ihdr-share').length > 0) {
            function getMailtoLink() {
                return 'mailto:?subject=' + encodeURIComponent('Knowledge View Link') + '&body=' + encodeURIComponent(location.href);
            }
            $('#ihdr-share-copy').click(function () {
                if (!SystemStore.getIsShareButtonDisabled()) {
                    ClipboardHelper.copyToClipboard(location.href);
                }
            });
            function setMailtoHref() {
                document.getElementById('ihdr-share-email').href = getMailtoLink();
            }
            $('#ihdr-share-email').click(function () {
                if (!SystemStore.getIsShareButtonDisabled()) {
                    setMailtoHref();
                }
            });
        }
        $('.ihdr-menu-toggle').click(function (e) {
            var visible = $(this).siblings(".ihdr-menu-toggle-child").is(":visible");
            $('.ihdr-menu-toggle-child').hide();
            if (!visible) {
                $(this).siblings('.ihdr-menu-toggle-child').show();
            }
            e.stopPropagation();
        });
        function showAccountSidebarPanel(show) {
            var accountPanel = $('#account-sidebar');
            if (show !== accountPanel.hasClass("is-visible")) {
                if (show)
                    accountPanel.addClass("is-visible");
                else
                    accountPanel.removeClass("is-visible");
            }
        }
        function showAccountPopupWindow(show) {
            var accountPopup = $('#account-popup');
            if (show !== accountPopup.hasClass("is-visible")) {
                if (show)
                    accountPopup.addClass("is-visible");
                else {
                    accountPopup.removeClass("is-visible");
                    ReactDOM.unmountComponentAtNode(document.getElementById('account-popup-container'));
                }
            }
        }
        function showLocalePopupWindow(show) {
            var localePopup = $('#locale-popup');
            if (show !== localePopup.hasClass("is-visible")) {
                if (show)
                    localePopup.addClass("is-visible");
                else {
                    localePopup.removeClass("is-visible");
                    ReactDOM.unmountComponentAtNode(document.getElementById('locale-popup-container'));
                }
            }
        }
        $('#ihdr-user-account').click(function (e) {
            showAccountSidebarPanel(true);
            e.stopPropagation();
        });
        $('#account-sidebar-close-button').click(function (e) {
            showAccountSidebarPanel(false);
            e.stopPropagation();
        });
        // This handler is here to prevent the sidebar from closing when the user clicks inside of it.
        $('#account-sidebar-panel').click(function (e) {
            e.stopPropagation();
        });
        $('#show-myaccount-popup-button').click(function (e) {
            showAccountPopupWindow(true);
            var props = { onOK: function () { showAccountPopupWindow(false); } };
            ReactDOM.render(React.createElement(Inovx.App.UserProfile, props), document.getElementById('account-popup-container'));
            e.stopPropagation();
        });
        $('#show-mylocale-popup-button').click(function (e) {
            showLocalePopupWindow(true);
            var props = { onClose: function () { showLocalePopupWindow(false); } };
            ReactDOM.render(React.createElement(Inovx.App.UserLocale, props), document.getElementById('locale-popup-container'));
            e.stopPropagation();
        });
        $('#show-mypreferences-popup-button').click(function (e) {
            showAccountPopupWindow(true);
            var props = { onClose: function () { showAccountPopupWindow(false); } };
            ReactDOM.render(PreferencesStore.displayActivePreferences(props), document.getElementById('account-popup-container'));
            e.stopPropagation();
        });
        $('#ihdr-share-export-glb').click(function (e) {
            WebClientStore.exportSceneToGLB();
        });
        $('#ihdr-share-export-obj').click(function (e) {
            WebClientStore.exportSceneToOBJ();
        });
        $('#ihdr-print').click(function (e) {
            SystemActions.print();
        });
        $('#ihdr-user-system-preferences').click(function (e) {
            showAccountPopupWindow(true);
            var props = { onClose: function () { showAccountPopupWindow(false); } };
            ReactDOM.render(PreferencesStore.displayUserSystemPreferences(props), document.getElementById('account-popup-container'));
            e.stopPropagation();
        });
        // This will hide the popups and slideouts if clicked outside of their areas.
        $(document).click(function () {
            // Only hide the account sidebar panel in case the account modal popup is not visible.
            if (!$('#account-popup').hasClass("is-visible")) {
                showAccountSidebarPanel(false);
            }
            if (!$('#locale-popup').hasClass("is-visible")) {
                showAccountSidebarPanel(false);
            }
            $('.ihdr-menu-toggle-child').hide();
        });
    })();
});
//# sourceMappingURL=Header.js.map